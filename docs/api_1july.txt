Metashape Python Reference
Release 2.1.1
Agisoft LLC
Mar 15, 2024
CONTENTS
1 Overview 3
2 Application Modules 5
3 Python API Change Log 281
Python Module Index 319
i
ii
Metashape Python Reference, Release 2.1.1
Copyright(c)2024Agisoft LLC.
CONTENTS 1
Metashape Python Reference, Release 2.1.1
2 CONTENTS
CHAPTER
ONE
OVERVIEW
1.1 Introduction to Python scripting in Metashape Professional
This API isin developmentandwill be extendedin the future Metashape releases.
Note: Pythonscriptingissupportedonly inMetashape Professional edition.
MetashapeProfessionalusesPython3.8 as a scriptingengine.
Python commands and scripts can be executed in Metashape in one of the following ways:
• From Metashape “Console” pane usingit asstandard Pythonconsole.
• From the “Tools” menuusing“Runscript...” command.
• From commandlineusing“-r” argument andpassing thepath tothescript asan argument.
The following Metashape funtionality can be accessed from Python scripts:
• Open/save/create Metashapeprojects.
• Add/remove chunks, cameras, markers.
• Add/modify camera calibrations, ground control data, assign geographic projections and coor-
dinates.
• Performprocessingsteps(alignphotos,builddensecloud,buildmesh,texture,decimatemodel,
etc...).
• Exportprocessing results (models, textures,orthophotos, DEMs).
• Access dataofgenerated models, point clouds,images.
• Start and controlnetworkprocessing tasks.
3
Metashape Python Reference, Release 2.1.1
4 Chapter 1. Overview
CHAPTER
TWO
APPLICATION MODULES
Metashape module provides access to the core processing functionality, including support for inspection and manipu-
lation with projectdata.
The main component of the module is a Document class, which represents a Metashape project. Multiple Document
instances can be created simultaneously if needed. Besides that a currently opened project in the application can be
accessed usingMetashape.app.documentproperty.
The followingexampleperforms mainprocessingstepson existing project and saves back theresults:
>>> import Metashape
>>> doc = Metashape.app.document
>>> doc.open("project.psz")
>>> chunk = doc.chunk
>>> chunk.matchPhotos(downscale=1, generic_preselection=True, reference_
˓ →preselection=False)
>>> chunk.alignCameras()
>>> chunk.buildDepthMaps(downscale=4, filter_mode=Metashape.AggressiveFiltering)
>>> chunk.buildModel(source_data=Metashape.DepthMapsData, surface_type=Metashape.
˓ →Arbitrary, interpolation=Metashape.EnabledInterpolation)
>>> chunk.buildUV(mapping_mode=Metashape.GenericMapping)
>>> chunk.buildTexture(blending_mode=Metashape.MosaicBlending, texture_size=4096)
>>> doc.save()
class Metashape.Antenna
GPS antennaposition relative tocamera.
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.Antenna
fixed
Fixantennaflag.
Type
bool
location
Antennacoordinates.
5
Metashape Python Reference, Release 2.1.1
Type
Metashape.Vector
location_acc
Antennalocation accuracy.
Type
Metashape.Vector
location_covariance
Antennalocation covariance.
Type
Metashape.Matrix
location_ref
Antennalocation reference.
Type
Metashape.Vector
rotation
Antennarotation angles.
Type
Metashape.Vector
rotation_acc
Antennarotationaccuracy.
Type
Metashape.Vector
rotation_covariance
Antennarotationcovariance.
Type
Metashape.Matrix
rotation_ref
Antennarotationreference.
Type
Metashape.Vector
class Metashape.Application
Application class provides access to several global application attributes, such as document currently loaded in
theuserinterface,softwareversionandGPUdeviceconfiguration. Italsocontainshelperroutinestopromptthe
user to input various types of parameters, like displaying a file selection dialog or coordinate system selection
dialog amongothers.
An instance of Application object can be accessed using Metashape.app attribute, so there is usually no need to
createadditional instances intheusercode.
Thefollowingexamplepromptstheusertoselectanewcoordinatesystem,appliesittotheativechunkandsaves
the project undertheuserselected file name:
>>> import Metashape
>>> doc = Metashape.app.document
>>> crs = Metashape.app.getCoordinateSystem("Select Coordinate System", doc.chunk.
(continues on next page)
6 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
(continued from previous page)
˓ →crs)
>>> doc.chunk.crs = crs
>>> path = Metashape.app.getSaveFileName("Save Project As")
>>> try:
... doc.save(path)
... except RuntimeError:
... Metashape.app.messageBox("Can't save project")
class ConsolePane
ConsolePane class provides accessto the console pane
clear()
Clear console pane.
contents
Consolepanecontents.
Type
str
class ModelView
ModelView class providesaccesstothemodel view
class ModelViewMode
Model view mode in [ModelViewTextured, ModelViewShaded, ModelViewSolid, ModelViewWire-
frame,ModelViewElevation,ModelViewConfidence]
class PointCloudViewMode
Point cloud view mode in [PointCloudViewSolid, PointCloudViewColor, PointCloudViewClassifica-
tion, PointCloudViewIntensity, PointCloudViewElevation, PointCloudViewConfidence, PointCloud-
ViewReturnNumber,PointCloudViewScanAngle,PointCloudViewSourceId]
class TiePointsViewMode
Tiepoints viewmode in[TiePointsViewColor,TiePointsViewElevation,TiePointsViewVariance]
class TiledModelViewMode
Tiledmodelviewmodein[TiledModelViewTextured,TiledModelViewSolid,TiledModelViewWire-
frame,TiledModelViewElevation]
captureVideo(path, width,height[, frame_rate][,transparent][,compressed][,hide_items])
Capture video using camera track. Transparent capture can’t be compressed.Method requires gui and
inaccessible from python module. If script is passed as a program argument, –gui flag should be
specified.
Parameters
• path (str:arg width: Video width.) – Output path.
• height (int)– Video height.
• frame_rate (int)–Videoframe rate.
• transparent (bool) – Setstransparentbackground.
• compressed (bool) –Enables video compression.
• hide_items (bool) – Hides all items.
captureView([width][,height][,transparent][, hide_items])
Captureimage from model view.
Parameters
• width (int)– Image width.
• height (int)– Image height.
7
Metashape Python Reference, Release 2.1.1
• transparent (bool) – Setstransparentbackground.
• hide_items (bool) – Hides all items.
Returns
Capturedimage.
Return type
Metashape.Image
model_view_mode
Model viewmode.
Type
Metashape.Application.ModelView.ModelViewMode
point_cloud_view_mode
Pointcloud viewmode.
Type
Metashape.Application.ModelView.PointCloudViewMode
texture_view_mode
Texture viewmode.
Type
Metashape.Model.TextureType
tie_points_view_mode
Tiepoints viewmode.
Type
Metashape.Application.ModelView.TiePointsViewMode
tiled_model_view_mode
Tiled modelviewmode.
Type
view_mode
View mode.
Type
Metashape.DataSource
viewpoint
Viewpointinthe modelview.
Type
Metashape.Application.ModelView.TiledModelViewMode
Metashape.Viewpoint
class OrthoView
OrthoViewclassprovidesaccess totheortho view
captureView([width][, height][, transparent][, hide_items])
Captureimage from ortho view.
Parameters
• width (int)–Image width.
• height (int)– Image height.
• transparent (bool) – Setstransparentbackground.
• hide_items (bool) – Hides all items.
Returns
Capturedimage.
Return type
Metashape.Image
8 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
view_mode
View mode.
Type
Metashape.DataSource
class PhotosPane
PhotosPaneclassprovides accesstothephotos pane
resetFilter()
Reset photospanefilter.
setFilter(items)
Setphotospane filter.
Parameters
items (list[Metashape.Camera | Metashape.Marker]) – filter to apply.
class Settings
PySettings()
Application settings
language
User interfacelanguage.
Type
str
load()
Load settingsfrom disk.
log_enable
Enablewriting log to file.
Type
bool
log_path
Logfilepath.
Type
str
network_enable
Networkprocessing enabledflag.
Type
bool
network_host
Networkserver host name.
Type
str
network_path
Networkdata rootpath.
Type
str
network_port
Networkserver control port.
Type
int
9
Metashape Python Reference, Release 2.1.1
project_absolute_paths
Store absoluteimagepaths in project files.
Type
bool
project_compression
Project compression level.
Type
int
save()
Savesettingson disk.
setValue(key,value)
Setsettings value.
Parameters
• key (str)– Key.
• value (object)– Value.
value(key)
Return settingsvalue.
Parameters
key (str)–Key.
Returns
Settings value.
Return type
object
activated
Metashape activation status.
Type
bool
addMenuItem(label,func[,shortcut][, icon])
Createanewmenu entry.
Parameters
• label (str)– Menuitemlabel.
• func (function)–Functionto becalled.
• shortcut (str)– Keyboard shortcut.
• icon (str)– Icon.
addMenuSeparator(label)
Addmenuseparator.
Parameters
label (str)– Menulabel.
console_pane
Consolepane.
Type
Metashape.Application.ConsolePane
10 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
cpu_enable
UseCPUwhen GPUis active.
Type
bool
document
Main applicationdocumentobject.
Type
Metashape.Document
enumGPUDevices()
Enumerateinstalled GPU devices.
Returns
Alistofdevices.
Return type
list
getBool(label='')
Promptuserfor thebooleanvalue.
Parameters
label (str)– Optionaltext label for the dialog.
Returns
Boolean value selectedby the user.
Return type
bool
getCoordinateSystem([label][,value])
Prompt userforcoordinatesystem.
Parameters
• label (str)–Optional textlabel for the dialog.
• value (Metashape.CoordinateSystem) – Defaultvalue.
Returns
Selectedcoordinate system. If the dialog was cancelled, None isreturned.
Return type
Metashape.CoordinateSystem
getExistingDirectory([hint][,dir])
Promptuserfor theexistingfolder.
Parameters
• hint (str)–Optional textlabel for the dialog.
• dir (str)–Optional default folder.
Returns
Pathtothefolderselected. If theinput was cancelled,empty string isreturned.
Return type
str
11
Metashape Python Reference, Release 2.1.1
getFloat(label=''
,value=0)
Promptuserfor thefloatingpointvalue.
Parameters
• label (str)–Optional text labelfor thedialog.
• value (float)–Default value.
Returns
Floating point valueentered by the user.
Return type
float
getInt(label=''
, value=0)
Promptuserfor theintegervalue.
Parameters
• label (str)–Optional text labelfor thedialog.
• value (int)– Default value.
Returns
Integervalue enteredbythe user.
Return type
int
getOpenFileName([hint][,dir][,filter])
Promptuserfor theexistingfile.
Parameters
• hint (str)–Optional text labelfor thedialog.
• dir (str)–Optional default folder.
• filter (str) – Optional file filter, e.g. “Text file (.txt)” or “.txt”. Multiple filters are
separated with“;;”.
Returns
Path tothefileselected. If the input was cancelled,empty string is returned.
Return type
str
getOpenFileNames([hint][, dir][,filter])
Prompt userforone or more existing files.
Parameters
• hint (str)– Optionaltext label for the dialog.
• dir (str)– Optionaldefault folder.
• filter (str) – Optional file filter, e.g. “Text file (.txt)” or “.txt”. Multiple filters are
separated with“;;”.
Returns
Listoffile pathsselected bytheuser. Ifthe inputwas cancelled,empty listisreturned.
Return type
list
12 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
getSaveFileName([hint][,dir][,filter])
Prompt userforthe file. The filedoesnothave toexist.
Parameters
• hint (str)–Optional textlabel for the dialog.
• dir (str)– Optionaldefaultfolder.
• filter (str) – Optional file filter, e.g. “Text file (.txt)” or “.txt”. Multiple filters are
separated with“;;”.
Returns
Path tothefileselected. If the input was cancelled,empty string is returned.
Return type
str
getString(label=''
, value='')
Prompt userforthe stringvalue.
Parameters
• label (str)– Optional text label forthe dialog.
• value (str)– Default value.
Returns
Stringenteredby theuser.
Return type
str
gpu_mask
GPU devicebit mask: 1- usedevice,0 -do notuse(i.e. value5 enables device number0and2).
Type
int
messageBox(message)
Displaymessagebox totheuser.
Parameters
message (str)– Text message to be displayed.
model_view
Model view.
Type
Metashape.Application.ModelView
ortho_view
Ortho view.
Type
Metashape.Application.OrthoView
photos_pane
Photos pane.
Type
Metashape.Application.PhotosPane
13
Metashape Python Reference, Release 2.1.1
quit()
Exitapplication.
releaseFreeMemory()
Call malloc_trim onLinux(doesnothingonother OS).
removeMenuItem(label)
will be removed.
Remove menu entry with given label (if exists). If there are multiple entries with given label - all of them
Parameters
label (str)–Menuitem label.
settings
Applicationsettings.
Type
Metashape.Application.Settings
title
Application name.
Type
str
update()
Update userinterfaceduringlongoperations.
version
Metashape version.
Type
str
class Metashape.AttachedGeometry
Attachedgeometrydata.
GeometryCollection(geometries)
Createa GeometryCollection geometry.
Parameters
geometries (list[Metashape.AttachedGeometry]) – Child geometries.
Returns
AGeometryCollectiongeometry.
Return type
Metashape.AttachedGeometry
LineString(coordinates)
Create aLineStringgeometry.
Parameters
coordinates (list[int]) – List of vertex coordinates.
Returns
ALineStringgeometry.
Return type
Metashape.AttachedGeometry
14 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
MultiLineString(geometries)
Createa MultiLineStringgeometry.
Parameters
geometries (list[Metashape.AttachedGeometry]) – Child linestrings.
Returns
Apointgeometry.
Return type
Metashape.AttachedGeometry
MultiPoint(geometries)
Create a MultiPoint geometry.
Parameters
geometries (list[Metashape.AttachedGeometry]) – Child points.
Returns
Apointgeometry.
Return type
Metashape.AttachedGeometry
MultiPolygon(geometries)
Create aMultiPolygongeometry.
Parameters
geometries (list[Metashape.AttachedGeometry]) – Childpolygons.
Returns
Apointgeometry.
Return type
Metashape.AttachedGeometry
Point(key)
Createa Point geometry.
Parameters
key (int)– Point marker key.
Returns
Apointgeometry.
Return type
Metashape.AttachedGeometry
Polygon(exterior_ring[,interior_rings])
Createa Polygon geometry.
Parameters
• exterior_ring (list[int]) – Point coordinates.
• interior_rings (list[int]) – Point coordinates.
Returns
APolygon geometry.
Return type
Metashape.AttachedGeometry
15
Metashape Python Reference, Release 2.1.1
coordinates
List of vertexkeys.
Type
list[int]
geometries
Listofchildgeometries.
Type
list[Metashape.AttachedGeometry]
type
Geometry type.
Type
Metashape.Geometry.Type
class Metashape.BBox
Axis alignedboundingbox
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.BBox
max
Maximumboundingbox extent.
Type
Metashape.Vector
min
Minimumbounding boxextent.
Type
Metashape.Vector
size
Boundingbox dimension.
Type
int
class Metashape.BlendingMode
Blendingmodein[AverageBlending, MosaicBlending, MinBlending,MaxBlending,DisabledBlending]
class Metashape.Calibration
Calibration object contains camera calibration information including image size, focal length, principal point
coordinatesand distortion coefficients.
b1
Affinity.
Type
float
16 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
b2
Non-orthogonality.
Type
float
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.Calibration
covariance_matrix
Covariancematrix.
Type
Metashape.Matrix
covariance_params
Covariancematrix parameters.
Type
list[str]
cx
PrincipalpointXcoordinate.
Type
float
cy
PrincipalpointYcoordinate.
Type
float
error(point,proj)
Returnprojection error.
Parameters
• point (Metashape.Vector) – Coordinatesof the point to be projected.
• proj (Metashape.Vector) – Pixel coordinates of the point.
Returns
2Dprojectionerror.
Return type
Metashape.Vector
f
Focal length.
Type
float
17
Metashape Python Reference, Release 2.1.1
height
k1
k2
k3
k4
Image height.
Type
int
Radial distortioncoefficientK1.
Type
float
Radial distortioncoefficientK2.
Type
float
Radial distortioncoefficientK3.
Type
float
Radial distortioncoefficientK4.
Type
float
load(path, format=CalibrationFormatXML)
Loadscalibration from file.
Parameters
• path (str)– path to calibration file
• format (Metashape.CalibrationFormat) – Calibrationformat.
p1
DecenteringdistortioncoefficientP1.
Type
float
p2
DecenteringdistortioncoefficiantP2.
Type
float
p3
DecenteringdistortioncoefficientP3.
Type
float
p4
DecenteringdistortioncoefficiantP4.
Type
float
18 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
project(point)
Return projected pixel coordinates ofthepoint.
Parameters
point (Metashape.Vector) – Coordinatesof the point to be projected.
Returns
2Dprojectedpointcoordinates.
Return type
Metashape.Vector
rpc
RPCmodel.
Type
Metashape.RPCModel
save(path, format=CalibrationFormatXML[,label][,pixel_size][,focal_length], cx= 0,cy= 0)
Saves calibrationto file.
Parameters
• path (str)– path to calibration file
• format (Metashape.CalibrationFormat) – Calibrationformat.
• label (str)– Calibrationlabelusedin Australis, CalibCam andCalCamformats.
• pixel_size (Metashape.Vector) – Pixel size in mm used to convert normalized cali-
bration coefficients toAustralis and CalibCam coefficients.
• focal_length (float) – Focal length (Grid calibrationformatonly).
• cx (float)– X principal point coordinate(Grid calibration formatonly).
• cy (float)– Y principal point coordinate(Grid calibration formatonly).
type
Cameramodel.
Type
Metashape.Sensor.Type
unproject(point)
Return direction corresponding to the imagepoint.
Parameters
point (Metashape.Vector) – Pixel coordinates of the point.
Returns
3Dvectorin thecamera coordinate system.
Return type
Metashape.Vector
width
Imagewidth.
Type
int
19
Metashape Python Reference, Release 2.1.1
class Metashape.CalibrationFormat
Calibration format in [CalibrationFormatXML, CalibrationFormatAustralis, CalibrationFormatAustralisV7,
CalibrationFormatPhotoModeler, CalibrationFormatCalibCam, CalibrationFormatCalCam, CalibrationFormat-
Inpho, CalibrationFormatUSGS, CalibrationFormatPix4D, CalibrationFormatOpenCV, CalibrationFormatPho-
tomod,CalibrationFormatGrid,CalibrationFormatSTMap]
class Metashape.Camera
Camerainstance
>>> import Metashape
>>> chunk = Metashape.app.document.addChunk()
>>> chunk.addPhotos(["IMG_0001.jpg"
,
>>> camera = chunk.cameras[0]
>>> camera.photo.meta["Exif/FocalLength"]
'18'
"IMG_0002.jpg"])
The followingexample describes howto createmultispectalcamera layout:
>>> import Metashape
>>> doc = Metashape.app.document
>>> chunk = doc.chunk
>>> rgb = ["RGB_0001.JPG"
,
"RGB_0002.JPG"
"RGB_0003.JPG"]
>>> nir = ["NIR_0001.JPG"
,
"NIR_0002.JPG"
,
,
"NIR_0003.JPG"]
>>> images = [rgb[0], nir[0], rgb[1], nir[1], rgb[2], nir[2]]
>>> groups = [2, 2, 2]
>>> chunk.addPhotos(filenames=images, filegroups=groups, layout=Metashape.
˓ →MultiplaneLayout)
class Reference
Camerareference data.
accuracy
Cameralocationaccuracy.
Type
Metashape.Vector
enabled
Locationenabledflag.
Type
bool
location
Cameracoordinates.
Type
Metashape.Vector
location_accuracy
Cameralocationaccuracy.
Type
Metashape.Vector
location_enabled
Locationenabledflag.
Type
bool
20 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
rotation
Camerarotationangles.
Type
Metashape.Vector
rotation_accuracy
Camerarotationaccuracy.
Type
Metashape.Vector
rotation_enabled
Rotation enabled flag.
Type
bool
class Type
Cameratypein[Regular,Keyframe]
calibration
Adjustedcamera calibrationincludingphoto-invariantparameters.
Type
Metashape.Calibration
center
Camerastationcoordinates for thephotoin the chunk coordinatesystem.
Type
Metashape.Vector
chunk
Chunk the camera belongsto.
Type
Metashape.Chunk
component
Cameracomponent.
Type
Metashape.Component
enabled
Enables/disables thephoto.
Type
bool
error(point, proj)
Returns projection error.
Parameters
• point (Metashape.Vector) – Coordinatesof the point to be projected.
• proj (Metashape.Vector) – Pixel coordinates of the point.
Returns
2Dprojection error.
21
Metashape Python Reference, Release 2.1.1
Return type
Metashape.Vector
frames
Cameraframes.
Type
list[Metashape.Camera]
group
Cameragroup.
Type
Metashape.CameraGroup
image()
Returnsimage data.
Returns
Imagedata.
Return type
Metashape.Image
key
Cameraidentifier.
Type
int
label
Cameralabel.
Type
str
layer_index
Cameralayerindex.
Type
int
location_covariance
Cameralocationcovariance.
Type
Metashape.Matrix
mask
master
Cameramask.
Type
Metashape.Mask
Master camera.
Type
Metashape.Camera
22 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
meta
Camera metadata.
Type
Metashape.MetaData
open(path[, layer])
Loads specified imagefile.
Parameters
• path (str)–Path tothe image file tobeloaded.
• layer (int)– Optional layerindexin case ofmultipage files.
orientation
Imageorientation (1 -normal,6 - 90degree,3- 180 degree,8- 270degree).
Type
int
photo
Cameraphoto.
Type
Metashape.Photo
planes
Cameraplanes.
Type
list[Metashape.Camera]
project(point)
Returns coordinatesofthe pointprojectionon the photo.
Parameters
point (Metashape.Vector) – Coordinatesof the point to be projected.
Returns
2Dpoint coordinates.
Return type
Metashape.Vector
reference
Camerareference data.
Type
Metashape.Camera.Reference
rotation_covariance
Camerarotationcovariance.
Type
Metashape.Matrix
selected
Selects/deselectsthe photo.
Type
bool
23
Metashape Python Reference, Release 2.1.1
sensor
Camera sensor.
Type
Metashape.Sensor
shutter
Camerashutter.
Type
Metashape.Shutter
thumbnail
Camerathumbnail.
Type
Metashape.Thumbnail
transform
4x4matrixdescribing photo locationinthe chunkcoordinate system.
Type
Metashape.Matrix
type
Cameratype.
Type
Metashape.Camera.Type
unproject(point)
Returns coordinates of the point whichwillhave specifiedprojected coordinates.
Parameters
point (Metashape.Vector) – Projection coordinates.
Returns
3Dpoint coordinates.
Return type
Metashape.Vector
vignetting
Vignettingforeach band.
Type
list[Metashape.Vignetting]
class Metashape.CameraGroup
CameraGroup objects define groups of multiple cameras. The grouping is established by assignment of a Cam-
eraGroup instanceto theCamera.groupattribute ofparticipating cameras.
The type attribute of CameraGroup instances defines the effect of such grouping on processing results and can
be settoFolder(no effect)orStation(coincidentprojectioncenters).
class Type
Cameragrouptypein [Folder, Station]
key
Cameragroupidentifier.
24 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
int
label
Cameragrouplabel.
Type
str
selected
Currentselectionstate.
Type
bool
type
Cameragrouptype.
Type
Metashape.CameraGroup.Type
class Metashape.CameraTrack
Cameratrack.
chunk
Chunk the cameratrackbelongsto.
Type
Metashape.Chunk
duration
Animationduration.
Type
float
field_of_view
Verticalfieldof viewindegrees.
Type
float
interpolate(time)
Get animationcamera transformmatrix.
Parameters
time (float)– Animationtime point.
Returns
Interpolated cameratransformation matrixin chunkcoordinate system.
Return type
Metashape.Matrix
keyframes
Cameratrackkeyframes.
Type
list[Metashape.Camera]
25
Metashape Python Reference, Release 2.1.1
label
Animation label.
Type
str
load(path[, projection])
Loadcameratrack from file.
Parameters
• path (str)–Path tocameratrack file
• projection (Metashape.CoordinateSystem) – Camera track coordinate system.
loop
Loop track.
Type
bool
meta
Cameratrackmeta data.
Type
Metashape.MetaData
save(path[,file_format][,drone_name][,payload_name][,payload_position][, max_waypoints][,
projection])
Save camera tracktofile.
Parameters
• path (str)– Pathto camera track file
• file_format (str) – File format. “deduce”: - Deduce from extension, “path”: Path,
“earth”: Google Earth KML, “pilot”: DJI Pilot KML, “wpml”: DJI WPML KMZ, “trin-
ity”: AsctecTrinity CSV, “autopilot”: AsctecAutopilotCSV,“litchi”: Litchi CSV
• drone_name (str)–Dronemodel. “M300RTK”: -DJIMatrice300RTK,“M30”: -DJI
Matrice30,“M30T”: -DJIMatrice30T,“M3E”: -DJIMavic3E,“M3T”: -DJIMavic3T
• payload_name (str)–Payloadmodel. “P124mm”: -DJIZenmuseP1(24mmlens),“P1
35mm”: - DJI Zenmuse P1 (35 mm lens), “P1 50mm”: - DJI Zenmuse P1 (50 mm lens),
“H20”: - DJI Zenmuse H20, “H20T”: - DJI Zenmuse H20T, “H20N”: - DJI Zenmuse
H20N,“L1”: -DJIZenmuseL1,“M30”: -DJIM30,“M30T”: -DJIM30T,“M3E”: -DJI
Mavic3E Camera, “M3T”: - DJI Mavic 3TCamera
• payload_position (str)–Payloadposition. ForM300RTKdrone: “Frontleft”,“Front
right”,“Top”. Forother drones: “Main gimbal”
• max_waypoints (int) – Max waypointsper flight
• projection (Metashape.CoordinateSystem) – Camera trackcoordinatesystem.
smooth
Smooth path.
Type
bool
26 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
class Metashape.CamerasFormat
Camera orientation format in [CamerasFormatXML, CamerasFormatCHAN, CamerasFormatBoujou, Cam-
erasFormatBundler, CamerasFormatOPK, CamerasFormatPATB, CamerasFormatBINGO, CamerasForma-
tORIMA, CamerasFormatAeroSys, CamerasFormatInpho, CamerasFormatSummit, CamerasFormatBlocksEx-
change, CamerasFormatRZML, CamerasFormatVisionMap, CamerasFormatABC, CamerasFormatFBX, Cam-
erasFormatNVM,CamerasFormatMA]
class Metashape.Chunk
A Chunkobject:
• providesaccessto allchunkcomponents (sensors, cameras, cameragroups,markers,scalebars)
• contains data inherent toindividual frames (tiepoints, model, etc)
• implementsprocessingmethods (matchPhotos,alignCameras,buildPointCloud,buildModel,etc)
• providesaccessto other chunk attributes(transformation matrix, coordinatesystem,meta-data, etc..)
New components can be created using corresponding addXXX methods (addSensor, addCamera, addCamera-
Group, addMarker, addScalebar, addFrame). Removal of components is supported by a single remove method,
which can accept listsofvariouscomponent types.
In case of multi-frame chunks the Chunk object contains an additional reference to the particular chunk frame,
initializedtothecurrentframebydefault. Variousmethodsthatworkonaperframebasis(matchPhotos,build-
Model,etc)areappliedtothisparticularframe. AframesattributecanbeusedtoobtainalistofChunk objects
that reference allavailableframes.
The followingexampleperforms image matching and alignment for the active chunk:
>>> import Metashape
>>> chunk = Metashape.app.document.chunk
>>> for frame in chunk.frames:
... frame.matchPhotos(downscale=1)
>>> chunk.alignCameras()
addCamera([sensor])
Addnewcamera tothechunk.
Parameters
Returns
Createdcamera.
Return type
Metashape.Camera
addCameraGroup()
Addnewcamera group to thechunk.
Returns
Createdcameragroup.
Return type
Metashape.CameraGroup
addCameraTrack()
Addnewcamera tracktothe chunk.
Returns
Createdcameratrack.
sensor (Metashape.Sensor) – Sensor tobeassigned to this camera.
27
Metashape Python Reference, Release 2.1.1
Return type
Metashape.CameraTrack
addDepthMaps()
Add newdepth mapsset to thechunk.
Returns
Createddepthmaps set.
Return type
Metashape.DepthMaps
addElevation()
Add newelevation model tothechunk.
Returns
Createdelevation model.
Return type
Metashape.Elevation
addFrame()
Addnewframeto the chunk.
Returns
Createdframe.
Return type
Metashape.Chunk
addFrames([chunk][,frames],copy_depth_maps=True,copy_point_cloud=True,copy_model=True,
copy_tiled_model=True,copy_elevation=True,copy_orthomosaic=True[, progress])
Add framesfrom specifiedchunk.
Parameters
• chunk (int)– Chunkto copy frames from.
• frames (list[int])– List of framekeysto copy.
• copy_depth_maps (bool) – Copy depth maps.
• copy_point_cloud (bool) – Copy point cloud.
• copy_model (bool)–Copy model.
• copy_tiled_model (bool) – Copy tiledmodel.
• copy_elevation (bool) – Copy DEM.
• copy_orthomosaic (bool) – Copy orthomosaic.
• progress (Callable[[float], None]) – Progress callback.
addMarker([point],visibility=False)
Addnew marker tothe chunk.
Parameters
• point (Metashape.Vector) – Point toinitialize markerprojections.
• visibility (bool)– Enablesvisibility checkduringprojection assignment.
Returns
Createdmarker.
28 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Return type
Metashape.Marker
addMarkerGroup()
Add newmarkergrouptothe chunk.
Returns
Createdmarker group.
Return type
Metashape.MarkerGroup
addModel()
Addnewmodel tothechunk.
Returns
Createdmodel.
Return type
Metashape.Model
addOrthomosaic()
Add neworthomosaic tothe chunk.
Returns
Createdorthomosaic.
Return type
Metashape.Orthomosaic
addPhotos([filenames][, filegroups],layout=UndefinedLayout[, group],strip_extensions=True,
load_reference=True,load_xmp_calibration=True,load_xmp_orientation=True,
load_xmp_accuracy=False,load_xmp_antenna=True, load_rpc_txt=False[,progress])
Add alist of photosto the chunk.
Parameters
• filenames (list[str]) – List of filestoadd.
• filegroups (list[int]) – List of file groups.
• layout (Metashape.ImageLayout) – Image layout.
• group (int)– Camera groupkey.
• strip_extensions (bool) – Strip file extensionsfrom cameralabels.
• load_reference (bool) – Load referencecoordinates.
• load_xmp_calibration (bool) – Load calibration fromXMP metadata.
• load_xmp_orientation (bool) – Load orientationfrom XMPmeta data.
• load_xmp_accuracy (bool) – Load accuracy fromXMP metadata.
• load_xmp_antenna (bool) – Load GPS/INSoffset from XMP metadata.
• load_rpc_txt (bool) – Load satellite RPCdatafrom auxiliary TXT files.
• progress (Callable[[float], None]) – Progress callback.
addPointCloud()
Addnewpointcloudto the chunk.
29
Metashape Python Reference, Release 2.1.1
Returns
Createdpointcloud.
Return type
Metashape.PointCloud
addPointCloudGroup()
Addnewpointcloudgroup tothe chunk.
Returns
Createdpointcloud group.
Return type
Metashape.PointCloudGroup
addScalebar(point1,point2)
Add newscale bar tothechunk.
Parameters
• point1 (Metashape.Marker | Metashape.Camera) – First endpoint.
• point2 (Metashape.Marker | Metashape.Camera) – Second endpoint.
Returns
Createdscalebar.
Return type
Metashape.Scalebar
addScalebarGroup()
Add newscale bar group to thechunk.
Returns
Createdscalebargroup.
Return type
Metashape.ScalebarGroup
addSensor([source])
Addnewsensortothe chunk.
Parameters
source (Metashape.Sensor) – Sensor to copy parameters from.
Returns
Createdsensor.
Return type
Metashape.Sensor
addTiledModel()
Add newtiled model to thechunk.
Returns
Createdtiledmodel.
Return type
Metashape.TiledModel
alignCameras([cameras][,point_clouds], min_image=2,adaptive_fitting=False,reset_alignment=False,
subdivide_task=True[,progress])
Performphotoalignmentfor thechunk.
30 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Parameters
• cameras (list[int]) – List of cameras to align.
• point_clouds (list[int]) – List of point cloudsto align.
• min_image (int)–Minimumnumber ofpointprojections.
• adaptive_fitting (bool) – Enable adaptivefitting ofdistortion coefficients.
• reset_alignment (bool) – Reset current alignment.
• subdivide_task (bool) – Enable fine-level tasksubdivision.
• progress (Callable[[float], None]) – Progress callback.
analyzeImages([cameras],filter_mask=False[,progress])
Estimate image quality. Estimated value is stored in camera metadata with Image/Quality key. Cameras
with qualitylessthan0.5 areconsidered blurred andwe recommend todisablethem.
Parameters
• cameras (list[int]) – List of cameras to be analyzed.
• filter_mask (bool)– Constrainanalyzedimageregionby mask.
• progress (Callable[[float], None]) – Progress callback.
buildContours(source_data=ElevationData,interval=1,min_value=-1e+10,max_value=1e+10,
prevent_intersections=True[,progress])
Build contoursforthe chunk.
Parameters
• source_data (Metashape.DataSource) – Source data for contourgeneration.
• interval (float)– Contour interval.
• min_value (float)–Minimumvalueof contourrange.
• max_value (float)–Maximum value of contour range.
• prevent_intersections (bool) – Preventcontour intersections.
• progress (Callable[[float], None]) – Progress callback.
buildDem(source_data=PointCloudData,interpolation=EnabledInterpolation[,projection][, region][,
classes],flip_x=False,flip_y=False,flip_z=False,resolution=0,subdivide_task=True,
workitem_size_tiles=10, max_workgroup_size=100, replace_asset=False[,frames][,progress])
Build elevationmodel for the chunk.
Parameters
• source_data (Metashape.DataSource) – Selectsbetween point cloudand tie points.
• interpolation (Metashape.Interpolation) – Interpolation mode.
• projection (Metashape.OrthoProjection) – Output projection.
• region (Metashape.BBox) – Region to be processed.
• classes (list[int]) –List ofpointclasses to be used for surface extraction.
• flip_x (bool)–FlipXaxis direction.
• flip_y (bool)–FlipYaxis direction.
• flip_z (bool)–FlipZaxisdirection.
31
Metashape Python Reference, Release 2.1.1
• resolution (float)–Output resolution in meters.
• subdivide_task (bool) – Enable fine-level task subdivision.
• workitem_size_tiles (int) – Number of tiles in a workitem.
• max_workgroup_size (int) – Maximumworkgroup size.
• replace_asset (bool) – Replacedefaultasset with generated DEM.
• frames (list[int])– List of frames toprocess.
• progress (Callable[[float], None]) – Progress callback.
buildDepthMaps(downscale=4,filter_mode=MildFiltering[, cameras], reuse_depth=False,
max_neighbors=16,subdivide_task=True,workitem_size_cameras=20,
max_workgroup_size=100[,progress])
Generate depthmaps for the chunk.
Parameters
• downscale (int) – Depth map quality (1 - Ultra high, 2 - High, 4 - Medium, 8 - Low, 16
-Lowest).
• filter_mode (Metashape.FilterMode) – Depth map filtering mode.
• cameras (list[int]) –List ofcameras toprocess.
• reuse_depth (bool)– Enable reusedepth maps option.
• max_neighbors (int)–Maximumnumberofneighborimagestousefordepthmapgen-
eration.
• subdivide_task (bool) – Enable fine-level task subdivision.
• workitem_size_cameras (int) – Number of cameras ina workitem.
• max_workgroup_size (int) – Maximumworkgroupsize.
• progress (Callable[[float], None]) – Progress callback.
buildModel(surface_type=Arbitrary,interpolation=EnabledInterpolation,face_count=HighFaceCount,
face_count_custom=200000,source_data=DepthMapsData[, classes],vertex_colors=True,
vertex_confidence=True,volumetric_masks=False, keep_depth=True, replace_asset=False,
split_in_blocks=False[,blocks_crs], blocks_size=250[,blocks_origin],
clip_to_boundary=False,export_blocks=False, build_texture=True,output_folder=''
,
trimming_radius=10[,cameras][,frames],subdivide_task=True,workitem_size_cameras=20,
max_workgroup_size=100[,progress])
Generate model for thechunkframe.
Parameters
• surface_type (Metashape.SurfaceType) – Type of objectto bereconstructed.
• interpolation (Metashape.Interpolation) – Interpolation mode.
• face_count (Metashape.FaceCount) – Target face count.
• face_count_custom (int) – Customfacecount.
• source_data (Metashape.DataSource)–Selectsbetweenpointcloud,tiepoints,depth
maps and laserscans.
• classes (list[int]) –List ofpointclasses to be used for surface extraction.
• vertex_colors (bool) – Enable vertexcolors calculation.
32 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
• vertex_confidence (bool) – Enable vertex confidencecalculation.
• volumetric_masks (bool) – Enable strict volumetric masking.
• keep_depth (bool)–Enable store depthmaps option.
• replace_asset (bool) – Replacedefault assetwith generated model.
• split_in_blocks (bool) – Splitmodelin blocks.
• blocks_crs (Metashape.CoordinateSystem) – Blocks grid coordinatesystem.
• blocks_size (float) – Blocks size in coordinate system units.
• blocks_origin (Metashape.Vector) – Blocks grid origin.
• clip_to_boundary (bool) – Clip toboundaryshapes.
• export_blocks (bool) – Export completedblocks.
• build_texture (bool) – Generate preview textures.
• output_folder (str) –Path tooutput folder.
• trimming_radius (int) – Trimmingradius (no trimming ifzero).
• cameras (list[int]) – List of camerasto process.
• frames (list[int])– List of frames toprocess.
• subdivide_task (bool) – Enable fine-level tasksubdivision.
• workitem_size_cameras (int) – Number of cameras in a workitem.
• max_workgroup_size (int) – Maximumworkgroupsize.
• progress (Callable[[float], None]) – Progress callback.
buildOrthomosaic(surface_data=ModelData,blending_mode=MosaicBlending,fill_holes=True,
ghosting_filter=False,cull_faces=False,refine_seamlines=False[, projection][,region
],resolution=0,resolution_x=0, resolution_y=0,flip_x=False,flip_y=False,
flip_z=False,subdivide_task=True,workitem_size_cameras=20,
workitem_size_tiles=10, max_workgroup_size=100,replace_asset=False[, frames][,
progress])
Build orthomosaic for thechunk.
Parameters
• surface_data (Metashape.DataSource) – Orthorectification surface.
• blending_mode (Metashape.BlendingMode) – Orthophoto blendingmode.
• fill_holes (bool)–Enable holefilling.
• ghosting_filter (bool) – Enable ghosting filter.
• cull_faces (bool)– Enable back-face culling.
• refine_seamlines (bool) – Refine seamlines based onimage content.
• projection (Metashape.OrthoProjection) – Output projection.
• region (Metashape.BBox) – Region to be processed.
• resolution (float)–Pixel size inmeters.
• resolution_x (float) – Pixel size in theXdimension in projected units.
• resolution_y (float) – Pixel size in theYdimension in projected units.
33
Metashape Python Reference, Release 2.1.1
• flip_x (bool)– Flip X axis direction.
• flip_y (bool)– Flip Y axis direction.
• flip_z (bool)– Flip Z axis direction.
• subdivide_task (bool) – Enable fine-level task subdivision.
• workitem_size_cameras (int) – Number of cameras in a workitem.
• workitem_size_tiles (int) – Number of tiles in a workitem.
• max_workgroup_size (int) – Maximumworkgroup size.
• replace_asset (bool) – Replacedefaultasset with generated orthomosaic.
• frames (list[int])– List of frames toprocess.
• progress (Callable[[float], None]) – Progress callback.
buildPanorama(blending_mode=MosaicBlending, ghosting_filter=False[,rotation][,region], width=0,
height=0[,camera_groups][,frames][, progress])
Generatesphericalpanoramasfromcamerastations.
Parameters
• blending_mode (Metashape.BlendingMode) – Panorama blendingmode.
• ghosting_filter (bool) – Enable ghosting filter.
• rotation (Metashape.Matrix) – Panorama 3x3 orientationmatrix.
• region (Metashape.BBox) – Region to be generated.
• width (int)– Widthof output panorama.
• height (int)–Height of outputpanorama.
• camera_groups (list[int]) – List of camera groups to process.
• frames (list[int])– List of frames toprocess.
• progress (Callable[[float], None]) – Progress callback.
buildPointCloud(source_data=DepthMapsData,point_colors=True,point_confidence=False,
keep_depth=True,max_neighbors=100,uniform_sampling=True,points_spacing=0.1[,
asset],subdivide_task=True,workitem_size_cameras=20,max_workgroup_size=100,
replace_asset=False[,frames][, progress])
Generate pointcloudforthechunk.
Parameters
• source_data (Metashape.DataSource) – Source datato extract points from.
• point_colors (bool) – Enable point colors calculation.
• point_confidence (bool) – Enable point confidence calculation.
• keep_depth (bool)– Enable store depth mapsoption.
• max_neighbors (int) – Maximum number of neighbor images to use for depth map fil-
tering.
• uniform_sampling (bool) – Enable uniform point sampling.
• points_spacing (float) – Desired point spacing (m).
• asset (int)–Assettoprocess.
34 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
• subdivide_task (bool) – Enable fine-level task subdivision.
• workitem_size_cameras (int) – Number of cameras in a workitem.
• max_workgroup_size (int) – Maximumworkgroup size.
• replace_asset (bool) – Replacedefaultasset with generated pointcloud.
• frames (list[int])– List of frames toprocess.
• progress (Callable[[float], None]) – Progress callback.
buildSeamlines(epsilon=1.5[,progress])
Generateshapes for orthomosaicseamlines.
Parameters
• epsilon (float)– Contour simplificaion threshold.
• progress (Callable[[float], None]) – Progress callback.
buildTexture(blending_mode=MosaicBlending,texture_size=8192,fill_holes=True,ghosting_filter=True[,
cameras], texture_type=DiffuseMap[,source_model], transfer_texture=True,
workitem_size_cameras=20,max_workgroup_size=100,anti_aliasing=1[, progress])
Generatetextureforthe chunk.
Parameters
• blending_mode (Metashape.BlendingMode) – Texture blending mode.
• texture_size (int)– Texture page size.
• fill_holes (bool)–Enable holefilling.
• ghosting_filter (bool) – Enable ghosting filter.
• cameras (list[int]) –Alistofcameras to be used for texturing.
• texture_type (Metashape.Model.TextureType) – Texture type.
• source_model (int)– Source model.
• transfer_texture (bool) – Transfer texture.
• workitem_size_cameras (int)–Numberofcamerasinaworkitem(blockmodelonly).
• max_workgroup_size (int) – Maximumworkgroup size (block model only).
• anti_aliasing (int) –Anti-aliasing coefficient for baking
• progress (Callable[[float], None]) – Progress callback.
buildTiledModel(pixel_size=0,tile_size=256, source_data=DepthMapsData,face_count=20000,
ghosting_filter=False,transfer_texture=False, keep_depth=True,merge=False[,
operand_chunk][,operand_frame][,operand_asset][,classes],subdivide_task=True,
workitem_size_cameras=20,max_workgroup_size=100, replace_asset=False[,frames
][,progress])
Buildtiledmodel forthe chunk.
Parameters
• pixel_size (float)–Target model resolution in meters.
• tile_size (int)– Size of tilesinpixels.
• source_data (Metashape.DataSource) – Selects betweenpoint cloud and mesh.
• face_count (int)–Numberof facesper megapixelof textureresolution.
35
Metashape Python Reference, Release 2.1.1
• ghosting_filter (bool) – Enable ghosting filter.
• transfer_texture (bool) – Transfer sourcemodeltexturetotiled model.
• keep_depth (bool)–Enable store depthmaps option.
• merge (bool)–Merge tiled model flag.
• operand_chunk (int) – Operand chunk key.
• operand_frame (int) – Operand frame key.
• operand_asset (int) – Operand asset key.
• classes (list[int]) –List ofpointclasses to be used for surface extraction.
• subdivide_task (bool) – Enable fine-level task subdivision.
• workitem_size_cameras (int) – Number of cameras ina workitem.
• max_workgroup_size (int) – Maximumworkgroup size.
• replace_asset (bool) – Replacedefaultasset with generated tiledmodel.
• frames (list[int])– List of frames toprocess.
• progress (Callable[[float], None]) – Progress callback.
buildUV(mapping_mode=GenericMapping,page_count=1,texture_size=8192, pixel_size=0[,camera][,
progress])
Generateuv mapping for themodel.
Parameters
• mapping_mode (Metashape.MappingMode) – Texture mapping mode.
• page_count (int)–Numberof texture pages togenerate.
• texture_size (int)– Expectedsize of texture page at texture generation step.
• pixel_size (float)–Texture resolution in meters.
• camera (int)– Camera tobeusedfor texturing in CameraMapping mode.
• progress (Callable[[float], None]) – Progress callback.
calculatePointNormals(point_neighbors=28[,point_cloud][, progress])
Calculatepoint cloudnormals.
Parameters
• point_neighbors (int) – Number of point neighborstouse fornormalestimation.
• point_cloud (int)–Pointcloudkey to process.
• progress (Callable[[float], None]) – Progress callback.
calibrateColors(source_data=ModelData,white_balance=False[,cameras][,progress])
Performradiometric calibration.
Parameters
• source_data (Metashape.DataSource) – Source dataforcalibration.
• white_balance (bool) – Calibrate whitebalance.
• cameras (list[int]) – List of camerasto process.
• progress (Callable[[float], None]) – Progress callback.
36 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
calibrateReflectance(use_reflectance_panels=True,use_sun_sensor=False[, progress])
Calibratereflectance factorsbasedon calibrationpanels and/or sunsensor.
Parameters
• use_reflectance_panels (bool) – Use calibrated reflectance panels.
• use_sun_sensor (bool) – Apply irradiance sensor measurements.
• progress (Callable[[float], None]) – Progress callback.
camera_crs
Coordinatesystem used for camera reference data.
Type
Metashape.CoordinateSystem
camera_groups
Listofcamera groupsinthe chunk.
Type
list[Metashape.CameraGroup]
camera_location_accuracy
Expectedaccuracyof cameracoordinates inmeters.
Type
Metashape.Vector
camera_rotation_accuracy
Expectedaccuracyof cameraorientationanglesin degrees.
Type
Metashape.Vector
camera_track
Cameratrack.
Type
Metashape.CameraTrack
camera_tracks
Listofcamera tracks inthe chunk.
Type
list[Metashape.CameraTrack]
cameras
ListofRegularand Keyframecamerasinthe chunk.
Type
list[Metashape.Camera]
cir_transform
CIR calibrationmatrix.
Type
Metashape.CirTransform
colorizeModel(source_data=ImagesData[, model][,progress])
Calculatevertexcolors for the model.
Parameters
37
Metashape Python Reference, Release 2.1.1
• source_data (Metashape.DataSource) – Source datato extract colors from.
• model (int)– Keyofmodel to colorize.
• progress (Callable[[float], None]) – Progress callback.
colorizePointCloud(source_data=ImagesData,workitem_size_cameras=20,max_workgroup_size=100,
subdivide_task=True[,point_cloud][,progress])
Calculatepoint colorsforthe point cloud.
Parameters
• source_data (Metashape.DataSource) – Source datato extract colors from.
• workitem_size_cameras (int) – Number of cameras in a workitem.
• max_workgroup_size (int) – Maximumworkgroupsize.
• subdivide_task (bool) – Enable fine-level tasksubdivision.
• point_cloud (int)–Pointcloudkey to colorize.
• progress (Callable[[float], None]) – Progress callback.
component
Component.
Type
Metashape.Component
components
Listofcomponentsin the chunk.
Type
list[Metashape.Component]
copy([frames][,items], keypoints=True[,progress])
Make a copyofthe chunk.
Parameters
• frames (list[Metashape.Chunk]) – Optional list of frames to be copied.
• items (list[Metashape.DataSource]) – A list of items tocopy.
• keypoints (bool)– copy key points data.
• progress (Callable[[float], None]) – Progress callback.
Returns
Copyofthe chunk.
Return type
Metashape.Chunk
crs
Coordinate systemusedforreferencedata.
Type
Metashape.CoordinateSystem
decimateModel(face_count=200000[, model],apply_to_selection=False,replace_asset=False[,frames][,
progress])
Decimatethe modeltothe specifiedface count.
38 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Parameters
• face_count (int)– Target face count.
• model (int)– Modelto process.
• apply_to_selection (bool) – Apply to selection.
• replace_asset (bool) – Replacesourcemodel withdecimatedmodel.
• frames (list[int])– List of frames toprocess.
• progress (Callable[[float], None]) – Progress callback.
depth_maps
Default depth mapssetforthe current frame.
Type
Metashape.DepthMaps
depth_maps_sets
Listofdepthmaps sets forthe current frame.
Type
list[Metashape.DepthMaps]
detectFiducials(generate_masks=False,mask_dark_pixels=True,generic_detector=True,
right_angle_detector=False,v_shape_detector=False,frame_detector=False,
fiducials_position_corners=True, fiducials_position_sides=True[,cameras][,frames][,
progress])
Detect fiducialmarkson filmcameras.
Parameters
• generate_masks (bool) – Generate background masks.
• mask_dark_pixels (bool) – Mask outdarkpixelsnear frame edge.
• generic_detector (bool) – Use genericdetector.
• right_angle_detector (bool) – Use right angledetector.
• v_shape_detector (bool) – DetectV-shapefiducials.
• frame_detector (bool) – Detectframe.
• fiducials_position_corners (bool) – Search cornersforfiducials.
• fiducials_position_sides (bool) – Search sidesforfiducials.
• cameras (list[int]) – List of cameras to process.
• frames (list[int])– List of frames toprocess.
• progress (Callable[[float], None]) – Progress callback.
detectMarkers(target_type=CircularTarget12bit,tolerance=50, filter_mask=False,inverted=False,
noparity=False,maximum_residual=5, minimum_size=0,minimum_dist=5[,cameras][,
frames][,progress])
Createmarkers from coded targets.
Parameters
• target_type (Metashape.TargetType) – Type of targets.
• tolerance (int)– Detector tolerance(0 - 100).
39
Metashape Python Reference, Release 2.1.1
• filter_mask (bool)–Ignore masked image regions.
• inverted (bool)–Detect markers on blackbackground.
• noparity (bool)–Disable parity checking.
• maximum_residual (float) – Maximumresidualfornon-coded targetsinpixels.
• minimum_size (int) – Minimum target radius in pixels to be detected (CrossTarget type
only).
• minimum_dist (int) – Minimum distance between targets in pixels (CrossTarget type
only).
• cameras (list[int]) –Listofcameras to process.
• frames (list[int])–Listofframes to process.
• progress (Callable[[float], None]) – Progress callback.
detectPowerlines(min_altitude=1, n_points_per_line=100, max_quantization_error=0.01,
use_model=True[,progress])
Detectpowerlinesforthe chunk.
Parameters
• min_altitude (float) – Minimum altitudefor reconstructed powerlines.
• n_points_per_line (int) – Maximumnumberofvertices perdetected line.
• max_quantization_error (float)–Maximumalloweddistancebetweenpolylineand
smoothcontinuous curve.
• use_model (bool)–Use modelforvisibility checks.
• progress (Callable[[float], None]) – Progress callback.
elevation
Default elevation model forthe current frame.
Type
Metashape.Elevation
elevations
Listofelevationmodels for the current frame.
Type
list[Metashape.Elevation]
enabled
Enables/disablesthe chunk.
Type
bool
euler_angles
Euler anglestripletusedfor rotation reference.
Type
Metashape.EulerAngles
40 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
exportCameras(path=''
,format=CamerasFormatXML[, crs],save_points=True,save_markers=False,
save_invalid_matches=False,use_labels=False,use_initial_calibration=False,
image_orientation=0,chan_rotation_order=RotationOrderXYZ,binary=False,
bundler_save_list=True,bundler_path_list='list.txt'
,bingo_save_image=True,
bingo_save_itera=True,bingo_save_geoin=True, bingo_save_gps=False,
bingo_path_itera='itera.dat'
,bingo_path_image='image.dat'
,bingo_path_geoin='geoin.dat'
,
bingo_path_gps='gps-imu.dat'[,progress])
Exportpoint cloudand/orcamera positions.
Parameters
• path (str)–Path tooutput file.
• format (Metashape.CamerasFormat) – Export format.
• crs (Metashape.CoordinateSystem) – Output coordinatesystem.
• save_points (bool)– Enables/disables exportof automatictie points.
• save_markers (bool) – Enables/disables exportof manual matching points.
• save_invalid_matches (bool) – Enables/disables exportof invalid image matches.
• use_labels (bool)– Enables/disables label based item identifiers.
• use_initial_calibration (bool)–Transformimagecoordinatestoinitialcalibration.
• image_orientation (int)–Imagecoordinatesystem(0-Xright,1-Xup,2-Xleft,3
-Xdown).
• chan_rotation_order (Metashape.RotationOrder)–Rotationorder(CHANformat
only).
• binary (bool)– Enables/disables binary encodingfor selectedformat (if applicable).
• bundler_save_list (bool) – Enables/disables exportof Bundler imagelist file.
• bundler_path_list (str) – Pathto Bundler image list file.
• bingo_save_image (bool) – Enables/disables export of BINGO IMAGE COORDI-
NATE file.
• bingo_save_itera (bool) – Enables/disables exportof BINGO ITERA file.
• bingo_save_geoin (bool) – Enables/disables exportofBINGO GEOINPUTfile.
• bingo_save_gps (bool) – Enables/disables exportof BINGO GPS/IMUdata.
• bingo_path_itera (str) – Pathto BINGO ITERA file.
• bingo_path_image (str) – Pathto BINGOIMAGE COORDINATE file.
• bingo_path_geoin (str) – Pathto BINGOGEOINPUT file.
• bingo_path_gps (str) – Pathto BINGOGPS/IMUfile.
• progress (Callable[[float], None]) – Progress callback.
exportMarkers(path=''[,crs],binary=False[, progress])
Exportmarkers.
Parameters
• path (str)– Pathto outputfile.
• crs (Metashape.CoordinateSystem) – Output coordinate system.
41
Metashape Python Reference, Release 2.1.1
• binary (bool)– Enables/disables binaryencoding for selected format (ifapplicable).
• progress (Callable[[float], None]) – Progress callback.
exportModel(path=''
,binary=True, precision=6,texture_format=ImageFormatJPEG,save_texture=True,
save_uv=True,save_normals=True, save_colors=True,save_confidence=False,
save_cameras=True,save_markers=True,save_udim=False,save_alpha=False,
embed_texture=False,strip_extensions=False,raster_transform=RasterTransformNone,
colors_rgb_8bit=True,gltf_y_up=True,comment=''
,save_comment=True,
format=ModelFormatNone[, crs][,shift],clip_to_boundary=True,
save_metadata_xml=False[,model][,viewpoint][,progress])
Exportgenerated model for the chunk.
Parameters
• path (str)–Path tooutput model.
• binary (bool)– Enables/disables binaryencoding (if supported by format).
• precision (int)–Numberof digits afterthe decimalpoint (for text formats).
• texture_format (Metashape.ImageFormat) – Texture format.
• save_texture (bool) – Enables/disables texture export.
• save_uv (bool)– Enables/disables uvcoordinates export.
• save_normals (bool) – Enables/disables exportof vertex normals.
• save_colors (bool)– Enables/disables exportof vertex colors.
• save_confidence (bool) – Enables/disables exportofvertexconfidence.
• save_cameras (bool) –Enables/disables camera export.
• save_markers (bool) –Enables/disables markerexport.
• save_udim (bool)– Enables/disables UDIM texture layout.
• save_alpha (bool)– Enables/disables alpha channelexport.
• embed_texture (bool) – Embeds texture inside the model file(if supported byformat).
• strip_extensions (bool) – Stripscameralabel extensionsduring export.
• raster_transform (Metashape.RasterTransformType) – Raster band transforma-
tion.
• colors_rgb_8bit (bool) – Convert colorsto 8 bit RGB.
• gltf_y_up (bool)– Enables/disables y-up axes notation used in glTF.
• comment (str)– Optional comment(ifsupported byselectedformat).
• save_comment (bool) – Enables/disables comment export.
• format (Metashape.ModelFormat) – Export format.
• crs (Metashape.CoordinateSystem) – Output coordinate system.
• shift (Metashape.Vector) – Optionalshift to be applied tovertexcoordinates.
• clip_to_boundary (bool) – Clip modeltoboundaryshapes.
• save_metadata_xml (bool) – Savemetadata.xmlfile.
• model (int)–Modelkey toexport.
• viewpoint (Metashape.Viewpoint) – Default view.
42 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
• progress (Callable[[float], None]) – Progress callback.
exportOrthophotos(path='{filename}.tif'[, cameras], raster_transform=RasterTransformNone[,projection
][,region], resolution=0, resolution_x=0,resolution_y=0,save_kml=False,
save_world=False,save_alpha=True[,image_compression],white_background=True,
north_up=True[,progress])
Exportorthophotosforthechunk.
Parameters
• path (str)–Path tooutput orthophoto.
• cameras (list[int]) –Listofcameras to process.
• raster_transform (Metashape.RasterTransformType) – Raster band transforma-
tion.
• projection (Metashape.OrthoProjection) – Output projection.
• region (Metashape.BBox) – Region to be exported.
• resolution (float)– Output resolutionin meters.
• resolution_x (float) – Pixel size in theXdimension in projected units.
• resolution_y (float) – Pixel size in theYdimension in projected units.
• save_kml (bool)–Enablekml file generation.
• save_world (bool)–Enableworld file generation.
• save_alpha (bool)–Enablealpha channelgeneration.
• image_compression (Metashape.ImageCompression) – Image compression parame-
ters.
• white_background (bool) – Enable white background.
• north_up (bool)–Use north-up orientation for export.
• progress (Callable[[float], None]) – Progress callback.
exportPointCloud(path=''
,source_data=PointCloudData[,point_cloud], binary=True,
save_point_color=True,save_point_normal=True, save_point_intensity=True,
save_point_classification=True,save_point_confidence=True,
save_point_return_number=True,save_point_scan_angle=True,
save_point_source_id=True, save_point_timestamp=True,save_point_index=True,
raster_transform=RasterTransformNone, colors_rgb_8bit=True, comment=''
,
save_comment=True, format=PointCloudFormatNone,
image_format=ImageFormatJPEG[, crs][,shift][, region],clip_to_boundary=True,
block_width=1000, block_height=1000,split_in_blocks=False[,classes],
save_images=False,compression=True, tileset_version='1.0'
,screen_space_error=16,
folder_depth=5[,viewpoint],subdivide_task=True[, progress])
Exportpoint cloud.
Parameters
• path (str)–Path tooutput file.
• source_data (Metashape.DataSource)–Selectsbetweenpointcloudandtiepoints. If
notspecified,usespoint cloud if available.
• point_cloud (int)–Pointcloudkey to export.
• binary (bool)– Enables/disables binaryencoding for selected format (ifapplicable).
43
Metashape Python Reference, Release 2.1.1
• save_point_color (bool) – Enables/disables exportofpointcolor.
• save_point_normal (bool) – Enables/disables exportofpointnormal.
• save_point_intensity (bool) – Enables/disables exportofpointintensity.
• save_point_classification (bool) – Enables/disables exportofpointclassification.
• save_point_confidence (bool) – Enables/disables exportofpointconfidence.
• save_point_return_number (bool) – Enables/disables exportof point returnnumber.
• save_point_scan_angle (bool) – Enables/disables exportofpointscan angle.
• save_point_source_id (bool) – Enables/disables exportofpointsource ID.
• save_point_timestamp (bool) – Enables/disables exportofpointtimestamp.
• save_point_index (bool) – Enables/disables exportof point rowand columnindices.
• raster_transform (Metashape.RasterTransformType) – Raster band transforma-
tion.
• colors_rgb_8bit (bool) – Convert colorsto 8 bit RGB.
• comment (str)–Optional comment (if supported by selectedformat).
• save_comment (bool) –Enablecomment export.
• format (Metashape.PointCloudFormat) – Export format.
• image_format (Metashape.ImageFormat) – Image dataformat.
• crs (Metashape.CoordinateSystem) – Output coordinate system.
• shift (Metashape.Vector) – Optionalshift to be applied topoint coordinates.
• region (Metashape.BBox) – Region to be exported.
• clip_to_boundary (bool) – Clip point cloud to boundary shapes.
• block_width (float) – Block width in meters.
• block_height (float) – Block heightinmeters.
• split_in_blocks (bool) – Enable tiled export.
• classes (list[int]) –List ofpointclasses to be exported.
• save_images (bool)–Enable image export.
• compression (bool)–Enablecompression (Cesium format only).
• tileset_version (str) – Cesium 3DTiles formatversion to export (1.0 or1.1).
• screen_space_error (float) – Target screenspace error(Cesiumformat only).
• folder_depth (int)– Tileset subdivisiondepth (Cesiumformat only).
• viewpoint (Metashape.Viewpoint) – Defaultview.
• subdivide_task (bool) – Enable fine-level tasksubdivision.
• progress (Callable[[float], None]) – Progress callback.
44 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
exportRaster(path=''
,format=RasterFormatTiles,image_format=ImageFormatNone,
raster_transform=RasterTransformNone[,projection][, region],resolution=0,
resolution_x=0,resolution_y=0,block_width=10000,block_height=10000,
split_in_blocks=False,width=0,height=0[,world_transform],nodata_value=-32767,
save_kml=False,save_world=False,save_scheme=False,save_alpha=True,
image_description=''[,image_compression], network_links=True, global_profile=False,
min_zoom_level=-1, max_zoom_level=-1,white_background=True,clip_to_boundary=True,
title='Orthomosaic'
,description='Generated by AgisoftMetashape'
,
source_data=OrthomosaicData[,asset],north_up=True,tile_width=256,tile_height=256[,
progress])
ExportDEMororthomosaictofile.
Parameters
• path (str)– Pathto output orthomosaic.
• format (Metashape.RasterFormat) – Export format.
• image_format (Metashape.ImageFormat) – Tile format.
• raster_transform (Metashape.RasterTransformType) – Raster band transforma-
tion.
• projection (Metashape.OrthoProjection) – Output projection.
• region (Metashape.BBox) – Region to be exported.
• resolution (float)– Output resolutionin meters.
• resolution_x (float) – Pixel size in theXdimension in projected units.
• resolution_y (float) – Pixel size in theYdimension in projected units.
• block_width (int)– Raster block width in pixels.
• block_height (int)– Raster block height in pixels.
• split_in_blocks (bool) – Splitrasterin blocks.
• width (int)– Rasterwidth.
• height (int)– Raster height.
• world_transform (Metashape.Matrix) – 2x3 raster-to-world transformationmatrix.
• nodata_value (float) – No-data value (DEMexport only).
• save_kml (bool)–Enablekml file generation.
• save_world (bool)–Enableworld file generation.
• save_scheme (bool)– Enable tile scheme filesgeneration.
• save_alpha (bool)–Enablealpha channelgeneration.
• image_description (str) – Optionaldescriptiontobeadded to imagefiles.
• image_compression (Metashape.ImageCompression) – Image compression parame-
ters.
• network_links (bool) – Enable networklinks generation for KMZ format.
• global_profile (bool) – Use global profile (GeoPackageformatonly).
• min_zoom_level (int) – Minimum zoom level (GeoPackage, Google Map Tiles,
MBTilesandWorldWind Tilesformats only).
45
Metashape Python Reference, Release 2.1.1
• max_zoom_level (int) – Maximum zoom level (GeoPackage, Google Map Tiles,
MBTilesandWorldWind Tilesformats only).
• white_background (bool) – Enable white background.
• clip_to_boundary (bool) – Clip raster toboundaryshapes.
• title (str)– Export title.
• description (str)–Exportdescription.
• source_data (Metashape.DataSource) – Selectsbetween DEM and orthomosaic.
• asset (int)– Assetkey to export.
• north_up (bool)– Use north-up orientationfor export.
• tile_width (int)– Tile width inpixels.
• tile_height (int)–Tileheightin pixels.
• progress (Callable[[float], None]) – Progress callback.
exportReference(path=''
, format=ReferenceFormatNone, items=ReferenceItemsCameras,columns=''
,
delimiter=' '
,precision=6[,progress])
Exportreferencedatato thespecifiedfile.
Parameters
• path (str)– Pathto theoutput file.
• format (Metashape.ReferenceFormat) – Export format.
• items (Metashape.ReferenceItems) – Items to export in CSVformat.
• columns (str) – Column order in csv format (n - label, o - enabled flag, x/y/z - coordi-
nates,X/Y/Z-coordinateaccuracy,a/b/c-rotationangles,A/B/C-rotationangleaccuracy,
u/v/w-estimatedcoordinates,U/V/W-coordinateerrors,d/e/f-estimatedorientationan-
gles,D/E/F-orientationerrors,p/q/r-estimatedcoordinatesvariance,i/j/k-estimatedori-
entationanglesvariance,[]-groupofmultiplevalues,|-columnseparatorwithingroup).
• delimiter (str)– Column delimiterin csvformat.
• precision (int)–Numberof digits afterthe decimalpoint (for CSV format).
• progress (Callable[[float], None]) – Progress callback.
exportReport(path=''
, title=''
, description=''
,font_size=12,page_numbers=True,
include_system_info=True[,user_settings][,progress])
Exportprocessing reportinPDFformat.
Parameters
• path (str)–Path tooutput report.
• title (str)– Reporttitle.
• description (str)–Report description.
• font_size (int)– Font size(pt).
• page_numbers (bool) – Enable page numbers.
• include_system_info (bool) – Include system information.
• user_settings (list[tuple[str, str]])–Alistofuserdefinedsettingstoinclude
ontheProcessingParameters page.
46 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
• progress (Callable[[float], None]) – Progress callback.
exportShapes(path=''
,save_points=False,save_polylines=False, save_polygons=False[,groups],
format=ShapesFormatNone[,crs][,shift],polygons_as_polylines=False, save_labels=True,
save_attributes=True[,progress])
Exportshapes layer to file.
Parameters
• path (str)–Path toshapefile.
• save_points (bool)–Exportpoints.
• save_polylines (bool) – Export polylines.
• save_polygons (bool) – Export polygons.
• groups (list[int])– A list of shape groups to export.
• format (Metashape.ShapesFormat) – Export format.
• crs (Metashape.CoordinateSystem) – Output coordinatesystem.
• shift (Metashape.Vector) – Optionalshift to be applied tovertexcoordinates.
• polygons_as_polylines (bool) – Save polygons as polylines.
• save_labels (bool)–Exportlabels.
• save_attributes (bool) – Export attributes.
• progress (Callable[[float], None]) – Progress callback.
exportTexture(path=''
,texture_type=DiffuseMap,raster_transform=RasterTransformNone,
save_alpha=False[,progress])
Exportmodeltexture tofile.
Parameters
• path (str)–Path tooutput file.
• texture_type (Metashape.Model.TextureType) – Texture type.
• raster_transform (Metashape.RasterTransformType) – Raster band transforma-
tion.
• save_alpha (bool)– Enable alpha channel export.
• progress (Callable[[float], None]) – Progress callback.
exportTiledModel(path=''
,format=TiledModelFormatNone,model_format=ModelFormatCOLLADA,
texture_format=ImageFormatJPEG,raster_transform=RasterTransformNone[,
image_compression][,crs],clip_to_boundary=True[,tiled_model],
model_compression=True, tileset_version='1.0'
, use_tileset_transform=True,
screen_space_error=16,folder_depth=5[,model_group], pixel_size=0, tile_size=256,
face_count=20000[,progress])
Exportgenerated tiledmodel for the chunk.
Parameters
• path (str)–Path tooutput model.
• format (Metashape.TiledModelFormat) – Export format.
• model_format (Metashape.ModelFormat) – Model format for zip export.
47
Metashape Python Reference, Release 2.1.1
• texture_format (Metashape.ImageFormat) – Texture format.
• raster_transform (Metashape.RasterTransformType) – Raster band transforma-
tion.
• image_compression (Metashape.ImageCompression) – Image compression parame-
ters.
• crs (Metashape.CoordinateSystem) – Output coordinate system.
• clip_to_boundary (bool) – Clip tiledmodel to boundary shapes.
• tiled_model (int)–Tiled modelkey to export.
• model_compression (bool) – Enable meshcompression (Cesiumformatonly).
• tileset_version (str) – Cesium 3DTiles formatversion to export (1.0 or1.1).
• use_tileset_transform (bool)–Usetilesettransforminsteadofindividualtiletrans-
forms (Cesium formatonly).
• screen_space_error (float) – Target screenspace error(Cesiumformat only).
• folder_depth (int)–Tileset subdivision depth(Cesiumformat only).
• model_group (int)– Block model key to export.
• pixel_size (float)– Target model resolutionin meters(block modelexportonly).
• tile_size (int)– Size of tilesinpixels(block modelexportonly).
• face_count (int) – Number of faces per megapixel of texture resolution (block model
exportonly).
• progress (Callable[[float], None]) – Progress callback.
filterPointCloud(point_spacing=0[,point_cloud],replace_asset=False[, frames][,progress])
Reduce point cloud pointsnumber.
Parameters
• point_spacing (float) – Desired point spacing (m).
• point_cloud (int)–Point cloud key to filter.
• replace_asset (bool) – Replacedefault assetwith filtered point cloud.
• frames (list[int])– List of frames toprocess.
• progress (Callable[[float], None]) – Progress callback.
findCamera(key)
Findcameraby itskey.
Returns
Found camera.
Return type
Metashape.Camera
findCameraGroup(key)
Findcameragroupby itskey.
Returns
Found cameragroup.
48 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Return type
Metashape.CameraGroup
findCameraTrack(key)
Findcameratrack by its key.
Returns
Found cameratrack.
Return type
Metashape.CameraTrack
findDepthMaps(key)
Finddepthmapsbyits key.
Returns
Found depth maps.
Return type
Metashape.DepthMaps
findElevation(key)
Find elevation modelby its key.
Returns
Found elevation model.
Return type
Metashape.Elevation
findFrame(key)
Findframe by itskey.
Returns
Found frame.
Return type
Metashape.Chunk
findMarker(key)
Find markerbyitskey.
Returns
Found marker.
Return type
Metashape.Marker
findMarkerGroup(key)
Findmarker group byitskey.
Returns
Found markergroup.
Return type
Metashape.MarkerGroup
findModel(key)
Findmodelby itskey.
Returns
Found model.
49
Metashape Python Reference, Release 2.1.1
Return type
Metashape.Model
findOrthomosaic(key)
Findorthomosaicbyitskey.
Returns
Found orthomosaic.
Return type
Metashape.Orthomosaic
findPointCloud(key)
Findpoint cloudby its key.
Returns
Found point cloud.
Return type
Metashape.PointCloud
findPointCloudGroup(key)
Findpoint cloudgroupbyitskey.
Parameters
key (int)–Pointcloudgroup key.
Returns
Found point cloudgroup.
Return type
Metashape.PointCloudGroup
findScalebar(key)
Findscalebarbyitskey.
Returns
Found scalebar.
Return type
Metashape.Scalebar
findScalebarGroup(key)
Find scalebar group byitskey.
Returns
Found scalebargroup.
Return type
Metashape.ScalebarGroup
findSensor(key)
Find sensorbyits key.
Returns
Found sensor.
Return type
Metashape.Sensor
50 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
findTiledModel(key)
Findtiledmodelby itskey.
Returns
Found tiled model.
Return type
Metashape.TiledModel
frame
Currentframe index.
Type
int
frames
Listofframes in the chunk.
Type
list[Metashape.Chunk]
generateMasks(path='{filename}_mask.png'
, masking_mode=MaskingModeAlpha,
mask_operation=MaskOperationReplacement,tolerance=10[,cameras],
mask_defocus=False,fix_coverage=True,blur_threshold=3,
depth_threshold=3.40282e+38[,progress])
Generate masks for multiple cameras.
Parameters
• path (str)– Maskfile name template.
• masking_mode (Metashape.MaskingMode) – Mask generation mode.
• mask_operation (Metashape.MaskOperation) – Mask operation.
• tolerance (int)– Background masking tolerance.
• cameras (list[int]) – Optionallist of cameras to be processed.
• mask_defocus (bool) – Mask defocusareas.
• fix_coverage (bool)–Extendmaskstocoverwholemesh(onlyifmask_defocus=True).
• blur_threshold (float) – Allowed blur radius on a photo in pix (only if
mask_defocus=True).
• depth_threshold (float) – Maximum depth of masked areas in meters (only if
mask_defocus=False).
• progress (Callable[[float], None]) – Progress callback.
generatePrescriptionMap(class_count=4,cell_size=1,
classification_method=JenksNaturalBreaksClassification[,
boundary_shape_group][, breakpoints][,rates][,progress])
Generateprescriptionmapfor orthomosaic.
Parameters
• class_count (int)– Number of classes.
• cell_size (float)–Step of prescription grid,meters.
• classification_method (Metashape.ClassificationMethod)–Indexvaluesclas-
sificationmethod.
51
Metashape Python Reference, Release 2.1.1
• boundary_shape_group (int) – Boundary shape group.
• breakpoints (list[float]) – Classification breakpoints.
• rates (list[float]) – Fertilizerrate for eachclass.
• progress (Callable[[float], None]) – Progress callback.
image_brightness
Imagebrightness aspercentage.
Type
float
image_contrast
Imagecontrastaspercentage.
Type
float
importCameras(path=''
,format=CamerasFormatXML[, crs],image_orientation=0,image_list='list.txt'
,
load_image_list=False[,progress])
Importcamera positions.
Parameters
• path (str)– Pathto thefile.
• format (Metashape.CamerasFormat) – File format.
• crs (Metashape.CoordinateSystem) – Groundcoordinate system.
• image_orientation (int)–Imagecoordinatesystem(0-Xright,1-Xup,2-Xleft,3
-Xdown).
• image_list (str)–Path toimagelist file(Bundlerformatonly).
• load_image_list (bool) – Enable Bundler image list import.
• progress (Callable[[float], None]) – Progress callback.
importDepthImages(format=PointCloudFormatNone[, filenames][, color_filenames], image_path=''
,
multiplane=False[,progress])
Importimageswith depthdata.
Parameters
• format (Metashape.PointCloudFormat) – Point cloud format.
• filenames (list[str]) – List of filestoimport.
• color_filenames (list[str]) – List of corresponding color files, ifpresent.
• image_path (str)– Pathtemplate to outputfiles.
• multiplane (bool)– Import as a multi-camera system
• progress (Callable[[float], None]) – Progress callback.
importMarkers(path=''[, progress])
Importmarkers.
Parameters
• path (str)– Pathto thefile.
• progress (Callable[[float], None]) – Progress callback.
52 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
importModel(path=''
,format=ModelFormatNone[,crs][,shift],decode_udim=True,
replace_asset=False[,frame_paths][,progress])
Importmodelfromfile.
Parameters
• path (str)–Path tomodel.
• format (Metashape.ModelFormat) – Modelformat.
• crs (Metashape.CoordinateSystem) – Modelcoordinate system.
• shift (Metashape.Vector) – Optional shift to be applied to vertex coordinates.
• decode_udim (bool)–Load UDIMtexture layout.
• replace_asset (bool) – Replacedefaultasset with importedmodel.
• frame_paths (list[str])–Listofmodelpathstoimportineachframeofamultiframe
chunk.
• progress (Callable[[float], None]) – Progress callback.
importPointCloud(path=''
,format=PointCloudFormatNone[,crs][,shift],precision=0,
is_laser_scan=False,replace_asset=False, import_images=True,
calculate_normals=True,ignore_normals=False,point_neighbors=28,
scanner_at_origin=False,ignore_scanner_origin=False,ignore_trajectory=False[,
trajectory][,frame_paths][,progress])
Importpoint cloud from file.
Parameters
• path (str)– Pathto point cloud.
• format (Metashape.PointCloudFormat) – Point cloud format.
• crs (Metashape.CoordinateSystem) – Point cloud coordinate system.
• shift (Metashape.Vector) – Optionalshift to be applied topoint coordinates.
• precision (float)–Coordinateprecision (m). For defaultprecisionuse0.
• is_laser_scan (bool) – Import point clouds as laser scans.
• replace_asset (bool) – Replacedefaultasset with importedpoint cloud.
• import_images (bool) – Import imagesembedded in laser scan.
• calculate_normals (bool) – Calculate point normals.
• ignore_normals (bool) – Ignorenormalsin imported file.
• point_neighbors (int) – Number of point neighborstouse fornormalestimation.
• scanner_at_origin (bool)–Uselaserscanoriginasscannerpositionforunstructured
pointclouds.
• ignore_scanner_origin (bool) – Do not use laser scan origin as scanner position for
structuredpoint clouds.
• ignore_trajectory (bool) – Donotattach trajectory to importedpoint cloud.
• trajectory (int)– Trajectory key to attach.
• frame_paths (list[str])–Listofpointcloudpathstoimportineachframeofamul-
tiframechunk.
53
Metashape Python Reference, Release 2.1.1
• progress (Callable[[float], None]) – Progress callback.
importRaster(path=''[, crs],raster_type=ElevationData,nodata_value=-32767,has_nodata_value=False,
replace_asset=False[,frames][,progress])
ImportDEMororthomosaicfromfile.
Parameters
• path (str)– Pathto elevation model in GeoTIFFformat.
• crs (Metashape.CoordinateSystem) – Default coordinate system if not specified in
GeoTIFFfile.
• raster_type (Metashape.DataSource) – Type of raster layertoimport.
• nodata_value (float) – No-data value.
• has_nodata_value (bool) – No-data value valid flag.
• replace_asset (bool) – Replacedefault rasterwith imported one.
• frames (list[int])– List of frames toprocess.
• progress (Callable[[float], None]) – Progress callback.
importReference(path=''
,format=ReferenceFormatCSV,columns=''
, delimiter=''
, group_delimiters=False,
skip_rows=0[, items][,crs],ignore_labels=False, create_markers=False,
threshold=0.1, shutter_lag=0[, progress])
Importreferencedatafromthe specifiedfile.
Parameters
• path (str)– Pathto thefilewith reference data.
• format (Metashape.ReferenceFormat) – File format.
• columns (str)–Columnorderincsvformat(n-label,o-enabledflag,x/y/z-coordinates,
X/Y/Z - coordinate accuracy, a/b/c - rotation angles, A/B/C - rotation angle accuracy, [] -
group of multiplevalues, |-column separator withingroup).
• delimiter (str)–Column delimiter in csv format.
• group_delimiters (bool) – Combine consecutivedelimiters incsv format.
• skip_rows (int)– Number of rows to skip in (csvformatonly).
• items (Metashape.ReferenceItems) – List of items to load reference for (csv format
only).
• crs (Metashape.CoordinateSystem) – Reference data coordinate system (csv format
only).
• ignore_labels (bool)–Matchesreferencedatabasedoncoordinatesalone(csvformat
only).
• create_markers (bool) – Createmarkers for missing entries (csv format only).
• threshold (float)–Errorthresholdinmetersusedwhenignore_labelsisset(csvformat
only).
• shutter_lag (float) –Shutter lag in seconds (APM formatonly).
• progress (Callable[[float], None]) – Progress callback.
54 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
importShapes(path=''
,replace=False,boundary_type=NoBoundary,format=ShapesFormatNone,
columns='nxyzd'
,delimiter='
'
,
,group_delimiters=False,skip_rows=0[,crs][,progress])
Importshapeslayerfromfile.
Parameters
• path (str)– Pathto shapefile.
• replace (bool)– Replacecurrent shapes withnew data.
• boundary_type (Metashape.Shape.BoundaryType) – Boundary type to be applied to
importedshapes.
• format (Metashape.ShapesFormat) – Shapes format.
• columns (str)–Columnorderincsvformat(n-label,x/y/z-coordinates,d-description,
[]-groupofmultiplevalues,|-column separator withingroup).
• delimiter (str)– Column delimiter in csv format.
• group_delimiters (bool) – Combine consequitive delimitersin csvformat.
• skip_rows (int)–Numberof rowsto skip in (csvformatonly).
• crs (Metashape.CoordinateSystem) – Reference data coordinate system (csv format
only).
• progress (Callable[[float], None]) – Progress callback.
importTiledModel(path=''[,progress])
Importtiled modelfromfile.
Parameters
• path (str)–Path totiled model.
• progress (Callable[[float], None]) – Progress callback.
importTrajectory(path=''
,format=TrajectoryFormatNone,columns='txyz'
, delimiter=' '
,skip_rows=0[,
crs][,shift],replace_asset=False[, progress])
Importtrajectoryfromfile.
Parameters
• path (str)–Trajectoryfile path.
• format (Metashape.TrajectoryFormat) – Trajectory format.
• columns (str)–Columnorder(t-time,x/y/z-coordinates,a/b/c-rotationangles,space
-skipcolumn).
• delimiter (str)–CSV delimiter.
• skip_rows (int)– Number of rows to skip.
• crs (Metashape.CoordinateSystem) – Point cloud coordinatesystem.
• shift (Metashape.Vector) – Optionalshift to be applied topoint coordinates.
• replace_asset (bool) – Replacedefault assetwith imported trajectory.
• progress (Callable[[float], None]) – Progress callback.
importVideo(path, image_path, frame_step=CustomFrameStep,custom_frame_step=1, time_start=0,
time_end=-1)
Importsvideoto activechunk.
55
Metashape Python Reference, Release 2.1.1
Parameters
• path (str)– Pathto source video.
• image_path (str) – Path to directory where to save frames with filename template. For
example: /path/to/dir/frame{filenum}.png.
• frame_step (Metashape.FrameStep) – Frame step type.
• custom_frame_step (int)–Everycustom_frame_step’thframewillbesaved. Usedfor
frame_step=CustomFrameStep.
• time_start (int)–The starting point for importing video,in milliseconds.
• time_end (int)– The endpoint for importing video,inmilliseconds.
key
Chunk identifier.
Type
int
label
Chunk label.
Type
str
loadReferenceExif(load_rotation=False,load_accuracy=False)
Importcamera locationsfrom EXIF metadata.
Parameters
• load_rotation (bool) – load yaw,pitch and roll orientationangles.
• load_accuracy (bool) – load camera location accuracy.
loadReflectancePanelCalibration(path[,cameras])
Load reflectance panel calibration fromCSV file.
Parameters
• path (str)–Path tocalibration file.
• cameras (list[Metashape.Camera]) – List of camerasto process.
locateReflectancePanels([progress])
Locatereflectancepanels based on QR-codes.
Parameters
progress (Callable[[float], None]) – Progress callback.
marker_crs
Coordinatesystem used for marker reference data.
Type
Metashape.CoordinateSystem
marker_groups
Listofmarkergroupsin thechunk.
Type
list[Metashape.MarkerGroup]
56 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
marker_location_accuracy
Expectedaccuracyofmarkercoordinatesin meters.
Type
Metashape.Vector
marker_projection_accuracy
Expectedaccuracy ofmarkerprojections in pixels.
Type
float
markers
ListofRegular, Vertexand Fiducialmarkers inthe chunk.
Type
list[Metashape.Marker]
masks
Imagemasks.
Type
Metashape.Masks
matchPhotos(downscale=1,downscale_3d=1, generic_preselection=True,reference_preselection=True,
reference_preselection_mode=ReferencePreselectionSource, filter_mask=False,
mask_tiepoints=True,filter_stationary_points=True, keypoint_limit=40000,
keypoint_limit_3d=100000,keypoint_limit_per_mpx=1000, tiepoint_limit=4000,
keep_keypoints=False[,pairs][, cameras], guided_matching=False,reset_matches=False,
subdivide_task=True,workitem_size_cameras=20,workitem_size_pairs=80,
max_workgroup_size=100, laser_scans_vertical_axis=0,match_laser_scans=False[, progress
])
Perform image matchingfor thechunk frame.
Parameters
• downscale (int)–Imagealignmentaccuracy(0-Highest,1-High,2-Medium,4-Low,
8- Lowest).
• downscale_3d (int)–Laserscanalignmentaccuracy(1-Highest,2-High,4-Medium,
8- Low,16 -Lowest).
• generic_preselection (bool) – Enable generic preselection.
• reference_preselection (bool) – Enable reference preselection.
• reference_preselection_mode (Metashape.ReferencePreselectionMode) –
Reference preselection mode.
• filter_mask (bool)–Filter points by mask.
• mask_tiepoints (bool) – Apply mask filter totiepoints.
• filter_stationary_points (bool) – Exclude tie points which are stationary across
images.
• keypoint_limit (int) – Key pointlimit.
• keypoint_limit_3d (int) – Key pointlimitforlaser scans.
• keypoint_limit_per_mpx (int) – Key point limit permegapixel.
• tiepoint_limit (int) – Tie point limit.
57
Metashape Python Reference, Release 2.1.1
• keep_keypoints (bool) – Store keypoints in the project.
• pairs (list[tuple[int, int]]) – User defined list ofcamera pairsto match.
• cameras (list[int]) –List ofcameras tomatch.
• guided_matching (bool) – Enable guided image matching.
• reset_matches (bool) – Reset current matches.
• subdivide_task (bool) – Enable fine-level tasksubdivision.
• workitem_size_cameras (int) – Number of cameras in a workitem.
• workitem_size_pairs (int) – Number of image pairs ina workitem.
• max_workgroup_size (int) – Maximumworkgroup size.
• laser_scans_vertical_axis (int) – Common laser scans axis.
• match_laser_scans (bool) – Matchlaser scansusing geometric features.
• progress (Callable[[float], None]) – Progress callback.
mergeComponents(components[, progress])
Mergecomponents.
Parameters
• components (list[Metashape.Component]) – List of componentstomerge.
• progress (Callable[[float], None]) – Progress callback.
meta
Chunk metadata.
Type
Metashape.MetaData
model
Default modelforthecurrent frame.
Type
Metashape.Model
model_group
Default modelgroup for the current chunk.
Type
Metashape.ModelGroup
model_groups
Listofmodel groups inthe chunk.
Type
list[Metashape.ModelGroup]
models
Listofmodels for the currentframe.
Type
list[Metashape.Model]
58 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
modified
Modified flag.
Type
bool
optimizeCameras(fit_f=True, fit_cx=True,fit_cy=True, fit_b1=False,fit_b2=False,fit_k1=True,
fit_k2=True,fit_k3=True,fit_k4=False,fit_p1=True,fit_p2=True,fit_corrections=False,
adaptive_fitting=False, tiepoint_covariance=False[, progress])
Performoptimizationoftiepoints / camera parameters.
Parameters
• fit_f (bool)– Enable optimization of focal length coefficient.
• fit_cx (bool)– Enable optimization of X principal point coordinates.
• fit_cy (bool)– Enable optimization of Y principal point coordinates.
• fit_b1 (bool)– Enable optimization of aspect ratio.
• fit_b2 (bool)– Enable optimization of skew coefficient.
• fit_k1 (bool)– Enable optimization of k1radialdistortioncoefficient.
• fit_k2 (bool)– Enable optimization of k2radialdistortioncoefficient.
• fit_k3 (bool)– Enable optimization of k3radialdistortioncoefficient.
• fit_k4 (bool)– Enable optimization of k3radialdistortioncoefficient.
• fit_p1 (bool)– Enable optimization of p1tangential distortioncoefficient.
• fit_p2 (bool)–Enable optimizationof p2 tangential distortioncoefficient.
• fit_corrections (bool) – Enable optimization of additionalcorrections.
• adaptive_fitting (bool) – Enable adaptivefitting ofdistortion coefficients.
• tiepoint_covariance (bool) – Estimate tie pointcovariancematrices.
• progress (Callable[[float], None]) – Progress callback.
orthomosaic
Defaultorthomosaicfor thecurrent frame.
Type
Metashape.Orthomosaic
orthomosaics
Listoforthomosaics forthe currentframe.
Type
list[Metashape.Orthomosaic]
point_cloud
Default point cloud forthe currentframe.
Type
Metashape.PointCloud
point_cloud_groups
Listofpointcloudgroupsin thechunk.
Type
list[Metashape.PointCloudGroup]
59
Metashape Python Reference, Release 2.1.1
point_clouds
List of point cloudsfor thecurrent frame.
Type
list[Metashape.PointCloud]
primary_channel
Primary channelindex(-1for default).
Type
int
publishData(service=ServiceSketchfab, source_data=TiePointsData,
raster_transform=RasterTransformNone, save_point_color=True, save_camera_track=True,
title=''
,description=''
, tags=''
,owner=''
, token=''
,username=''
,password=''
,account=''
,
hostname=''
,is_draft=False,is_private=False,is_protected=False,tile_size=256,
min_zoom_level=-1,max_zoom_level=-1[, projection],resolution=0[,point_classes][,
image_compression][,progress])
Publish generateddata online.
Parameters
• service (Metashape.ServiceType) – Service to uploadon.
• source_data (Metashape.DataSource) – Asset type toupload.
• raster_transform (Metashape.RasterTransformType) – Raster band transforma-
tion.
• save_point_color (bool) – Enables/disables exportof point colors.
• save_camera_track (bool) – Enables/disables exportof cameratrack.
• title (str)–Datasettitle.
• description (str)– Dataset description.
• tags (str)– Dataset tags.
• owner (str)–Account owner (Cesium and Mapbox services).
• token (str) – Account token (Cesium, Mapbox, Picterra, Pointbox and Sketchfab ser-
vices).
• username (str)–Account username(4DMapper, Melownand Pointscene services).
• password (str)–Accountpassword(4DMapper,Melown,PointsceneandSketchfabser-
vices).
• account (str)–Account name (Melown service).
• hostname (str)– Service hostname(4DMapperservice).
• is_draft (bool)–Mark datasetas draft (Sketchfabservice).
• is_private (bool)–Setdatasetaccessto private(Pointboxand Sketchfab services).
• is_protected (bool) –Setdatasetaccessto protected(Pointboxservice).
• tile_size (int)–Tile size in pixels.
• min_zoom_level (int) – Minimum zoom level.
• max_zoom_level (int) – Maximumzoom level.
• projection (Metashape.CoordinateSystem) – Output projection.
60 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
• resolution (float)–Output resolution in meters.
• point_classes (list[int]) – List of point classes tobe exported.
• image_compression (Metashape.ImageCompression) – Image compression parame-
ters.
• progress (Callable[[float], None]) – Progress callback.
raster_transform
Raster transform.
Type
Metashape.RasterTransform
reduceOverlap(overlap=3, use_selection=False[, progress])
Disable redundant cameras.
Parameters
• overlap (int)– Target number of cameras observing each pointof thesurface.
• use_selection (bool) – Focus on model selection.
• progress (Callable[[float], None]) – Progress callback.
refineMarkers([markers][,progress])
Refine markers basedon imagescontent.
Parameters
• markers (list[int]) –Optional list ofmarkers to be processed.
• progress (Callable[[float], None]) – Progress callback.
refineModel(downscale=4, iterations=10, smoothness=0.5[,cameras][, progress])
Refine polygonalmodel.
Parameters
• downscale (int)–Refinementquality(1-Ultrahigh,2-High,4-Medium,8-Low,16
-Lowest).
• iterations (int)–Numberofrefinementiterations.
• smoothness (float)–Smoothing strength. Should bein range [0, 1].
• cameras (list[int]) – List of camerasto process.
• progress (Callable[[float], None]) – Progress callback.
region
Reconstructionvolumeselection.
Type
Metashape.Region
remove(items)
Removeitems fromthechunk.
Parameters
items (list[Metashape.Chunk | Metashape.Sensor | Metashape.CameraGroup
| Metashape.MarkerGroup | Metashape.ScalebarGroup | Metashape.Camera |
Metashape.Marker | Metashape.Scalebar | Metashape.CameraTrack]) – A list
ofitems toberemoved.
61
Metashape Python Reference, Release 2.1.1
removeLighting(color_mode=False, internal_blur=1.5, mesh_noise_suppression=1,
ambient_occlusion_path=''
,ambient_occlusion_multiplier=1.5[,progress])
Generatemodelforthe chunk frame.
Parameters
• color_mode (bool)–Enablemulti-colorprocessing mode.
• internal_blur (float) – Internal blur. Should be in range [0,4].
• mesh_noise_suppression (float)–Meshnormalsnoisesuppressionstrength. Should
beinrange [0, 4].
• ambient_occlusion_path (str) – Path to ambient occlusion texture atlas. Can be
empty.
• ambient_occlusion_multiplier (float) – Ambient occlusion multiplier. Should be
inrange [0.25,4].
• progress (Callable[[float], None]) – Progress callback.
renderPreview(width = 2048,height = 2048[, transform],point_size=1[, progress])
Generatepreview image forthe chunk.
Parameters
• width (int)– Preview image width.
• height (int)–Previewimage height.
• transform (Metashape.Matrix) – 4x4 viewpoint transformation matrix.
• point_size (int)– Point size.
• progress (Callable[[float], None]) – Progress callback.
Returns
Preview image.
Return type
Metashape.Image
resetRegion()
Reset reconstructionvolume selectortodefault position.
scalebar_accuracy
Expectedscale bar accuracyinmeters.
Type
float
scalebar_groups
Listofscalebargroups in thechunk.
Type
list[Metashape.ScalebarGroup]
scalebars
Listofscale barsin the chunk.
Type
list[Metashape.Scalebar]
62 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
selected
Selects/deselects thechunk.
Type
bool
sensors
Listofsensorsinthe chunk.
Type
list[Metashape.Sensor]
shapes
Shapesfor the currentframe.
Type
Metashape.Shapes
smoothModel(strength=3,apply_to_selection=False,fix_borders=True, preserve_edges=False[,model][,
progress])
Smoothmodel using Laplaciansmoothing algorithm.
Parameters
• strength (float)–Smoothing strength.
• apply_to_selection (bool) – Apply to selectedfaces.
• fix_borders (bool)–Fixborders.
• preserve_edges (bool) – Preserveedges.
• model (int)–Keyof modeltosmooth.
• progress (Callable[[float], None]) – Progress callback.
smoothPointCloud(smoothing_radius=0[,point_cloud][,classes],apply_to_selection=False[, progress
])
Smooth point cloud.
Parameters
• smoothing_radius (float) – Desired smoothing radius(m).
• point_cloud (int)–Key of point cloudto filter.
• classes (list[int]) – List of point classes to be smoothed.
• apply_to_selection (bool) – Smooth points withinselection.
• progress (Callable[[float], None]) – Progress callback.
sortCameras()
Sortscameras bytheirlabels.
sortMarkers()
Sortsmarkersby theirlabels.
sortScalebars()
Sorts scalebarsby their labels.
63
Metashape Python Reference, Release 2.1.1
splitComponents(items[, progress])
Splitcomponents.
Parameters
• items (list[Metashape.Camera | Metashape.PointCloud]) – List of items to
split.
• progress (Callable[[float], None]) – Progress callback.
thinTiePoints(point_limit=1000)
Removeexcessive tracks from the tiepointcloud.
Parameters
point_limit (int)–Maximum number of pointsforeach photo.
thumbnails
Imagethumbnails.
Type
Metashape.Thumbnails
tie_points
Generated tiepointcloud.
Type
Metashape.TiePoints
tiepoint_accuracy
Expectedtiepointaccuracyinpixels.
Type
float
tiled_model
Default tiledmodel for the current frame.
Type
Metashape.TiledModel
tiled_models
Listoftiled models forthe current frame.
Type
list[Metashape.TiledModel]
trackMarkers(first_frame=0,last_frame=0[,progress])
Track markerprojectionsthrough the framesequence.
Parameters
• first_frame (int)–Starting frame index.
• last_frame (int)– Ending frame index.
• progress (Callable[[float], None]) – Progress callback.
transform
4x4 matrix specifyingchunklocation in the worldcoordinate system.
Type
Metashape.ChunkTransform
64 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
transformRaster(source_data=ElevationData[,asset],subtract=False[, operand_chunk][,
operand_frame][,operand_asset],width=0, height=0[,world_transform],
resolution=0, resolution_x=0,resolution_y=0,nodata_value=-32767,north_up=True[,
region][,projection], replace_asset=False[,frames][,progress])
Transform DEMororthomosaic.
Parameters
• source_data (Metashape.DataSource) – Selectsbetween DEM and orthomosaic.
• asset (int)– Assetkey to transform.
• subtract (bool)– Subtractionflag.
• operand_chunk (int) – Operand chunk key.
• operand_frame (int) – Operand frame key.
• operand_asset (int) – Operand asset key.
• width (int)– Rasterwidth.
• height (int)–Raster height.
• world_transform (Metashape.Matrix) – 2x3 raster-to-worldtransformation matrix.
• resolution (float)– Output resolution in meters.
• resolution_x (float) – Pixel size in theX dimensioninprojectedunits.
• resolution_y (float) – Pixel size in theY dimensioninprojectedunits.
• nodata_value (float) – No-data value(DEM exportonly).
• north_up (bool)–Use north-uporientation forexport.
• region (Metashape.BBox) – Region to be processed.
• projection (Metashape.OrthoProjection) – Output projection.
• replace_asset (bool) – Replacedefault rasterwith transformed one.
• frames (list[int])– List of frames toprocess.
• progress (Callable[[float], None]) – Progress callback.
triangulateTiePoints(max_error=10, min_image=2[,progress])
Rebuild tie point cloudforthe chunk.
Parameters
• max_error (float)– Reprojection error threshold.
• min_image (int)– Minimum number of point projections.
• progress (Callable[[float], None]) – Progress callback.
updateTransform()
Updatechunktransformationbasedon referencedata.
world_crs
Coordinatesystem used as world coordinate system.
Type
Metashape.CoordinateSystem
65
Metashape Python Reference, Release 2.1.1
class Metashape.ChunkTransform
Transformationbetweenchunkand world coordinates systems.
copy()
Returnacopyof theobject.
Returns
Acopyofthe object.
Return type
Metashape.ChunkTransform
matrix
Transformationmatrix.
Type
Metashape.Matrix
rotation
Rotationcomponent.
Type
Metashape.Matrix
scale
Scale component.
Type
float
translation
Translationcomponent.
Type
Metashape.Vector
class Metashape.CirTransform
CIR calibrationmatrix.
calibrate()
CalibrateCIRmatrix based onorthomosaic histogram.
coeffs
Color matrix.
Type
Metashape.Matrix
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.CirTransform
reset()
Reset CIR calibrationmatrix.
66 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
class Metashape.ClassificationMethod
Index valuesclassification methodin [EqualIntervalsClassification,JenksNaturalBreaksClassification]
class Metashape.CloudClient
CloudClientclassprovidesaccesstotheAgisoftCloudprocessingserviceandallowstocreateandmanagecloud
projects.
The followingexampleconnectstothe service andlistsavailable projects:
>>> import Metashape
>>> client = Metashape.CloudClient()
>>> client.username =
>>> client.password =
'user'
'password'
>>> client.projectList()
abortProcessing(document)
Cancel processing.
Parameters
document (Metashape.Document) – Project to cancel.
client_id
Client software id(optional).
Type
str
client_secret
Client softrwae secret(optional).
Type
str
downloadProject(document[,progress])
Downloadprojectfromthecloud.
Parameters
• document (Metashape.Document) – Project to download.
• progress (Callable[[float], None]) – Progress callback.
getProcessingStatus(document)
Get processing status.
Parameters
document (Metashape.Document) – Project being processed.
Returns
Processingstatus.
Return type
dict
getProjectList()
Getlist of projectsinthe cloud.
Returns
Listofprojects.
67
Metashape Python Reference, Release 2.1.1
Return type
list
password
Cloudaccountpassword.
Type
str
processProject(document,tasks)
Start processinginthe cloud.
Parameters
• document (Metashape.Document) – Project to process.
• tasks (list[Metashape.NetworkTask]) – List of processingtasks toexecute.
uploadProject(document,publish=False[,progress])
Upload projectto thecloud.
Parameters
• document (Metashape.Document) – Project to upload.
• publish (bool)– Publish projectforonlinevisualization.
• progress (Callable[[float], None]) – Progress callback.
username
Cloudaccountusername.
Type
str
class Metashape.Component
Component instance
chunk
Chunk the componentbelongsto.
Type
Metashape.Chunk
key
Component identifier.
Type
int
label
Component label.
Type
str
partition
Component partition.
Type
list
68 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
region
Reconstruction volume selection.
Type
Metashape.Region
transform
4x4matrixspecifying chunk location in theworldcoordinate system.
Type
Metashape.ChunkTransform
class Metashape.CoordinateSystem
Coordinate reference system(local,geographicor projected).
Thefollowingexamplechangeschunkcoordinate systemtoWGS84/UTMzone41Nandloadsreferencedata
from file:
>>> import Metashape
>>> chunk = Metashape.app.document.chunk
>>> chunk.crs = Metashape.CoordinateSystem("EPSG::32641")
>>> chunk.importReference("gcp.txt", Metashape.ReferenceFormatCSV)
>>> chunk.updateTransform()
addGeoid(path)
Registergeoidmodel.
Parameters
path (str)–Path togeoid file.
authority
Authorityidentifier ofthe coordinatesystem.
Type
str
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.CoordinateSystem
datumTransform(source,target)
Coordinatetransformationfromsource totargetcoordinate systemdatum.
Parameters
• source (Metashape.CoordinateSystem) – Source coordinate system.
• target (Metashape.CoordinateSystem) – Target coordinate system.
Returns
4x4transformationmatrix.
Return type
Metashape.Matrix
69
Metashape Python Reference, Release 2.1.1
geoccs
Basegeocentriccoordinate system.
Type
Metashape.CoordinateSystem
geogcs
Base geographiccoordinate system.
Type
Metashape.CoordinateSystem
geoid_height
Fixed geoid heighttobeusedinstead of interpolated values.
Type
float
init(crs)
Initializeprojectionbasedon specifiedWKT definition orauthorityidentifier.
Parameters
crs (str)–WKTdefinition of coordinatesystem orauthority identifier.
listBuiltinCRS()
Returns alistof builtin coordinatesystems.
localframe(point)
Returns 4x4transformation matrix to LSEcoordinates at the givenpoint.
Parameters
point (Metashape.Vector) – Coordinatesof the origin in the geocentriccoordinates.
Returns
Transformationfromgeocentric coordinates to local coordinates.
Return type
Metashape.Matrix
name
Name of the coordinate system.
Type
str
proj4
Coordinate systemdefinitioninPROJ.4format.
Type
str
project(point)
Projects point from geocentriccoordinates to projectedgeographic coordinatesystem.
Parameters
point (Metashape.Vector) – 3D pointin geocentric coordinates.
Returns
3Dpoint inprojectedcoordinates.
Return type
Metashape.Vector
70 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
towgs84
TOWGS84 transformation parameters (dx, dy, dz, rx, ry, rz,scale).
Type
list[float]
transform(point,source, target)
Transformpointcoordinatesbetween coordinate systems.
Parameters
• point (Metashape.Vector) – 2D or3D point coordinates.
• source (Metashape.CoordinateSystem) – Source coordinatesystem.
• target (Metashape.CoordinateSystem) – Target coordinatesystem.
Returns
Transformed point coordinates.
Return type
Metashape.Vector
transformationMatrix(point,source, target)
Local approximation of coordinate transformation from source to target coordinate system at the given
point.
Parameters
• point (Metashape.Vector) – 3D pointcoordinates.
• source (Metashape.CoordinateSystem) – Source coordinatesystem.
• target (Metashape.CoordinateSystem) – Target coordinatesystem.
Returns
4x4transformationmatrix.
Return type
Metashape.Matrix
unproject(point)
Unprojects point fromprojectedcoordinates togeocentric coordinates.
Parameters
point (Metashape.Vector) – 3D pointin projectedcoordinatesystem.
Returns
3Dpoint ingeocentric coordinates.
Return type
Metashape.Vector
wkt
wkt2
Coordinate systemdefinitioninWKT format.
Type
str
Coordinate systemdefinitioninWKT format, version2.
Type
str
71
Metashape Python Reference, Release 2.1.1
class Metashape.DataSource
Datasourcein[TiePointsData,PointCloudData,ModelData,TiledModelData,ElevationData,OrthomosaicData,
DepthMapsData, ImagesData, TrajectoryData, LaserScansData, DepthMapsAndLaserScansData]
class Metashape.DataType
Data type in [DataTypeUndefined, DataType8i, DataType8u, DataType16i, DataType16u, DataType16f,
DataType32i,DataType32u,DataType32f,DataType64i, DataType64u, DataType64f]
class Metashape.DepthMap
Depth mapdata.
calibration
Depth map calibration.
Type
Metashape.Calibration
copy()
Returns acopy ofthe depthmap.
Returns
Copyofthe depthmap.
Return type
Metashape.DepthMap
getCalibration(level=0)
Returns calibrationdata.
Parameters
level (int)– Levelindex.
Returns
Calibrationdata.
Return type
Metashape.Calibration
image([level])
Returnsimagedata.
Parameters
level (int)–Levelindex.
Returns
Imagedata.
Return type
Metashape.Image
setCalibration(calibration,level=0)
Parameters
• calibration (Metashape.Calibration) – Calibrationdata.
• level (int)– Levelindex.
setImage(image,level=0)
Parameters
• image (Metashape.Image) – Image objectwith depth map data.
72 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
• level (int)– Levelindex.
class Metashape.DepthMaps
A setof depth mapsgeneratedfor achunk frame.
clear()
Clearsdepth mapsdata.
copy()
items()
Create acopyofthe depthmaps.
Returns
Copyofthe depthmaps.
Return type
Metashape.DepthMaps
Listofitems.
key
Depth mapsidentifier.
Type
int
keys()
List of item keys.
label
meta
Depthmaps label.
Type
str
Depth mapsmeta data.
Type
Metashape.MetaData
modified
Modifiedflag.
Type
bool
values()
Listofitemvalues.
class Metashape.Document
Metashape project.
Contains list of chunks available in the project. Implements processing operations that work with multiple
chunks. Supportssaving/loading projectfiles.
The project currently opened in Metashape window can be accessed using Metashape.app.document attribute.
AdditionalDocument objectscan becreated as needed.
The followingexamplesaves active chunk from the opened project ina separateproject:
73
Metashape Python Reference, Release 2.1.1
>>> import Metashape
>>> doc = Metashape.app.document
>>> doc.save(path =
"project.psz", chunks = [doc.chunk])
addChunk()
Addnewchunktothedocument.
Returns
Createdchunk.
Return type
Metashape.Chunk
alignChunks([chunks][, reference],method=0,fit_scale=True,downscale=1,generic_preselection=False,
filter_mask=False, mask_tiepoints=False,keypoint_limit=40000[, markers][,progress])
Align specified set of chunks.
Parameters
• chunks (list[int])– List of chunksto be aligned.
• reference (int)–Chunk tobeused as a reference.
• method (int)–Alignment method (0 -pointbased, 1 -markerbased,2- camerabased).
• fit_scale (bool)– Fit chunk scale during alignment.
• downscale (int) – Alignment accuracy (0 - Highest, 1 - High, 2 - Medium, 4 - Low, 8 -
Lowest).
• generic_preselection (bool) – Enables image pair preselection.
• filter_mask (bool)– Filterpoints by mask.
• mask_tiepoints (bool) – Apply mask filter to tie points.
• keypoint_limit (int) – Maximumnumber ofpoints for each photo.
• markers (list[int]) – List of markers to be used for markerbasedalignment.
• progress (Callable[[float], None]) – Progress callback.
append(document[,chunks][,progress])
Appendthespecified Documentobject tothe current document.
Parameters
• document (Metashape.Document) – Document object to be appended.
• chunks (list[Metashape.Chunk]) – List of chunks to append.
• progress (Callable[[float], None]) – Progress callback.
chunk
Active chunk.
Type
Metashape.Chunk
chunks
Listofchunksin the document.
Type
list[Metashape.Chunk]
74 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
clear()
copy()
Clearthecontents of the Document object.
Returnacopyof thedocument.
Returns
Acopyofthedocument.
Return type
Metashape.Document
findChunk(key)
Findchunkby its key.
Returns
Found chunk.
Return type
Metashape.Chunk
mergeChunks(copy_laser_scans=True, copy_depth_maps=False, copy_point_clouds=False,
copy_models=False,copy_tiled_models=False, copy_elevations=False,
copy_orthomosaics=False,merge_markers=False,merge_tiepoints=False,
merge_assets=False[,chunks][,progress])
Mergespecifiedset of chunks.
Parameters
• copy_laser_scans (bool) – Copy laser scans.
• copy_depth_maps (bool) – Copy depth maps.
• copy_point_clouds (bool) – Copy point clouds.
• copy_models (bool)–Copy models.
• copy_tiled_models (bool) – Copy tiledmodels.
• copy_elevations (bool) – Copy DEMs.
• copy_orthomosaics (bool) – Copy orthomosaics.
• merge_markers (bool) – Merge markers.
• merge_tiepoints (bool) – Merge tiepoints.
• merge_assets (bool) –Merge default assets.
• chunks (list[int])–List ofchunks toprocess.
• progress (Callable[[float], None]) – Progress callback.
meta
Documentmeta data.
Type
Metashape.MetaData
modified
Modifiedflag.
Type
bool
75
Metashape Python Reference, Release 2.1.1
open(path, read_only=False,ignore_lock=False, archive=True)
Load documentfromthe specifiedfile.
Parameters
• path (str)– Pathto thefile.
• read_only (bool)– Open document in read-only mode.
• ignore_lock (bool)– Ignorelockstate for project modifications.
• archive (bool)–Override projectformat when using non-standard file extension.
path
Pathtothedocumentfile.
Type
str
read_only
Read only status.
Type
bool
remove(items)
Removea setofitemsfromthe document.
Parameters
items (list[Metashape.Chunk]) – A list of items tobe removed.
save([path][, chunks][,version], archive=True)
Savedocumentto thespecifiedfile.
Parameters
• path (str)–Optional path tothefile.
• chunks (list[Metashape.Chunk]) – List of chunksto be saved.
• version (str)–Project versiontosave.
• archive (bool)– Override project format whenusing non-standard fileextension.
sortChunks()
Sorts chunksbytheirlabels.
class Metashape.Elevation
Digital elevationmodel.
altitude(point)
Return elevationvalue at the specified point.
Parameters
point (Metashape.Vector) – Point coordinates in theelevation coordinate system.
Returns
Elevationvalue.
Return type
float
76 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
bottom
Y coordinate of thebottomside.
Type
float
clear()
Clearselevation model data.
copy()
Create acopyofthe elevationmodel.
Returns
Copyofthe elevation model.
Return type
Metashape.Elevation
crs
Coordinatesystem of elevation model.
Type
Metashape.CoordinateSystem
height
key
label
left
max
meta
Elevationmodel height.
Type
int
Elevationmodel identifier.
Type
int
Elevationmodel label.
Type
str
X coordinateof theleft side.
Type
float
Maximumelevation value.
Type
float
Elevation modelmeta data.
Type
Metashape.MetaData
77
Metashape Python Reference, Release 2.1.1
min
Minimum elevation value.
Type
float
modified
Modifiedflag.
Type
bool
palette
Color palette.
Type
dict
pickPoint(origin,target)
Returns ray intersectionwith theDEM (point ontheray nearest to some point).
Parameters
• origin (Metashape.Vector) – Ray origin in the DEM coordinate system.
• target (Metashape.Vector) – Point onthe ray inthe DEM coordinate system.
Returns
Coordinatesoftheintersectionpointinthe DEMcoordinatesystem.
Return type
Metashape.Vector
projection
Projectionofelevationmodel.
Type
Metashape.OrthoProjection
resolution
DEM resolutionin meters.
Type
float
right
X coordinateof therightside.
Type
float
top
width
Y coordinateof thetop side.
Type
float
Elevationmodel width.
Type
int
78 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
class Metashape.EulerAngles
Euler anglesin[EulerAnglesYPR,EulerAnglesOPK,EulerAnglesPOK, EulerAnglesANK]
class Metashape.FaceCount
Face countin [LowFaceCount, MediumFaceCount,HighFaceCount, CustomFaceCount]
class Metashape.FilterMode
Depth filteringmodein[NoFiltering,MildFiltering, ModerateFiltering, AggressiveFiltering]
class Metashape.FrameStep
Framestepsizeforvideoimportin[CustomFrameStep,SmallFrameStep,MediumFrameStep,LargeFrameStep]
class Metashape.Geometry
Geometry data.
GeometryCollection(geometries)
Createa GeometryCollection geometry.
Parameters
geometries (list[Metashape.Geometry]) – Child geometries.
Returns
AGeometryCollectiongeometry.
Return type
Metashape.Geometry
LineString(coordinates)
CreateaLineString geometry.
Parameters
coordinates (list[Metashape.Vector]) – List of vertex coordinates.
Returns
ALineStringgeometry.
Return type
Metashape.Geometry
MultiLineString(geometries)
Createa MultiLineStringgeometry.
Parameters
geometries (list[Metashape.Geometry]) – Childline strings.
Returns
Apointgeometry.
Return type
Metashape.Geometry
MultiPoint(geometries)
Create aMultiPointgeometry.
Parameters
geometries (list[Metashape.Geometry]) – Child points.
Returns
Apointgeometry.
Return type
Metashape.Geometry
79
Metashape Python Reference, Release 2.1.1
MultiPolygon(geometries)
Create a MultiPolygon geometry.
Parameters
geometries (list[Metashape.Geometry]) – Childpolygons.
Returns
Apointgeometry.
Return type
Metashape.Geometry
Point(vector)
CreateaPointgeometry.
Parameters
vector (Metashape.Vector | list[float]) – Point coordinates.
Returns
Apointgeometry.
Return type
Metashape.Geometry
Polygon(exterior_ring[,interior_rings])
Createa Polygon geometry.
Parameters
• exterior_ring (list[Metashape.Vector]) – Point coordinates.
• interior_rings (list[Metashape.Vector]) – Point coordinates.
Returns
APolygon geometry.
Return type
Metashape.Geometry
class Type
Geometry type in [PointType, LineStringType, PolygonType, MultiPointType, MultiLineStringType, Mul-
tiPolygonType, GeometryCollectionType]
coordinates
Listofvertexcoordinates.
Type
list[Metashape.Vector]
geometries
Listofchild geometries.
Type
list[Metashape.Geometry]
is_3d
Is 3Dflag.
Type
bool
80 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
type
Geometry type.
Type
Metashape.Geometry.Type
class Metashape.Image(width, height, channels,datatype='U8')
n-channelimage
Parameters
• width (int)– image width
• height (int)– image height
• channels (str)–colorchannel layout, e.g. ‘RGB’,‘RGBA’, etc.
• datatype (str)–pixeldata type in[‘U8’,‘U16’, ‘U32’, ‘F16’, ‘F32’,‘F64’]
channels
Channelmappingfortheimage.
Type
str
cn
Number of color channels.
Type
int
convert(channels[,datatype])
Convertimageto specifieddatatypeand channel layout.
Parameters
• channels (str)– color channels tobe loaded, e.g. ‘RGB’, ‘RGBA’,etc.
• datatype (str)– pixeldata typein [‘U8’, ‘U16’,‘U32’,‘F16’,‘F32’,‘F64’]
Returns
Converted image.
Return type
Metashape.Image
copy()
Returnacopyof theimage.
Returns
copy of the image
Return type
Metashape.Image
data_type
Data typeusedto storepixelvalues.
Type
str
81
Metashape Python Reference, Release 2.1.1
fromstring(data, width,height,channels, datatype='U8')
Createimage from bytearray.
Parameters
• data (str)– rawimagedata
• width (int)– image width
• height (int)– image height
• channels (str)– color channellayout,e.g. ‘RGB’, ‘RGBA’, etc.
• datatype (str)–pixel data type in [‘U8’, ‘U16’,‘U32’,‘F16’, ‘F32’, ‘F64’]
Returns
Createdimage.
Return type
Metashape.Image
gaussianBlur(radius)
Smoothimage with a gaussianfilter.
Parameters
radius (float)– smoothing radius.
Returns
Smoothedimage.
Return type
Metashape.Image
height
Imageheight.
Type
int
open(path, layer=0,datatype='U8'[,channels][,x][, y][,w][,h])
Load imagefromfile.
Parameters
• path (str)–pathto theimage file
• layer (int)– image layer in case of multipage file
• datatype (str)– pixel data type in [‘U8’, ‘U16’, ‘U32’, ‘F16’, ‘F32’, ‘F64’]
• channels (str)– color channels tobeloaded, e.g. ‘RGB’, ‘RGBA’, etc.
• x (int)– x offsetofimageregion.
• y (int)– y offsetofimageregion.
• w (int)– widthofimageregion.
• h (int)–heightofimage region.
Returns
Loadedimage.
Return type
Metashape.Image
82 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
resize(width,height)
Resizeimage tospecifieddimensions.
Parameters
• width (int)– newimage width
• height (int)– newimage height
Returns
resizedimage
Return type
Metashape.Image
save(path[, compression])
Saveimage to thefile.
Parameters
• path (str)–pathto theimagefile
• compression (Metashape.ImageCompression) – compressionoptions
tostring()
Convertimageto bytearray.
Returns
Raw imagedata.
Return type
str
undistort(calib,center_principal_point=True,square_pixels=True)
Undistortimage using providedcalibration.
Parameters
• calib (Metashape.Calibration) – lens calibration
• center_principal_point (bool) – moves principalpointtothe imagecenter
• square_pixels (bool) – createimage with squarepixels
Returns
undistorted image
Return type
Metashape.Image
uniformNoise(amplitude)
Adduniform noisewith specifiedamplitude.
Parameters
amplitude (float)–noise amplitude.
Returns
Imagewithadded noise.
Return type
Metashape.Image
83
Metashape Python Reference, Release 2.1.1
warp(calib0,trans0,calib1,trans1)
Warp imagebyrotatingvirtualviewpoint.
Parameters
• calib0 (Metashape.Calibration) – initial calibration
• trans0 (Metashape.Matrix) – initial camera orientation as 4x4 matrix
• calib1 (Metashape.Calibration) – finalcalibration
• trans1 (Metashape.Matrix) – finalcameraorientation as 4x4matrix
Returns
warpedimage
Return type
Metashape.Image
width
Imagewidth.
Type
int
class Metashape.ImageCompression
Image compressionparameters
class TiffCompression
Tiff compression in [TiffCompressionNone, TiffCompressionLZW, TiffCompressionJPEG, TiffCompres-
sionPackbits, TiffCompressionDeflate]
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.Viewpoint
jpeg_quality
JPEG quality.
Type
int
tiff_big
EnableBigTIFFcompression forTIFFfiles.
Type
bool
tiff_compression
Tiff compression.
Type
int
tiff_overviews
Enableimage pyramiddeneration for TIFF files.
84 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
bool
tiff_tiled
Exporttiled TIFF.
Type
bool
class Metashape.ImageFormat
Image format in [ImageFormatNone, ImageFormatJPEG, ImageFormatTIFF, ImageFormatPNG, ImageFor-
matBMP, ImageFormatEXR, ImageFormatPNM, ImageFormatSGI, ImageFormatCR2, ImageFormatBZ2, Im-
ageFormatSEQ, ImageFormatBIL, ImageFormatASCII, ImageFormatXYZ, ImageFormatARA, ImageFor-
matTGA,ImageFormatDDS, ImageFormatJP2,ImageFormatWebP,ImageFormatJXL, ImageFormatKTX]
class Metashape.ImageLayout
Image layoutin [UndefinedLayout, FlatLayout, MultiframeLayout, MultiplaneLayout]
class Metashape.Interpolation
Interpolation mode in[DisabledInterpolation,EnabledInterpolation,Extrapolated]
class Metashape.License
Licenseinformation.
activate(license_key)
Activate softwareonlineusinga licensekey.
Parameters
key (str)–Activation key.
activateOffline(activation_params)
Createarequestforofflineactivation.
Parameters
activation_params (str) – The content of .actparam file.
Returns
The activationrequest whichshould be saved to .actreq file.
Return type
str
borrowLicense(seconds)
Borrowfloating licenseforthespecified number ofseconds.
Parameters
seconds (int)–Borrow duration in seconds.
deactivate()
Deactivate softwareonline.
deactivateOffline()
Create arequestfor offline deactivation.
Returns
The deactivation requestwhichshouldbe saved to .actreq file.
Return type
str
85
Metashape Python Reference, Release 2.1.1
expiration
License expiration asa Unixtimestamp in seconds.
Type
int
install(activation_response)
Installlicense from theactivationresponse.
Parameters
activation_response (str) – The content of .actresp file.
returnLicense()
Return borrowedlicense to thelicenseserver.
valid
Metashape activationstatus.
Type
bool
class Metashape.MappingMode
UV mapping mode in [GenericMapping, OrthophotoMapping, AdaptiveOrthophotoMapping, SphericalMap-
ping, CameraMapping]
class Metashape.Marker
Markerinstance
class Projection
Markerdata().
coord
Pointcoordinatesin pixels.
Type
Metashape.Vector
pinned
Pinned flag.
Type
bool
valid
Validflag.
Type
bool
class Projections
Collectionofprojections specified for the marker
items()
Listofitems.
keys()
Listofitemkeys.
values()
Listofitemvalues.
86 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
class Reference
Marker referencedata.
accuracy
Markerlocationaccuracy.
Type
Metashape.Vector
enabled
Enabledflag.
Type
bool
location
Markercoordinates.
Type
Metashape.Vector
class Type
Markertypein[Regular, Vertex, Fiducial]
chunk
Chunk the marker belongsto.
Type
Metashape.Chunk
enabled
frames
group
Enables/disables themarker.
Type
bool
Markerframes.
Type
list[Metashape.Marker]
Markergroup.
Type
Metashape.MarkerGroup
key
label
meta
Markeridentifier.
Type
int
Markerlabel.
Type
str
Markermeta data.
87
Metashape Python Reference, Release 2.1.1
Type
Metashape.MetaData
position
Markerpositionin thecurrentframe.
Type
Metashape.Vector
position_covariance
Markerpositioncovariance.
Type
Metashape.Matrix
projections
Listofmarkerprojections.
Type
Metashape.Marker.Projections
reference
Markerreferencedata.
Type
Metashape.Marker.Reference
selected
Selects/deselects themarker.
Type
bool
sensor
Fiducial marksensor.
Type
Metashape.Sensor
type
Markertype.
Type
Metashape.Marker.Type
class Metashape.MarkerGroup
MarkerGroup objects define groups of multiple markers. The grouping is established by assignment of a Mark-
erGroupinstanceto theMarker.groupattribute of participatingmarkers.
key
label
Markergroup identifier.
Type
int
Markergroup label.
Type
str
88 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
selected
Current selectionstate.
Type
bool
class Metashape.Mask
Mask instance
copy()
Returns acopy ofthe mask.
Returns
Copyofthe mask.
Return type
Metashape.Mask
image()
Returnsimage data.
Returns
Imagedata.
Return type
Metashape.Image
invert()
Createinverted copyof themask.
Returns
Invertedcopyofthemask.
Return type
Metashape.Mask
load(path[, layer])
Loads maskfromfile.
Parameters
• path (str)–Path tothe image file tobeloaded.
• layer (int)– Optional layerindexin case ofmultipage files.
setImage(image)
Parameters
image (Metashape.Image) – Image object with mask data.
class Metashape.MaskOperation
Mask operation in [MaskOperationReplacement, MaskOperationUnion, MaskOperationIntersection, MaskOp-
erationDifference]
class Metashape.MaskingMode
Maskingmodein[MaskingModeAlpha, MaskingModeFile, MaskingModeBackground,MaskingModeModel]
class Metashape.Masks
A setof masks for achunk frame.
items()
Listofitems.
89
Metashape Python Reference, Release 2.1.1
keys()
List of itemkeys.
meta
Thumbnails meta data.
Type
Metashape.MetaData
modified
Modifiedflag.
Type
bool
values()
Listofitemvalues.
class Metashape.Matrix
m-by-n matrix
>>> import Metashape
>>> m1 = Metashape.Matrix.Diag( (1,2,3,4) )
>>> m3 = Metashape.Matrix( [[1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4]] )
>>> m2 = m1.inv()
>>> m3 = m1 * m2
>>> x = m3.det()
>>> if x == 1:
... Metashape.app.messageBox("Diagonal matrix dimensions: " + str(m3.size))
Diag(vector)
Create adiagonal matrix.
Parameters
vector (Metashape.Vector | list[float]) – The vectorof diagonal entries.
Returns
Adiagonalmatrix.
Return type
Metashape.Matrix
Rotation(matrix)
Createarotation matrix.
Parameters
matrix (Metashape.Matrix) – The 3x3 rotation matrix.
Returns
4x4matrixrepresenting rotation.
Return type
Metashape.Matrix
Scale(scale)
Create ascale matrix.
Parameters
scale (Metashape.Vector) – The scalevector.
90 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Returns
Amatrix representingscale.
Return type
Metashape.Matrix
Translation(vector)
Createa translation matrix.
Parameters
vector (Metashape.Vector) – The translation vector.
Returns
Amatrix representing translation.
Return type
Metashape.Matrix
col(index)
Returnscolumnofthematrix.
Returns
matrix column.
Return type
Metashape.Vector
copy()
Returns acopy ofthis matrix.
Returns
aninstanceofitself
Return type
Metashape.Matrix
det()
Return thedeterminantofa matrix.
Returns
Return a the determinant of a matrix.
Return type
float
inv()
Returnsaninverted copy of the matrix.
Returns
invertedmatrix.
Return type
Metashape.Matrix
mulp(point)
Transforms apointinhomogeneous coordinates.
Parameters
point (Metashape.Vector) – The pointto be transformed.
Returns
transformed point.
91
Metashape Python Reference, Release 2.1.1
Return type
Metashape.Vector
mulv(vector)
Transformsvectorinhomogeneous coordinates.
Parameters
vector (Metashape.Vector) – The vector to be transformed.
Returns
transformed vector.
Return type
Metashape.Vector
rotation()
Returnsrotationcomponent of the 4x4matrix.
Returns
rotationcomponent
Return type
Metashape.Matrix
row(index)
Returns row of thematrix.
Returns
matrix row.
Return type
Metashape.Vector
scale()
Returnsscalecomponent of the4x4matrix.
Returns
scale component
Return type
float
size
svd()
Matrixdimensions.
Type
tuple
Returns singularvalue decomposition of the matrix.
Returns
u, s,v tuple where a =u* diag(s) * v
Return type
tuple[Metashape.Matrix, Metashape.Vector,Metashape.Matrix]
t()
Return a new,transposed matrix.
Returns
atransposedmatrix
92 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Return type
Metashape.Matrix
translation()
Returnstranslationcomponent ofthe 4x4matrix.
Returns
translationcomponent
Return type
Metashape.Vector
zero()
Set all matrix elements tozero.
class Metashape.MetaData(object)
Collectionofobject properties
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.MetaData
items()
Listofitems.
keys()
List of item keys.
values()
Listofitem values.
class Metashape.Model
Triangular meshmodelinstance
class Face
Triangularfaceofthe model
hidden
Face visibility flag.
Type
bool
selected
Face selection flag.
Type
bool
tex_index
Texture pageindex.
Type
int
93
Metashape Python Reference, Release 2.1.1
tex_vertices
Texturevertexindices.
Type
tuple[int,int,int]
vertices
Vertexindices.
Type
tuple[int,int,int]
class Faces
Collectionofmodel faces
resize(count)
Resize faceslist.
Parameters
count (int)– newface count
class Statistics
Model statistics
components
Numberof connected components.
Type
int
degenerate_faces
Numberof degenerate faces.
Type
int
duplicate_faces
Numberof duplicate faces.
Type
int
faces
Totalnumberoffaces.
Type
int
flipped_normals
Numberof edgeswithflipped normals.
Type
int
free_vertices
Numberof free vertices.
Type
int
invalid_vertices
Numberof verticeswithNaN coordinates.
Type
int
94 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
multiple_edges
Type
int
Numberof edgesconnectingmorethan 2 faces.
open_edges
Numberof openedges.
Type
int
out_of_range_indices
Numberof outofrangeindices.
Type
int
similar_vertices
Numberof similar vertices.
Type
int
vertices
Totalnumberofvertices.
Type
int
zero_faces
Numberof zerofaces.
Type
int
class TexVertex
Texturevertexofthemodel
coord
2Dvertex coordinates.
Type
Metashape.Vector
class TexVertices
Collectionofmodeltexture vertices
resize(count)
Resize vertex list.
Parameters
count (int)– newvertex count
class Texture
Model texture.
image(page=0)
Return textureimage.
Parameters
Returns
Textureimage.
Return type
Metashape.Image
page (int)– Textureindex for multitextured models.
95
Metashape Python Reference, Release 2.1.1
label
meta
Animationlabel.
Type
str
Cameratrackmetadata.
Type
Metashape.MetaData
model
Model the texture belongsto.
Type
Metashape.Model
setImage(image,page=0)
Initializetexturefromimagedata.
Parameters
• image (Metashape.Image) – Texture image.
• page (int)– Texture index for multitextured models.
type
Texture type.
Type
Metashape.Model.TextureType
class TextureType
Texturetypein [DiffuseMap,NormalMap, OcclusionMap, DisplacementMap]
class Vertex
Vertexof the model
color
Vertex color.
Type
tuple of numbers
confidence
Vertex confidence.
Type
float
coord
Vertex coordinates.
Type
Metashape.Vector
class Vertices
Collectionofmodel vertices
resize(count)
Resizevertexlist.
Parameters
count (int)–new vertex count
96 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
addTexture(type=Model.DiffuseMap)
Add newtexture tothemodel.
Parameters
type (Metashape.Model.TextureType) – Texture type.
Returns
Createdtexture.
Return type
Metashape.Model.Texture
area()
Returnareaofthe model surface.
Returns
Model area.
Return type
float
bands
Listofcolorbands.
Type
list[str]
clear()
Clearsmodeldata.
closeHoles(level=30,apply_to_selection=False)
Fillholes inthemodel surface.
Parameters
• level (int)–Holesizethresholdin percents.
• apply_to_selection (bool) – Close holes within selection
copy()
Create acopyofthe model.
Returns
Copyofthe model.
Return type
Metashape.Model
cropSelection()
Cropselected facesandfreevertices from the mesh.
crs
Reference coordinate system.
Type
Metashape.CoordinateSystem |None
data_type
Data typeusedto storecolorvalues.
Type
Metashape.DataType
97
Metashape Python Reference, Release 2.1.1
faces
Collectionof modelfaces.
Type
Metashape.Model.Faces
fixTopology()
Removepolygons causing topological problems.
getActiveTexture(type=Model.DiffuseMap)
Return activetexture.
Parameters
type (Metashape.Model.TextureType) – Texture type.
Returns
Textureimage.
Return type
Metashape.Image
group
Model group.
Type
Metashape.ModelGroup
key
Model identifier.
Type
int
label
Model label.
Type
str
loadTexture(path)
Loadtexture from thespecified file.
Parameters
path (str)–Path tothe image file.
meta
Model metadata.
Type
Metashape.MetaData
modified
Modifiedflag.
Type
bool
pickPoint(origin,target, endpoints=1)
Return rayintersectionwithmesh.
Parameters
98 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
• origin (Metashape.Vector) – Ray origin.
• target (Metashape.Vector) – Point onthe ray.
• endpoints (int)–Numberof endpoints tocheckfor(0 - line,1- ray, 2 -segment).
Returns
Coordinates oftheintersection point.
Return type
Metashape.Vector
remove(items)
Removetexturesfromthemodel.
Parameters
items (list[Metashape.Model.Texture]) – A list of textures to be removed.
removeComponents(size)
Removesmallconnectedcomponents.
Parameters
size (int)– Thresholdon the polygon count ofthe components toberemoved.
removeSelection()
Removeselectedfaces andfreevertices from themesh.
removeTextures()
Removetextures.
removeUV()
RemoveUV mapping.
removeVertexColors()
Removevertexcolors.
removeVertexConfidence()
Removeconfidence.
renderDepth(transform,calibration, cull_faces=True,add_alpha=True)
Render modeldepth image forspecifiedviewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• cull_faces (bool)– Enable back-face culling.
• add_alpha (bool)– Generate image withalpha channel.
Returns
Renderedimage.
Return type
Metashape.Image
renderImage(transform, calibration,cull_faces=True, add_alpha=True,
raster_transform=RasterTransformNone)
Rendermodel image for specified viewpoint.
Parameters
99
Metashape Python Reference, Release 2.1.1
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• cull_faces (bool)–Enableback-faceculling.
• add_alpha (bool)–Generate imagewith alpha channel.
• raster_transform (Metashape.RasterTransformType) – Raster band transforma-
tion.
Returns
Renderedimage.
Return type
Metashape.Image
renderMask(transform,calibration,cull_faces=True)
Rendermodel maskimage for specifiedviewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• cull_faces (bool)– Enable back-face culling.
Returns
Renderedimage.
Return type
Metashape.Image
renderNormalMap(transform,calibration,cull_faces=True,add_alpha=True)
Render imagewith modelnormals for specified viewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• cull_faces (bool)– Enable back-face culling.
• add_alpha (bool)–Generate image with alpha channel.
Returns
Renderedimage.
Return type
Metashape.Image
renderPreview(width = 2048,height =2048[,transform][, progress])
Generatemodelpreviewimage.
Parameters
• width (int)– Preview image width.
• height (int)– Preview image height.
• transform (Metashape.Matrix) – 4x4 viewpoint transformation matrix.
• progress (Callable[[float], None]) – Progress callback.
100 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Returns
Previewimage.
Return type
Metashape.Image
saveTexture(path)
Savetexturetothespecified file.
Parameters
path (str)–Path tothe image file.
setActiveTexture(texture,type=Model.DiffuseMap)
Setactive texture.
Parameters
• texture (Metashape.Model.Texture) – Texture to set.
• type (Metashape.Model.TextureType) – Texture type.
setVertexColors(channels='RGB'
,datatype='U8')
Clear vertexcolors data andset layout.
Parameters
• channels (str)– color channellayout,e.g. ‘RGB’, ‘RGBA’, etc.
• datatype (str)– pixel data type in [‘U8’, ‘U16’, ‘U32’, ‘F16’, ‘F32’, ‘F64’]
statistics([progress])
Returnmodel statistics.
Parameters
progress (Callable[[float], None]) – Progress callback.
Returns
Model statistics.
Return type
Metashape.Model.Statistics
tex_vertices
Collectionofmodel texturevertices.
Type
Metashape.Model.TexVertices
textures
Listofmodeltextures.
Type
list[Metashape.Model.Texture]
transform
4x4modeltransformationmatrix.
Type
Metashape.Matrix
transformVertices(transform)
Transformvertexcoordinates.
101
Metashape Python Reference, Release 2.1.1
Parameters
transform (Metashape.Matrix) – 4x4 transformation matrix.
vertices
Collectionofmodelvertices.
Type
Metashape.Model.Vertices
volume()
Return volume of theclosedmodelsurface.
Returns
Model volume.
Return type
float
class Metashape.ModelFormat
Model format in [ModelFormatNone, ModelFormatOBJ, ModelFormat3DS, ModelFormatVRML, Mod-
elFormatPLY, ModelFormatCOLLADA, ModelFormatU3D, ModelFormatPDF, ModelFormatDXF, ModelFor-
matFBX, ModelFormatKMZ, ModelFormatCTM, ModelFormatSTL, ModelFormatDXF_3DF, ModelFormat-
TLS, ModelFormatABC, ModelFormatOSGB, ModelFormatOSGT, ModelFormatGLTF, ModelFormatX3D,
ModelFormatLandXML]
class Metashape.ModelGroup
ModelGroup objects define groups of multiple models. The grouping is established by assignment of a Model-
Group instanceto theModel.groupattributeof participating models.
key
Model group identifier.
Type
int
label
Model group label.
Type
str
meta
Model groupmeta data.
Type
Metashape.MetaData
selected
Currentselectionstate.
Type
bool
class Metashape.NetworkClient
NetworkClient class provides access tothenetwork processing server andallows to create and manage tasks.
The followingexampleconnectstothe server and listsactivetasks:
102 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
>>> import Metashape
>>> client = Metashape.NetworkClient()
>>> client.connect('127.0.0.1')
>>> client.batchList()
abortBatch(batch_id)
Abort batch.
Parameters
batch_id (int)– Batch id.
abortWorker(worker_id)
Abortworker.
Parameters
worker_id (int)– Worker id.
batchInfo(batch_id,revision=0)
Getbatch information.
Parameters
• batch_id (int)– Batchid.
• revision (int)–Firstrevision to get.
Returns
Batch information.
Return type
dict
batchList(revision=0)
Getlist of batches.
Parameters
revision (int)– First revisiontoget.
Returns
Listofbatches.
Return type
dict
connect(host,port=5840)
Connect to the server.
Parameters
• host (str)–Serverhostname.
• port (int)– Communication port.
createBatch(path,tasks[,meta])
Createnew batch.
Parameters
• path (str)– Projectpathrelativeto root folder.
• tasks (list[Metashape.NetworkTask]) – List of processing tasks to execute.
• meta (Metashape.MetaData) – Batchmetadata.
103
Metashape Python Reference, Release 2.1.1
Returns
Batch id.
Return type
int
disconnect()
Disconnectfromtheserver.
exportBatches([batch_ids])
Exportcurrent stateofbatches.
Parameters
batch_ids (list[int]) –Listofbatch ids to export.
Returns
Batchesdata.
Return type
str
findBatch(path)
Get batchid basedon project path.
Parameters
path (str)– Projectpathrelative to root folder.
Returns
Batch id.
Return type
int
importBatches(data)
Importbatches fromexporteddata.
Parameters
data (str)– Batches data.
quitWorker(worker_id)
Quitworker.
Parameters
worker_id (int)– Worker id.
serverInfo(revision=0)
Getserver information.
Parameters
revision (int)– First revisiontoget.
Returns
Serverinformation.
Return type
dict
serverVersion()
Getserver version.
Returns
Server version.
104 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Return type
dict
setBatchPaused(batch_id, paused=True)
Setbatch pausedstate.
Parameters
• batch_id (int)– Batchid.
• paused (bool)–Paused state.
setBatchPriority(batch_id, priority)
Setbatch priority.
Parameters
• batch_id (int)– Batchid.
• priority (int)–Batchpriority(2-Highest,1-High,0-Normal,-1-Low,-2-Lowest).
setBatchWorkerLimit(batch_id,worker_limit)
Setworkerlimitofthe batch.
Parameters
• batch_id (int)– Batch id.
• worker_limit (int)– Worker limit of the batch(0- unlimited).
setMasterServer([host])
Set or reset masterserver.
Parameters
host (str)–Master server hostname.
setWorkerCapability(worker_id, capability)
Setworkercapability.
Parameters
• worker_id (int)– Worker id.
• capability (int)– Worker capability(1 -CPU, 2- GPU, 3- Any).
setWorkerCpuEnabled(worker_id, cpu_enabled)
SetworkerCPUenabledflag.
Parameters
• worker_id (int)– Worker id.
• cpu_enabled (bool)– CPU enabled flag.
setWorkerGpuMask(worker_id, gpu_mask)
SetworkerGPU mask.
Parameters
• worker_id (int)– Worker id.
• gpu_mask (int)– GPU devicemask.
105
Metashape Python Reference, Release 2.1.1
setWorkerPaused(worker_id,paused=True)
Setworkerpaused state.
Parameters
• worker_id (int)–Workerid.
• paused (bool)–Paused state.
setWorkerPriority(worker_id, priority)
Setworkerpriority.
Parameters
• worker_id (int)–Workerid.
• priority (int)–Workerpriority(2-Highest,1-High,0-Normal,-1-Low,-2-Lowest).
workerInfo(worker_id,revision=0)
Getworker information.
Parameters
• worker_id (int)–Workerid.
• revision (int)– First revisiontoget.
Returns
Workerinformation.
Return type
dict
workerList(revision=0)
Getlist ofworkers.
Parameters
revision (int)–First revision to get.
Returns
Listofworkers.
Return type
dict
class Metashape.NetworkTask
NetworkTaskclasscontainsinformationaboutnetwork taskand itsparameters.
The followingexamplecreatesa newprocessingtask and submitsit to the server:
>>> import Metashape
>>> task = Metashape.NetworkTask()
>>> task.name =
'MatchPhotos'
>>> task.params['keypoint_limit'] = 40000
>>> client = Metashape.NetworkClient()
>>> client.connect('127.0.0.1')
>>> batch_id = client.createBatch('processing/project.psx', [task])
>>> client.setBatchPaused(batch_id, false)
chunks
Listofchunks.
106 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
list
encode()
Createadictionary withtaskparameters.
frames
Listofframes.
Type
list
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
params
Taskparameters.
Type
dict
class Metashape.OrthoProjection
Orthographicprojection.
class Type
Projectiontypein[Planar,Cylindrical]
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.OrthoProjection
crs
Base coordinatesystem.
Type
Metashape.CoordinateSystem
matrix
Ortho transformation matrix.
Type
Metashape.Matrix
radius
Cylindricalprojectionradius.
Type
float
107
Metashape Python Reference, Release 2.1.1
transform(point,source, target)
Transformpointcoordinatesbetween coordinate systems.
Parameters
• point (Metashape.Vector) – 2D or3D point coordinates.
• source (Metashape.OrthoProjection | Metashape.CoordinateSystem) –
Sourcecoordinatesystem.
• target (Metashape.OrthoProjection | Metashape.CoordinateSystem)–Target
coordinate system.
Returns
Transformed point coordinates.
Return type
Metashape.Vector
type
Projectiontype.
Type
Metashape.OrthoProjection.Type
class Metashape.Orthomosaic
Orthomosaic data.
Thefollowingsampleassignstothefirstshapeinthechunktheimagefromthefirstcamerafortheorthomosaic
patch and updatesthemosaic:
>>> import Metashape
>>> chunk = Metashape.app.document.chunk
>>> ortho = chunk.orthomosaic
>>> camera = chunk.cameras[0]
>>> shape = chunk.shapes[0]
>>> patch = Metashape.Orthomosaic.Patch()
>>> patch.image_keys = [camera.key]
>>> ortho.patches[shape] = patch
>>> ortho.update()
class Patch
Orthomosaic patch.
copy()
Returnsa copyof thepatch.
Returns
Copyofthe patch.
Return type
Metashape.Orthomosaic.Patch
excluded
Excludedflag.
Type
bool
image_keys
Imagekeys.
108 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
list[int]
class Patches
A setoforthomosaicpatches.
items()
Listofitems.
keys()
Listofitemkeys.
values()
Listofitemvalues.
bands
Listofcolor bands.
Type
list[str]
bottom
Y coordinateofthebottom side.
Type
float
clear()
Clearsorthomosaic data.
copy()
Create acopyofthe orthomosaic.
Returns
Copy of theorthomosaic.
Return type
Metashape.Orthomosaic
crs
Coordinatesystem of orthomosaic.
Type
Metashape.CoordinateSystem
data_type
Data typeusedtostore colorvalues.
Type
Metashape.DataType
height
key
Orthomosaicheight.
Type
int
Orthomosaicidentifier.
109
Metashape Python Reference, Release 2.1.1
label
left
Type
int
Orthomosaic label.
Type
str
X coordinateoftheleftside.
Type
float
meta
Orthomosaic metadata.
Type
Metashape.MetaData
modified
Modifiedflag.
Type
bool
patches
Orthomosaicpatches.
Type
Metashape.Orthomosaic.Patches
projection
Orthomosaicprojection.
Type
Metashape.OrthoProjection
removeOrthophotos()
Remove orthorectified imagesfrom orthomosaic.
renderPreview(width= 2048,height= 2048[, progress])
Generate orthomosaicpreviewimage.
Parameters
• width (int)– Preview image width.
• height (int)–Previewimageheight.
• progress (Callable[[float], None]) – Progress callback.
Returns
Preview image.
Return type
Metashape.Image
reset([progress])
Reset all editstoorthomosaic.
110 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Parameters
progress (Callable[[float], resolution
Orthomosaic resolution in meters.
Type
float
right
X coordinateoftheright side.
Type
float
top
Y coordinateofthetopside.
Type
float
update([progress])
Applyeditstoorthomosaic.
Parameters
progress (Callable[[float], None]) – Progress callback.
None]) – Progress callback.
width
Orthomosaicwidth.
Type
int
class Metashape.Photo
Photo instance
alpha()
Returns alphachanneldata.
Returns
Alpha channel data.
Return type
Metashape.Image
copy()
Returnsacopy of thephoto.
Returns
Copyofthe photo.
Return type
Metashape.Photo
image([channels][,datatype])
Returnsimagedata.
Parameters
• datatype (str)–pixel data type in [‘U8’, ‘U16’,‘U32’,‘F16’, ‘F32’, ‘F64’]
• channels (str)–colorchannels to be loaded,e.g. ‘RGB’, ‘RGBA’, etc.
111
Metashape Python Reference, Release 2.1.1
Returns
Imagedata.
Return type
Metashape.Image
imageMeta()
Returns imagemetadata.
Returns
Imagemetadata.
Return type
Metashape.MetaData
layer
Layer indexinthe image file.
Type
int
meta
Framemetadata.
Type
Metashape.MetaData
open(path, layer=0)
Loadsspecified image file.
Parameters
• path (str)–Path tothe imagefile to be loaded.
• layer (int)– Layerindexin case of multipage files.
path
Pathtotheimagefile.
Type
str
thumbnail(width=192,height=192)
Creates new thumbnail withspecified dimensions.
Returns
Thumbnail data.
Return type
Metashape.Thumbnail
class Metashape.PointClass
Point class in [Created, Unclassified, Ground, LowVegetation, MediumVegetation, HighVegetation, Building,
LowPoint, ModelKeyPoint, Water, Rail, RoadSurface, OverlapPoints, WireGuard, WireConductor, Transmis-
sionTower,WireConnector,BridgeDeck,HighNoise,Car,Manmade]
class Metashape.PointCloud
Point cloud data.
assignClass(target=0[, source][,progress])
Assign class topoints.
112 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Parameters
• target (Metashape.PointClass) – Target class.
• source (Metashape.PointClass | list[Metashape.PointClass]) – Classes of
pointstobereplaced.
• progress (Callable[[float], None]) – Progress callback.
assignClassToSelection(target=0[, source][,progress])
Assign class toselected points.
Parameters
• target (Metashape.PointClass) – Target class.
• source (Metashape.PointClass | list[Metashape.PointClass]) – Classes of
pointstobereplaced.
• progress (Callable[[float], None]) – Progress callback.
bands
Listofcolor bands.
Type
list[str]
classifyGroundPoints(max_angle=10.0,max_distance=1.0,max_terrain_slope=10.0,cell_size=50.0,
erosion_radius=0.0[,source_class][,return_number], keep_existing=False[,
progress])
Classify points into ground andnon ground classes.
Parameters
• max_angle (float)– Maximumangle (degrees).
• max_distance (float) – Maximumdistance (meters).
• max_terrain_slope (float) – Maximumterrain slope angle(degrees).
• cell_size (float)– Cellsize (meters).
• erosion_radius (float) – Erosion radius(meters).
• source_class (Metashape.PointClass) – Class of pointsto be re-classified.
• return_number (int) – Point return number to use (0 - any return, 1 - first return, -1 -
lastreturn).
• keep_existing (bool) – Keep existing ground points.
• progress (Callable[[float], None]) – Progress callback.
classifyPoints([source][,target],confidence=0.0[,progress])
Multiclassclassification of points.
Parameters
• source (Metashape.PointClass) – Class of points to be re-classified.
• target (list[Metashape.PointClass]) – Target point classesforclassification.
• confidence (float)– Required confidence levelfrom 0.0 to 1.0.
• progress (Callable[[float], None]) – Progress callback.
113
Metashape Python Reference, Release 2.1.1
clear()
Clears pointclouddata.
compactPoints([progress])
Permanently removesdeletedpoints from point cloud.
Parameters
progress (Callable[[float], None]) – Progress callback.
component
Pointcloud component.
Type
Metashape.Component
copy()
Create a copy of thepointcloud.
Returns
Copy of thepointcloud.
Return type
Metashape.PointCloud
cropSelectedPoints([point_classes][, progress])
Crop selectedpoints.
Parameters
• point_classes (Metashape.PointClass | list[Metashape.PointClass]) –
Classesof points tobe removed.
• progress (Callable[[float], None]) – Progress callback.
crs
Reference coordinate system.
Type
Metashape.CoordinateSystem |None
data_type
Data typeusedto storecolorvalues.
Type
Metashape.DataType
enabled
Enables/disables thepointcloud.
Type
bool
group
Pointcloud group.
Type
Metashape.PointCloudGroup
is_laser_scan
Use pointcloud as laserscan.
114 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
bool
key
Pointcloud identifier.
Type
int
label
Pointcloud label.
Type
str
meta
Pointcloud meta data.
Type
Metashape.MetaData
modified
Modifiedflag.
Type
bool
pickPoint(origin,target,endpoints=1)
Returnsrayintersectionwith thepoint cloud (point onthe ray nearest tosome point).
Parameters
• origin (Metashape.Vector) – Ray origin.
• target (Metashape.Vector) – Point onthe ray.
• endpoints (int)–Numberof endpoints tocheckfor(0 - line,1- ray, 2 -segment).
Returns
Coordinates oftheintersection point.
Return type
Metashape.Vector
point_count
Number of pointsin point cloud.
Type
int
removePoints(point_classes[, progress])
Removepoints.
Parameters
• point_classes (Metashape.PointClass | list[Metashape.PointClass]) –
Classesof points tobe removed.
• progress (Callable[[float], None]) – Progress callback.
removeSelectedPoints([point_classes][,progress])
Removeselectedpoints.
Parameters
115
Metashape Python Reference, Release 2.1.1
• point_classes (Metashape.PointClass | list[Metashape.PointClass]) –
Classesof points tobe removed.
• progress (Callable[[float], None]) – Progress callback.
renderDepth(transform,calibration, point_size=1,resolution=1,cull_points=False,add_alpha=True)
Render point cloud depthimage forspecifiedviewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• point_size (int)–Point size.
• resolution (float)–Level of detail resolution in screen pixels.
• cull_points (bool)–Enable normal based culling.
• add_alpha (bool)– Generate image withalpha channel.
Returns
Renderedimage.
Return type
Metashape.Image
renderImage(transform, calibration,point_size=1, resolution=1, cull_points=False, add_alpha=True,
raster_transform=RasterTransformNone)
Renderpointcloudimage for specifiedviewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• point_size (int)–Point size.
• resolution (float)–Level of detail resolution in screen pixels.
• cull_points (bool)–Enable normal based culling.
• add_alpha (bool)–Generate imagewith alpha channel.
• raster_transform (Metashape.RasterTransformType) – Raster band transforma-
tion.
Returns
Renderedimage.
Return type
Metashape.Image
renderMask(transform,calibration, point_size=1, resolution=1, cull_points=False)
Render point cloud maskimagefor specified viewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• point_size (int)–Pointsize.
• resolution (float)–Level ofdetailresolution in screenpixels.
116 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
• cull_points (bool)–Enable normal based culling.
Returns
Renderedimage.
Return type
Metashape.Image
renderNormalMap(transform,calibration,point_size=1,resolution=1,cull_points=False,add_alpha=True)
Render imagewith pointcloud normals for specifiedviewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• point_size (int)–Pointsize.
• resolution (float)–Level ofdetailresolution in screenpixels.
• cull_points (bool)–Enablenormal based culling.
• add_alpha (bool)–Generate image with alpha channel.
Returns
Renderedimage.
Return type
Metashape.Image
renderPreview(width = 2048,height =2048[,transform],point_size=1[, progress])
Generatepointcloud preview image.
Parameters
• width (int)– Preview image width.
• height (int)–Previewimageheight.
• transform (Metashape.Matrix) – 4x4 viewpoint transformationmatrix.
• point_size (int)– Point size.
• progress (Callable[[float], None]) – Progress callback.
Returns
Preview image.
Return type
Metashape.Image
resetFilters()
Reset filters.
restorePoints([point_classes][,progress])
Restore deleted points.
Parameters
• point_classes (Metashape.PointClass | list[Metashape.PointClass]) –
Classesof points tobe restored.
• progress (Callable[[float], None]) – Progress callback.
117
Metashape Python Reference, Release 2.1.1
selectMaskedPoints(cameras,softness=4[, progress])
Select pointsbased onimage masks.
Parameters
• cameras (list[Metashape.Camera]) – A list of cameras to use for selection.
• softness (float)– Mask edge softness.
• progress (Callable[[float], None]) – Progress callback.
selectPointsByColor(color, tolerance=10,channels='RGB'[,progress])
Selectpoints basedon pointcolors.
Parameters
• color (list[int])–Colorto select.
• tolerance (int)–Color tolerance.
• channels (str) – Combination of color channels to compare in [‘R’, ‘G’, ‘B’, ‘H’, ‘S’,
‘V’].
• progress (Callable[[float], None]) – Progress callback.
selectPointsByShapes([shapes][,progress])
Selectpoints basedon shapes.
Parameters
• shapes (list[Metashape.Shape]) – A list of shapes to use for selection (selected
shapes ifnotspecified).
• progress (Callable[[float], None]) – Progress callback.
selected
Selects/deselectsthe point cloud.
Type
bool
setClassesFilter(point_classes)
Set filterby point classes.
Parameters
point classes.
point_classes (Metashape.PointClass | list[Metashape.PointClass])–Listof
setConfidenceFilter(min_confidence,max_confidence)
Setfilter byconfidence.
Parameters
• min_confidence (int) – Minimum confidencevalue.
• max_confidence (int) – Maximumconfidence value.
setSelectionFilter()
Set filterby selection.
transform
4x4 point cloudtransformation matrix.
Type
Metashape.Matrix
118 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
updateStatistics([progress])
Updatespointcloudstatistics.
Parameters
progress (Callable[[float], None]) – Progress callback.
class Metashape.PointCloudFormat
Point cloud format in [PointCloudFormatNone, PointCloudFormatOBJ, PointCloudFormatPLY, PointCloud-
FormatXYZ,PointCloudFormatLAS,PointCloudFormatExpe,PointCloudFormatU3D,PointCloudFormatPDF,
PointCloudFormatE57,PointCloudFormatOC3,PointCloudFormatPotree,PointCloudFormatLAZ,PointCloud-
FormatCL3, PointCloudFormatPTS, PointCloudFormatPTX, PointCloudFormatDXF, PointCloudFormatCe-
sium, PointCloudFormatPCD, PointCloudFormatSLPK, PointCloudFormatCOPC]
class Metashape.PointCloudGroup
PointCloudGroup objects define groups of multiple laser scans. The grouping is established by assignment of a
PointCloudGroupinstance tothePointCloud.group attribute ofparticipating laser scans.
crs
Reference coordinate system.
Type
Metashape.CoordinateSystem |None
fixed
key
label
meta
Fixrelative laser scan positions within thegroup.
Type
bool
Asset groupidentifier.
Type
int
Pointcloud group label.
Type
str
Asset groupmetadata.
Type
Metashape.MetaData
selected
Currentselectionstate.
Type
bool
transform
4x4 asset grouptransformation matrix.
Type
Metashape.Matrix
119
Metashape Python Reference, Release 2.1.1
class Metashape.Preselection
Image pairpreselectionin[NoPreselection,GenericPreselection, ReferencePreselection]
class Metashape.RPCModel
Rationalpolynomialmodel.
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.RPCModel
error(point,proj)
Returnsprojection error.
Parameters
• point (Metashape.Vector) – Coordinates ofthe pointto beprojected.
• proj (Metashape.Vector) – Pixel coordinates of the point.
Returns
2Dprojectionerror.
Return type
Metashape.Vector
image_offset
Imagecoordinate offset.
Type
Metashape.Vector
image_scale
Imagecoordinate scale.
Type
Metashape.Vector
line_den_coeff
Line denominator.
Type
Metashape.Vector
line_num_coeff
Line numerator.
Type
Metashape.Vector
load(path[,format])
Load RPC modelfromfile.
Parameters
• path (str)– Pathto RPCmodelfile.
• format (str) – RPC model file format in [‘rpc’, ‘rpb’, ‘dimap’]. Tiled DIMAP files are
notsupported.
120 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
object_offset
Object coordinate offset.
Type
Metashape.Vector
object_scale
Objectcoordinatescale.
Type
Metashape.Vector
project(point)
Returnsprojected pixelcoordinates ofthepoint.
Parameters
point (Metashape.Vector) – Coordinatesof the point to be projected.
Returns
2Dprojectedpointcoordinates.
Return type
Metashape.Vector
samp_den_coeff
Sample denominator.
Type
Metashape.Vector
samp_num_coeff
Sample numerator.
Type
Metashape.Vector
save(path[,format])
SaveRPCmodel to file.
Parameters
• path (str)– Pathto RPCmodelfile.
• format (str)– RPCmodel file formatin[‘rpc’,‘rpb’].
unproject(point)
Returnsdirectioncorresponding tothe image point.
Parameters
point (Metashape.Vector) – Pixel coordinates of the point.
Returns
3Dvectorin thecamera coordinate system.
Return type
Metashape.Vector
class Metashape.RasterFormat
Raster format in [RasterFormatNone, RasterFormatTiles, RasterFormatKMZ, RasterFormatXYZ, RasterFor-
matMBTiles,RasterFormatWW, RasterFormatTMS, RasterFormatGeoPackage]
121
Metashape Python Reference, Release 2.1.1
class Metashape.RasterTransform
Raster transformdefinition.
calibrateRange()
Auto detectrange based onorthomosaic histogram.
copy()
Returnacopyof theobject.
Returns
Acopyofthe object.
Return type
Metashape.RasterTransform
enabled
Enableflag.
Type
bool
false_color
False colorchannels.
Type
list
formula
Raster calculator expression.
Type
str
interpolation
Interpolationenable flag.
Type
bool
palette
Color palette.
Type
dict
range
Palette mappingrange.
Type
tuple
reset()
Reset raster transform.
class Metashape.RasterTransformType
Raster transformation type in[RasterTransformNone, RasterTransformValue,RasterTransformPalette]
class Metashape.ReferenceFormat
Reference format in [ReferenceFormatNone, ReferenceFormatXML, ReferenceFormatTEL, ReferenceFor-
matCSV,ReferenceFormatMavinci,ReferenceFormatBramor, ReferenceFormatAPM]
122 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
class Metashape.ReferenceItems
Reference items in[ReferenceItemsCameras,ReferenceItemsMarkers,ReferenceItemsScalebars]
class Metashape.ReferencePreselectionMode
Reference preselection mode in [ReferencePreselectionSource, ReferencePreselectionEstimated, ReferencePre-
selectionSequential]
class Metashape.Region
Region parameters
center
Regioncenter coordinates.
Type
Metashape.Vector
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.Region
rot
Regionrotationmatrix.
Type
Metashape.Matrix
size
Regionsize.
Type
Metashape.Vector
class Metashape.RotationOrder
Rotation order in [RotationOrderXYZ, RotationOrderXZY, RotationOrderYXZ, RotationOrderYZX, Rota-
tionOrderZXY,RotationOrderZYX]
class Metashape.Scalebar
Scale bar instance
class Reference
Scale barreference data
accuracy
Scale bar lengthaccuracy.
Type
float
distance
Scale bar length.
Type
float
123
Metashape Python Reference, Release 2.1.1
chunk
frames
enabled
Enabledflag.
Type
bool
Chunk the scalebar belongsto.
Type
Metashape.Chunk
Scale barframes.
Type
list[Metashape.Scalebar]
group
Scale bargroup.
Type
Metashape.ScalebarGroup
key
Scale baridentifier.
Type
int
label
Scale bar label.
Type
str
meta
Scale bar metadata.
Type
Metashape.MetaData
point0
Start ofthescale bar.
Type
Metashape.Marker |Metashape.Camera
point1
End of thescale bar.
Type
Metashape.Marker |Metashape.Camera
reference
Scale bar referencedata.
Type
Metashape.Scalebar.Reference
124 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
selected
Selects/deselects thescalebar.
Type
bool
class Metashape.ScalebarGroup
ScalebarGroup objects define groups of multiple scale bars. The grouping is established by assignment of a
ScalebarGroupinstanceto the Scalebar.group attribute ofparticipating scalebars.
key
Scale bargroupidentifier.
Type
int
label
Scale bargrouplabel.
Type
str
selected
Currentselection state.
Type
bool
class Metashape.Sensor
Sensor instance
class Reference
Sensor referencedata.
accuracy
Sensor locationaccuracy.
Type
Metashape.Vector
enabled
Locationenabledflag.
Type
bool
location
Sensor coordinates.
Type
Metashape.Vector
location_accuracy
Sensor locationaccuracy.
Type
Metashape.Vector
location_enabled
Locationenabledflag.
Type
bool
125
Metashape Python Reference, Release 2.1.1
rotation
Sensor rotation angles.
Type
Metashape.Vector
rotation_accuracy
Sensor rotation accuracy.
Type
Metashape.Vector
rotation_enabled
Rotation enabled flag.
Type
bool
class Type
antenna
Sensor typein [Frame, Fisheye, Spherical, Cylindrical, RPC]
GPSantennacorrection.
Type
Metashape.Antenna
bands
Listofcolor bands.
Type
list[str]
black_level
Black levelforeach band.
Type
list[float]
calibrateFiducials(resolution=0.014)
Fitfiducialcoordinates toimage measurements.
Parameters
resolution (float)– Scanningresolution inmm/pix.
calibration
Adjustedcalibrationofthe photo.
Type
Metashape.Calibration
chunk
Chunk the sensor belongs to.
Type
Metashape.Chunk
data_type
Data typeusedtostore colorvalues.
Type
Metashape.DataType
126 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
fiducials
Fiducial marks.
Type
list[Metashape.Marker]
film_camera
Filmcamera flag.
Type
bool
fixed
Fixcalibrationflag.
Type
bool
fixed_calibration
Fixcalibrationflag.
Type
bool
fixed_location
Fixlocation flag.
Type
bool
fixed_params
Listoffixedcalibration parameters.
Type
list[str]
fixed_rotation
Fixrotationflag.
Type
bool
focal_length
Focal lengthin mm.
Type
float
height
key
Imageheight.
Type
int
Sensor identifier.
Type
int
127
Metashape Python Reference, Release 2.1.1
label
Sensorlabel.
Type
str
layer_index
Sensor layerindex.
Type
int
location
Sensor planelocation.
Type
Metashape.Vector
location_covariance
Sensor planelocationcovariance.
Type
Metashape.Matrix
makeMaster()
Make this sensormaster in themulti-camera system.
master
Master sensor.
Type
Metashape.Sensor
meta
Sensor meta data.
Type
Metashape.MetaData
normalize_sensitivity
Enablesensitivitynormalization.
Type
bool
normalize_to_float
Convertpixelvaluesto floating point afternormalization.
Type
bool
photo_params
Listofimage-variant calibration parameters.
Type
list[str]
pixel_height
Pixel height inmm.
Type
float
128 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
pixel_size
Pixelsizein mm.
Type
Metashape.Vector
pixel_width
Pixelwidth inmm.
Type
float
planes
Sensor planes.
Type
list[Metashape.Sensor]
reference
Sensor referencedata.
Type
Metashape.Sensor.Reference
rolling_shutter
Enablerollingshuttercompensation.
Type
Metashape.Shutter.Model
rotation
Sensor planerotation.
Type
Metashape.Matrix
rotation_covariance
Sensor plane rotation covariance.
Type
Metashape.Matrix
sensitivity
Sensitivityfor each band.
Type
list[float]
type
Sensor projectionmodel.
Type
Metashape.Sensor.Type
user_calib
Custom calibrationusedasinitial calibration during photo alignment.
Type
Metashape.Calibration
129
Metashape Python Reference, Release 2.1.1
vignetting
Vignetting foreach band.
Type
list[Metashape.Vignetting]
width
Imagewidth.
Type
int
class Metashape.ServiceType
Servicetypein[ServiceSketchfab,ServiceMapbox,Service4DMapper,ServicePointscene,ServiceMelown,Ser-
vicePointbox,ServicePicterra,ServiceCesium]
class Metashape.Shape
Shape data.
class BoundaryType
Shape boundary type in[NoBoundary,OuterBoundary, InnerBoundary]
class Vertices
Collectionofshape vertices
area()
Returnarea of theshapeon DEM.
Returns
Shape area.
Return type
float
areaFitted()
Return2Darea ofthe shape projected onto the best fittingplane.
Returns
Shape area.
Return type
float
attributes
Shape attributes.
Type
Metashape.MetaData
boundary_type
Shape boundary type.
Type
Metashape.Shape.BoundaryType
geometry
Shape geometry.
Type
Metashape.Geometry |Metashape.AttachedGeometry
130 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
group
Shapegroup.
Type
Metashape.ShapeGroup
is_attached
Attachedflag.
Type
bool
key
Shape identifier.
Type
int
label
Shape label.
Type
str
perimeter2D()
Returnperimeterof theshapeon DEM.
Returns
Shape perimeter.
Return type
float
perimeter3D()
Returnperimeterof theshape.
Returns
Shape perimeter.
Return type
float
selected
Selects/deselectsthe shape.
Type
bool
volume(level='bestfit')
ReturnvolumeoftheshapemeasuredonDEMaboveandbelowbestfit,meanlevelorcustomlevelplane.
Parameters
level (float)–Planelevel: ‘bestfit’, ‘mean’or custom value.
Returns
Shape volumes.
Return type
dict
131
Metashape Python Reference, Release 2.1.1
class Metashape.ShapeGroup
ShapeGroup objects define groups of multiple shapes. The grouping is established by assignment of a Shape-
Group instance tothe Shape.groupattributeof participating shapes.
color
enabled
Shapegroupcolor.
Type
tuple[int,int,int,int]
Enableflag.
Type
bool
key
label
meta
Shapegroupidentifier.
Type
int
Shapegrouplabel.
Type
str
Shape groupmeta data.
Type
Metashape.MetaData
selected
Currentselection state.
Type
bool
show_labels
Shape labelsvisibility flag.
Type
bool
class Metashape.Shapes
A setof shapes for a chunkframe.
addGroup()
Addnewshapegroup totheset of shapes.
Returns
Createdshape group.
Return type
Metashape.ShapeGroup
addShape()
Addnewshapetothe setofshapes.
132 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
crs
group
Returns
Createdshape.
Return type
Metashape.Shape
Shapes coordinatesystem.
Type
Metashape.CoordinateSystem
Default shapegroup.
Type
Metashape.ShapeGroup
groups
Listofshape groups.
Type
items()
Listofitems.
meta
list[Metashape.ShapeGroup]
Shapesmetadata.
Type
Metashape.MetaData
modified
Modifiedflag.
Type
bool
projection
Shapesprojection.
Type
Metashape.OrthoProjection
remove(items)
Removeitemsfrom the shape layer.
Parameters
moved.
shapes
Listofshapes.
Type
list[Metashape.Shape]
updateAltitudes(items[, progress])
Updatealtitudesforitems.
Parameters
items (list[Metashape.Shape | Metashape.ShapeGroup])–Alistofitemstobere-
133
Metashape Python Reference, Release 2.1.1
• items (list[Metashape.Shape | Metashape.ShapeGroup]) – A list of items to be
updated.
• progress (Callable[[float], None]) – Progress callback.
class Metashape.ShapesFormat
Shapesformatin[ShapesFormatNone,ShapesFormatSHP,ShapesFormatKML,ShapesFormatDXF,ShapesFor-
matGeoJSON,ShapesFormatGeoPackage, ShapesFormatCSV]
class Metashape.Shutter
Shutter objectcontainsestimatedparameters ofthe rolling shutter correction model.
class Model
Rolling shuttermodelin [Disabled,Regularized, Full]
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.Shutter
rotation
Rotationmatrixofthe rollingshuttermodel.
Type
Metashape.Matrix
translation
Translationvector of therolling shuttermodel.
Type
Metashape.Vector
class Metashape.SurfaceType
Surfacetype in[Arbitrary,HeightField]
class Metashape.Target
Target parameters
code
coord
Target code.
Type
int
Target location.
Type
Metashape.Vector
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.Target
134 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
radius
Targetradius.
Type
float
class Metashape.TargetType
Target type in [CircularTarget12bit, CircularTarget14bit, CircularTarget16bit, CircularTarget20bit, CircularTar-
get, CrossTarget]
class Metashape.Tasks
Task classes.
class AddFrames
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
chunk
Chunk tocopy frames from.
Type
int
copy_depth_maps
Copydepth maps.
Type
bool
copy_elevation
CopyDEM.
Type
bool
copy_model
Copymodel.
Type
bool
copy_orthomosaic
Copyorthomosaic.
Type
bool
copy_point_cloud
Copypointcloud.
Type
bool
copy_tiled_model
Copytiled model.
135
Metashape Python Reference, Release 2.1.1
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
frames
Listofframe keysto copy.
Type
list[int]
gpu_support
GPU supportflag.
Type
bool
name
Task name.
Type
str
target
Task target.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Converttaskto Metashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])– Objectstobeprocessed.
workitem_count
Work item count.
Type
int
class AddPhotos
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
136 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
filegroups
Listoffile groups.
Type
list[int]
filenames
Listoffilesto add.
Type
list[str]
gpu_support
GPU supportflag.
Type
bool
group
Cameragroup key.
Type
int
layout
Imagelayout.
Type
Metashape.ImageLayout
load_reference
Load referencecoordinates.
Type
bool
load_rpc_txt
Type
bool
Load satellite RPCdata from auxiliary TXT files.
load_xmp_accuracy
Load accuracyfrom XMPmeta data.
Type
bool
load_xmp_antenna
Load GPS/INS offsetfromXMPmeta data.
Type
bool
137
Metashape Python Reference, Release 2.1.1
load_xmp_calibration
Load calibrationfromXMPmeta data.
Type
bool
load_xmp_orientation
Load orientation from XMPmetadata.
Type
bool
name
Taskname.
Type
str
strip_extensions
Strip fileextensionsfromcamera labels.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class AlignCameras
Task class containing processingparameters.
adaptive_fitting
Type
bool
Enableadaptive fitting ofdistortion coefficients.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to align.
Type
list[int]
138 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
min_image
Minimumnumberofpoint projections.
Type
int
name
Task name.
Type
str
point_clouds
Listofpoint cloudsto align.
Type
list[int]
reset_alignment
Reset currentalignment.
Type
bool
subdivide_task
Enablefine-level task subdivision.
Type
bool
target
Task target.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Converttaskto Metashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])– Objectstobeprocessed.
workitem_count
Work item count.
Type
int
139
Metashape Python Reference, Release 2.1.1
class AlignChunks
Taskclass containingprocessing parameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
chunks
Listofchunks tobe aligned.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
downscale
Type
int
Alignmentaccuracy(0-Highest,1-High, 2 - Medium, 4 -Low,8- Lowest).
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
filter_mask
Filterpoints bymask.
Type
bool
fit_scale
Fitchunk scaleduring alignment.
Type
bool
generic_preselection
Enablesimagepair preselection.
Type
bool
gpu_support
GPU supportflag.
Type
bool
keypoint_limit
Maximumnumberofpoints foreach photo.
Type
int
140 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
markers
Listofmarkersto beusedformarker based alignment.
Type
list[int]
mask_tiepoints
Apply mask filterto tie points.
Type
bool
method
Alignmentmethod (0 - point based, 1 - marker based, 2 -camerabased).
Type
int
name
Taskname.
Type
str
reference
Chunk to be used as areference.
Type
int
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class AnalyzeImages
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to be analyzed.
Type
list[int]
141
Metashape Python Reference, Release 2.1.1
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
filter_mask
Constrainanalyzed image region bymask.
Type
bool
gpu_support
GPU supportflag.
Type
bool
name
Task name.
Type
str
target
Task target.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Converttaskto Metashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])– Objectstobeprocessed.
workitem_count
Work item count.
Type
int
class BuildContours
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
142 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
interval
Contourinterval.
Type
float
max_value
Maximumvalueofcontourrange.
Type
float
min_value
Minimumvalue of contour range.
Type
float
name
Task name.
Type
str
prevent_intersections
Preventcontourintersections.
Type
bool
source_data
Source dataforcontour generation.
Type
Metashape.DataSource
target
Task target.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Converttaskto Metashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])– Objectstobeprocessed.
143
Metashape Python Reference, Release 2.1.1
workitem_count
Work item count.
Type
int
class BuildDem
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
classes
Type
list[int]
Listofpoint classes tobe usedfor surfaceextraction.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
flip_x
FlipXaxisdirection.
Type
bool
flip_y
FlipYaxisdirection.
Type
bool
flip_z
FlipZaxisdirection.
Type
bool
frames
Listofframes toprocess.
Type
list[int]
gpu_support
GPU supportflag.
Type
bool
144 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
interpolation
Interpolation mode.
Type
Metashape.Interpolation
max_workgroup_size
Maximumworkgroupsize.
Type
int
name
Taskname.
Type
str
projection
Output projection.
Type
Metashape.OrthoProjection
region
Region to be processed.
Type
Metashape.BBox
replace_asset
Replacedefaultassetwith generated DEM.
Type
bool
resolution
Output resolutioninmeters.
Type
float
source_data
Selects between pointcloudandtiepoints.
Type
Metashape.DataSource
subdivide_task
Enablefine-leveltasksubdivision.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
145
Metashape Python Reference, Release 2.1.1
workitem_count
Work item count.
Type
int
workitem_size_tiles
Numberof tilesin aworkitem.
Type
int
class BuildDepthMaps
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to process.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
downscale
Type
int
Depthmapquality (1 -Ultrahigh, 2 -High, 4 - Medium,8-Low, 16- Lowest).
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
filter_mode
Depthmapfiltering mode.
Type
Metashape.FilterMode
gpu_support
GPU supportflag.
Type
bool
max_neighbors
Type
int
Maximumnumberofneighbor imagestousefordepth mapgeneration.
146 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
max_workgroup_size
Maximumworkgroupsize.
Type
int
name
Taskname.
Type
str
reuse_depth
Enablereusedepth mapsoption.
Type
bool
subdivide_task
Enablefine-leveltasksubdivision.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
workitem_size_cameras
Number of camerasin a workitem.
Type
int
class BuildModel
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
blocks_crs
Blocks grid coordinatesystem.
Type
Metashape.CoordinateSystem
147
Metashape Python Reference, Release 2.1.1
blocks_origin
Blocks gridorigin.
Type
Metashape.Vector
blocks_size
Blocks size incoordinatesystemunits.
Type
float
build_texture
Generatepreview textures.
Type
bool
cameras
Listofcameras toprocess.
Type
list[int]
classes
Listofpointclassesto beusedforsurface extraction.
Type
list[int]
clip_to_boundary
Cliptoboundary shapes.
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
export_blocks
Exportcompletedblocks.
Type
bool
face_count
Target facecount.
Type
Metashape.FaceCount
face_count_custom
Custom facecount.
Type
int
148 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
frames
Listofframes toprocess.
Type
list[int]
gpu_support
GPU supportflag.
Type
bool
interpolation
Interpolation mode.
Type
Metashape.Interpolation
keep_depth
Enablestoredepth mapsoption.
Type
bool
max_workgroup_size
Maximumworkgroupsize.
Type
int
name
Taskname.
Type
str
output_folder
Pathtooutputfolder.
Type
str
replace_asset
Replacedefaultassetwith generated model.
Type
bool
source_data
Type
Selects between pointcloud, tie points, depth mapsand laser scans.
Metashape.DataSource
split_in_blocks
Splitmodelinblocks.
Type
bool
subdivide_task
Enablefine-leveltasksubdivision.
Type
bool
149
Metashape Python Reference, Release 2.1.1
surface_type
Type ofobjecttobereconstructed.
Type
Metashape.SurfaceType
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
trimming_radius
Trimmingradius(no trimming ifzero).
Type
int
vertex_colors
Enablevertex colors calculation.
Type
bool
vertex_confidence
Enablevertex confidence calculation.
Type
bool
volumetric_masks
Enablestrictvolumetricmasking.
Type
bool
workitem_count
Work item count.
Type
int
workitem_size_cameras
Number of camerasin a workitem.
Type
int
class BuildOrthomosaic
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
150 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
blending_mode
Orthophoto blendingmode.
Type
Metashape.BlendingMode
cull_faces
Enableback-faceculling.
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
fill_holes
Enableholefilling.
Type
bool
flip_x
FlipXaxisdirection.
Type
bool
flip_y
FlipYaxisdirection.
Type
bool
flip_z
FlipZaxisdirection.
Type
bool
frames
Listofframes toprocess.
Type
list[int]
ghosting_filter
Enableghosting filter.
Type
bool
gpu_support
GPU supportflag.
Type
bool
151
Metashape Python Reference, Release 2.1.1
max_workgroup_size
Maximumworkgroupsize.
Type
int
name
Taskname.
Type
str
projection
Output projection.
Type
Metashape.OrthoProjection
refine_seamlines
Refine seamlines based onimage content.
Type
bool
region
Region to be processed.
Type
Metashape.BBox
replace_asset
Type
bool
Replacedefaultassetwith generated orthomosaic.
resolution
Pixel sizein meters.
Type
float
resolution_x
Type
float
Pixel sizein theX dimensioninprojected units.
resolution_y
Type
float
Pixel sizein theY dimensioninprojected units.
subdivide_task
Enablefine-leveltasksubdivision.
Type
bool
surface_data
Orthorectification surface.
Type
Metashape.DataSource
152 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
workitem_size_cameras
Number of camerasin a workitem.
Type
int
workitem_size_tiles
Number of tilesina workitem.
Type
int
class BuildPanorama
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
blending_mode
Panoramablending mode.
Type
Metashape.BlendingMode
camera_groups
Listofcamera groupstoprocess.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
153
Metashape Python Reference, Release 2.1.1
encodeJSON()
CreateaJSONstring withtaskparameters.
frames
Listofframes toprocess.
Type
list[int]
ghosting_filter
Enableghosting filter.
Type
bool
gpu_support
GPU supportflag.
Type
bool
height
Height of outputpanorama.
Type
int
name
Taskname.
Type
str
region
Region to be generated.
Type
Metashape.BBox
rotation
Panorama3x3 orientationmatrix.
Type
Metashape.Matrix
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
width
Width of outputpanorama.
Type
int
workitem_count
Work item count.
154 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
int
class BuildPointCloud
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
asset
Asset toprocess.
Type
int
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
frames
Listofframes toprocess.
Type
list[int]
gpu_support
GPU supportflag.
Type
bool
keep_depth
Enablestoredepth mapsoption.
Type
bool
max_neighbors
Type
int
Maximumnumberofneighbor imagestousefordepth mapfiltering.
max_workgroup_size
Maximumworkgroupsize.
Type
int
155
Metashape Python Reference, Release 2.1.1
name
Taskname.
Type
str
point_colors
Enablepointcolorscalculation.
Type
bool
point_confidence
Enablepointconfidencecalculation.
Type
bool
points_spacing
Desiredpointspacing (m).
Type
float
replace_asset
Type
bool
Replacedefaultassetwith generated point cloud.
source_data
Sourcedatatoextractpoints from.
Type
Metashape.DataSource
subdivide_task
Enablefine-leveltasksubdivision.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
uniform_sampling
Enableuniform point sampling.
Type
bool
workitem_count
Work item count.
Type
int
156 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
workitem_size_cameras
Numberof cameras inaworkitem.
Type
int
class BuildSeamlines
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
epsilon
Contour simplificaion threshold.
Type
float
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task to Metashape.NetworkTask to be applied to specified objects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
157
Metashape Python Reference, Release 2.1.1
Type
int
class BuildTexture
Task class containing processingparameters.
anti_aliasing
Anti-aliasing coefficient forbaking
Type
int
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
blending_mode
Texture blendingmode.
Type
Metashape.BlendingMode
cameras
Alistof camerasto be used for texturing.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
fill_holes
Enableholefilling.
Type
bool
ghosting_filter
Enableghosting filter.
Type
bool
gpu_support
GPU supportflag.
Type
bool
158 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
max_workgroup_size
Maximumworkgroupsize(block modelonly).
Type
int
name
Taskname.
Type
str
source_model
Sourcemodel.
Type
int
target
Tasktarget.
Type
Metashape.Tasks.TargetType
texture_size
Texturepagesize.
Type
int
texture_type
Texturetype.
Type
Metashape.Model.TextureType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
transfer_texture
Transfertexture.
Type
bool
workitem_count
Work item count.
Type
int
workitem_size_cameras
Number of camerasin a workitem (blockmodel only).
Type
int
class BuildTiledModel
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
159
Metashape Python Reference, Release 2.1.1
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
classes
Listofpoint classes tobe usedfor surfaceextraction.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
face_count
Type
int
Numberof facespermegapixel of texture resolution.
frames
Listofframes toprocess.
Type
list[int]
ghosting_filter
Enableghosting filter.
Type
bool
gpu_support
GPU supportflag.
Type
bool
keep_depth
Enablestoredepth mapsoption.
Type
bool
max_workgroup_size
Maximumworkgroupsize.
Type
int
merge
Mergetiledmodel flag.
Type
bool
160 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
name
Taskname.
Type
str
operand_asset
Operandasset key.
Type
int
operand_chunk
Operandchunk key.
Type
int
operand_frame
Operandframekey.
Type
int
pixel_size
Target model resolutioninmeters.
Type
float
replace_asset
Type
bool
Replacedefaultassetwith generated tiled model.
source_data
Selects between pointcloudandmesh.
Type
Metashape.DataSource
subdivide_task
Enablefine-leveltasksubdivision.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
tile_size
Size oftilesinpixels.
Type
int
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
161
Metashape Python Reference, Release 2.1.1
transfer_texture
Transfersource model texture totiled model.
Type
bool
workitem_count
Work item count.
Type
int
workitem_size_cameras
Numberof cameras inaworkitem.
Type
int
class BuildUV
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
camera
Cameratobeusedfortexturing in CameraMapping mode.
Type
int
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
mapping_mode
Texturemapping mode.
Type
Metashape.MappingMode
name
Taskname.
Type
str
162 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
page_count
Numberof texturepages togenerate.
Type
int
pixel_size
Textureresolution inmeters.
Type
float
target
Tasktarget.
Type
Metashape.Tasks.TargetType
texture_size
Type
int
Expectedsize of texture page attexturegenerationstep.
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class CalculatePointNormals
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
163
Metashape Python Reference, Release 2.1.1
Type
bool
name
Taskname.
Type
str
point_cloud
Pointcloud key toprocess.
Type
int
point_neighbors
Type
int
Numberof pointneighbors touse for normal estimation.
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class CalibrateCamera
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
border
Border sizeto ignore.
Type
int
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
164 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
fit_b1
Enableoptimization ofaspectratio.
Type
bool
fit_b2
Enableoptimization ofskewcoefficient.
Type
bool
fit_cxcy
Type
bool
Enableoptimization ofprincipalpoint coordinates.
fit_f
Enableoptimization offocal length coefficient.
Type
bool
fit_k1
Type
bool
Enableoptimization ofk1 radial distortion coefficient.
fit_k2
Type
bool
Enableoptimization ofk2 radial distortion coefficient.
fit_k3
Type
bool
Enableoptimization ofk3 radial distortion coefficient.
fit_k4
Type
bool
Enableoptimization ofk4 radial distortion coefficient.
fit_p1
Type
bool
Enableoptimization ofp1 tangentialdistortion coefficient.
fit_p2
Type
bool
Enableoptimization ofp2 tangentialdistortion coefficient.
165
Metashape Python Reference, Release 2.1.1
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class CalibrateColors
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to process.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
166 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
bool
name
Taskname.
Type
str
source_data
Sourcedatafor calibration.
Type
Metashape.DataSource
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
white_balance
Calibratewhitebalance.
Type
bool
workitem_count
Work item count.
Type
int
class CalibrateReflectance
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
167
Metashape Python Reference, Release 2.1.1
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
use_reflectance_panels
Use calibratedreflectance panels.
Type
bool
use_sun_sensor
Apply irradiancesensormeasurements.
Type
bool
workitem_count
Work item count.
Type
int
class ClassifyGroundPoints
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cell_size
Cell size (meters).
Type
float
decode(dict)
Initializetaskparameters witha dictionary.
168 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
erosion_radius
Erosionradius(meters).
Type
float
gpu_support
GPU supportflag.
Type
bool
keep_existing
Keep existinggroundpoints.
Type
bool
max_angle
Maximumangle (degrees).
Type
float
max_distance
Maximumdistance(meters).
Type
float
max_terrain_slope
Maximumterrainslope angle(degrees).
Type
float
name
Task name.
Type
str
point_cloud
Pointcloud key to classify.
Type
int
return_number
Type
int
Pointreturnnumber touse (0 - anyreturn, 1 - first return,-1 -lastreturn).
source_class
Class ofpointstobe re-classified.
169
Metashape Python Reference, Release 2.1.1
Type
int
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ClassifyPoints
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
confidence
Requiredconfidencelevel.
Type
float
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
170 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
point_cloud
Pointcloud key toclassify.
Type
int
source_class
Class of pointsto bere-classified.
Type
int
subdivide_task
Enablefine-leveltasksubdivision.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
target_classes
Target pointclassesforclassification.
Type
list[int]
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class CloseHoles
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
apply_to_selection
Close holes withinselection.
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
171
Metashape Python Reference, Release 2.1.1
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
level
Hole size thresholdinpercents.
Type
int
name
Task name.
Type
str
target
Task target.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Converttaskto Metashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])– Objectstobeprocessed.
workitem_count
Work item count.
Type
int
class ColorizeModel
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
172 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
model
Key ofmodelto colorize.
Type
int
name
Taskname.
Type
str
source_data
Sourcedatatoextractcolors from.
Type
Metashape.DataSource
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ColorizePointCloud
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
173
Metashape Python Reference, Release 2.1.1
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
max_workgroup_size
Maximumworkgroup size.
Type
int
name
Task name.
Type
str
point_cloud
Pointcloud key to colorize.
Type
int
source_data
Source datato extract colorsfrom.
Type
Metashape.DataSource
subdivide_task
Enablefine-level task subdivision.
Type
bool
target
Task target.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Converttaskto Metashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])– Objectstobeprocessed.
workitem_count
Work item count.
Type
int
workitem_size_cameras
Number of camerasin a workitem.
174 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
int
class CompactPointCloud
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
point_cloud
Pointcloud key toprocess.
Type
int
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task to Metashape.NetworkTask to be applied to specified objects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
175
Metashape Python Reference, Release 2.1.1
class ConvertImages
Taskclass containingprocessing parameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to process.
Type
list[int]
color_correction
Apply color correction.
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
image_compression
Imagecompressionparameters.
Type
Metashape.ImageCompression
merge_planes
Mergemultispectralimages.
Type
bool
name
path
Taskname.
Type
str
Pathtooutputfile.
Type
str
176 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
update_gps_tags
Update GPS tags.
Type
bool
use_initial_calibration
Transformtoinitial calibration.
Type
bool
workitem_count
Work item count.
Type
int
class DecimateModel
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
apply_to_selection
Apply toselection.
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
face_count
Target facecount.
177
Metashape Python Reference, Release 2.1.1
Type
int
frames
Listofframes toprocess.
Type
list[int]
gpu_support
GPU supportflag.
Type
bool
model
Model toprocess.
Type
int
name
Taskname.
Type
str
replace_asset
Replacesource modelwith decimatedmodel.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class DetectFiducials
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to process.
178 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
fiducials_position_corners
Searchcornersforfiducials.
Type
bool
fiducials_position_sides
Searchsides forfiducials.
Type
bool
frame_detector
Detectframe.
Type
bool
frames
Listofframes to process.
Type
list[int]
generate_masks
Generate backgroundmasks.
Type
bool
generic_detector
Use generic detector.
Type
bool
gpu_support
GPU supportflag.
Type
bool
mask_dark_pixels
Mask out darkpixels nearframe edge.
Type
bool
name
Task name.
179
Metashape Python Reference, Release 2.1.1
Type
str
right_angle_detector
Use right angledetector.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
v_shape_detector
DetectV-shapefiducials.
Type
bool
workitem_count
Work item count.
Type
int
class DetectMarkers
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to process.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
180 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
filter_mask
Ignoremaskedimageregions.
Type
bool
frames
Listofframes toprocess.
Type
list[int]
gpu_support
GPU supportflag.
Type
bool
inverted
Detectmarkers onblack background.
Type
bool
maximum_residual
Type
float
Maximumresidualfornon-coded targetsin pixels.
minimum_dist
Type
int
Minimumdistancebetweentargets inpixels (CrossTargettypeonly).
minimum_size
Type
int
Minimumtarget radiusin pixels to be detected(CrossTargettype only).
name
Taskname.
Type
str
noparity
Disable paritychecking.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
target_type
Type oftargets.
Type
Metashape.TargetType
181
Metashape Python Reference, Release 2.1.1
toNetworkTask([objects])
ConverttasktoMetashape.NetworkTask to be applied to specified objects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
tolerance
Detectortolerance(0 -100).
Type
int
workitem_count
Work item count.
Type
int
class DetectPowerlines
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
max_quantization_error
Maximumallowed distancebetween polylineand smooth continuous curve.
Type
float
min_altitude
Type
float
Minimumaltitudeforreconstructed powerlines.
n_points_per_line
Maximumnumberofvertices perdetectedline.
182 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
int
name
Taskname.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
use_model
Use modelfor visibilitychecks.
Type
bool
workitem_count
Work item count.
Type
int
class DuplicateAsset
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
asset_key
Asset key.
Type
int
asset_type
Asset type.
Type
Metashape.DataSource
clip_to_boundary
Cliptoboundaryshapes.
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
183
Metashape Python Reference, Release 2.1.1
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Task name.
Type
str
target
Task target.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Converttaskto Metashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])– Objectstobeprocessed.
workitem_count
Work item count.
Type
int
class DuplicateChunk
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
chunk
Chunk tocopy.
Type
int
copy_depth_maps
Copydepth maps.
Type
bool
184 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
copy_elevations
Copy DEMs.
Type
bool
copy_keypoints
Copy keypoints.
Type
bool
copy_models
Copy models.
Type
bool
copy_orthomosaics
Copy orthomosaics.
Type
bool
copy_point_clouds
Copy point clouds.
Type
bool
copy_tiled_models
Copy tiledmodels.
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
frames
Listofframe keys tocopy.
Type
list[int]
gpu_support
GPU supportflag.
Type
bool
label
New chunk label.
Type
str
185
Metashape Python Reference, Release 2.1.1
name
Taskname.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ExportCameras
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
binary
Type
bool
Enables/disablesbinaryencodingforselectedformat (if applicable).
bingo_path_geoin
Path toBINGOGEOINPUT file.
Type
str
bingo_path_gps
Path toBINGOGPS/IMU file.
Type
str
bingo_path_image
Path toBINGOIMAGE COORDINATEfile.
Type
str
bingo_path_itera
Path toBINGOITERA file.
Type
str
186 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
bingo_save_geoin
Type
bool
Enables/disables export of BINGO GEO INPUT file.
bingo_save_gps
Type
bool
Enables/disables export of BINGO GPS/IMU data.
bingo_save_image
Type
bool
Enables/disables export of BINGO IMAGE COORDINATEfile.
bingo_save_itera
Type
bool
Enables/disables export of BINGO ITERAfile.
bundler_path_list
PathtoBundlerimagelistfile.
Type
str
bundler_save_list
Type
bool
Enables/disables export of Bundler image list file.
chan_rotation_order
Rotation order(CHAN formatonly).
Type
Metashape.RotationOrder
crs
Output coordinatesystem.
Type
Metashape.CoordinateSystem
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
format
Exportformat.
Type
Metashape.CamerasFormat
187
Metashape Python Reference, Release 2.1.1
gpu_support
GPU supportflag.
Type
bool
image_orientation
Type
int
Imagecoordinate system(0-Xright,1- Xup,2-Xleft,3-Xdown).
name
Taskname.
Type
str
path
Pathtooutputfile.
Type
str
save_invalid_matches
Enables/disables export of invalidimagematches.
Type
bool
save_markers
Type
bool
Enables/disables export of manualmatching points.
save_points
Type
bool
Enables/disables export of automatic tie points.
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
use_initial_calibration
Transformimagecoordinates to initial calibration.
Type
bool
use_labels
Enables/disableslabelbaseditemidentifiers.
Type
bool
188 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
workitem_count
Work item count.
Type
int
class ExportMarkers
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
binary
Type
bool
Enables/disablesbinaryencodingforselectedformat (if applicable).
crs
Output coordinate system.
Type
Metashape.CoordinateSystem
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
path
Pathtooutputfile.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
189
Metashape Python Reference, Release 2.1.1
toNetworkTask([objects])
ConverttasktoMetashape.NetworkTask to be applied to specified objects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ExportMasks
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to process.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
path
Taskname.
Type
str
Pathtooutputfile.
Type
str
target
Tasktarget.
190 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ExportModel
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
binary
Type
bool
Enables/disablesbinaryencoding(ifsupported byformat).
clip_to_boundary
Clipmodeltoboundaryshapes.
Type
bool
colors_rgb_8bit
Convert colorsto8 bit RGB.
Type
bool
comment
Type
str
Optionalcomment (if supportedby selected format).
crs
Output coordinate system.
Type
Metashape.CoordinateSystem
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
191
Metashape Python Reference, Release 2.1.1
embed_texture
Type
bool
Embedstextureinside the model file(ifsupported byformat).
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
format
Exportformat.
Type
gltf_y_up
Type
bool
Metashape.ModelFormat
Enables/disables y-up axes notation used inglTF.
gpu_support
GPU supportflag.
Type
bool
model
Model keytoexport.
Type
int
name
Taskname.
Type
str
path
Pathtooutputmodel.
Type
str
precision
Type
int
Numberof digits afterthe decimal point (for textformats).
raster_transform
Raster bandtransformation.
Type
Metashape.RasterTransformType
save_alpha
Enables/disables alphachannelexport.
Type
bool
192 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
save_cameras
Enables/disables cameraexport.
Type
bool
save_colors
Enables/disables export of vertex colors.
Type
bool
save_comment
Enables/disables commentexport.
Type
bool
save_confidence
Enables/disables export of vertex confidence.
Type
bool
save_markers
Enables/disables marker export.
Type
bool
save_metadata_xml
Savemetadata.xmlfile.
Type
bool
save_normals
Enables/disables export of vertex normals.
Type
bool
save_texture
Enables/disables texture export.
Type
bool
save_udim
Enables/disables UDIM texture layout.
Type
bool
save_uv
Enables/disables uvcoordinates export.
Type
bool
shift
Optionalshiftto be applied to vertex coordinates.
Type
Metashape.Vector
193
Metashape Python Reference, Release 2.1.1
strip_extensions
Strips cameralabelextensionsduring export.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
texture_format
Textureformat.
Type
Metashape.ImageFormat
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
viewpoint
Defaultview.
Type
Metashape.Viewpoint
workitem_count
Work item count.
Type
int
class ExportOrthophotos
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to process.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
194 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
image_compression
Imagecompressionparameters.
Type
Metashape.ImageCompression
name
Taskname.
Type
str
north_up
Use north-up orientationforexport.
Type
bool
path
Pathtooutputorthophoto.
Type
str
projection
Output projection.
Type
Metashape.OrthoProjection
raster_transform
Raster bandtransformation.
Type
Metashape.RasterTransformType
region
Region to be exported.
Type
Metashape.BBox
resolution
Output resolutioninmeters.
Type
float
resolution_x
Type
float
Pixel sizein theX dimensioninprojected units.
resolution_y
Type
float
Pixel sizein theY dimensioninprojected units.
195
Metashape Python Reference, Release 2.1.1
save_alpha
Enablealpha channel generation.
Type
bool
save_kml
Enablekml file generation.
Type
bool
save_world
Enableworldfile generation.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
white_background
Enablewhite background.
Type
bool
workitem_count
Work item count.
Type
int
class ExportPointCloud
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
binary
Type
bool
Enables/disablesbinaryencodingforselectedformat (if applicable).
block_height
Block heightin meters.
Type
float
196 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
block_width
Block width inmeters.
Type
float
classes
Listofpointclassesto beexported.
Type
list[int]
clip_to_boundary
Clippoint cloudto boundary shapes.
Type
bool
colors_rgb_8bit
Convertcolorsto8bitRGB.
Type
bool
comment
Optionalcomment(ifsupported byselected format).
Type
str
compression
Enablecompression (Cesiumformat only).
Type
bool
crs
Output coordinatesystem.
Type
Metashape.CoordinateSystem
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
folder_depth
Type
int
Tileset subdivisiondepth (Cesium format only).
format
Exportformat.
Type
Metashape.PointCloudFormat
197
Metashape Python Reference, Release 2.1.1
gpu_support
GPU supportflag.
Type
bool
image_format
Imagedataformat.
Type
Metashape.ImageFormat
name
Taskname.
Type
str
path
Pathtooutputfile.
Type
str
point_cloud
Pointcloud key toexport.
Type
int
raster_transform
Raster bandtransformation.
Type
Metashape.RasterTransformType
region
Region to be exported.
Type
Metashape.BBox
save_comment
Enablecommentexport.
Type
bool
save_images
Enableimage export.
Type
bool
save_point_classification
Enables/disables export of pointclassification.
Type
bool
save_point_color
Enables/disables export of pointcolor.
Type
bool
198 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
save_point_confidence
Enables/disables export of pointconfidence.
Type
bool
save_point_index
Type
bool
Enables/disables export of pointrow andcolumn indices.
save_point_intensity
Enables/disables export of pointintensity.
Type
bool
save_point_normal
Enables/disables export of pointnormal.
Type
bool
save_point_return_number
Enables/disables export of pointreturn number.
Type
bool
save_point_scan_angle
Enables/disables export of pointscanangle.
Type
bool
save_point_source_id
Enables/disables export of pointsource ID.
Type
bool
save_point_timestamp
Enables/disables export of pointtimestamp.
Type
bool
screen_space_error
Target screenspace error(Cesium format only).
Type
float
shift
Optionalshiftto be applied to point coordinates.
Type
Metashape.Vector
source_data
Type
Selects between pointcloudandtiepoints. If notspecified,uses point cloud if available.
Metashape.DataSource
199
Metashape Python Reference, Release 2.1.1
split_in_blocks
Enabletiledexport.
Type
bool
subdivide_task
Enablefine-leveltasksubdivision.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
tileset_version
Type
str
Cesium 3D Tiles formatversiontoexport (1.0 or 1.1).
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
viewpoint
Defaultview.
Type
Metashape.Viewpoint
workitem_count
Work item count.
Type
int
class ExportRaster
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
asset
Asset keyto export.
Type
int
block_height
Raster block heightinpixels.
Type
int
200 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
block_width
Raster blockwidthin pixels.
Type
int
clip_to_boundary
Clipraster toboundary shapes.
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
description
Exportdescription.
Type
str
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
format
Exportformat.
Type
Metashape.RasterFormat
global_profile
Use globalprofile (GeoPackage formatonly).
Type
bool
gpu_support
GPU supportflag.
Type
bool
height
Raster height.
Type
int
image_compression
Imagecompressionparameters.
Type
Metashape.ImageCompression
image_description
Type
str
Optionaldescription tobeaddedtoimagefiles.
201
Metashape Python Reference, Release 2.1.1
image_format
Tile format.
Type
Metashape.ImageFormat
max_zoom_level
Type
int
Maximumzoomlevel(GeoPackage,GoogleMapTiles,MBTilesandWorldWindTilesformatsonly).
min_zoom_level
Type
int
Minimumzoomlevel(GeoPackage,GoogleMapTiles,MBTilesandWorldWindTilesformatsonly).
name
Taskname.
Type
str
network_links
Enablenetwork linksgenerationforKMZ format.
Type
bool
nodata_value
No-datavalue (DEM exportonly).
Type
float
north_up
Use north-up orientationforexport.
Type
bool
path
Pathtooutputorthomosaic.
Type
str
projection
Output projection.
Type
Metashape.OrthoProjection
raster_transform
Raster bandtransformation.
Type
Metashape.RasterTransformType
region
Region to be exported.
Type
Metashape.BBox
202 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
resolution
Output resolutioninmeters.
Type
float
resolution_x
Type
float
Pixel sizein theX dimensioninprojected units.
resolution_y
Type
float
Pixel sizein theY dimensioninprojected units.
save_alpha
Enablealpha channel generation.
Type
bool
save_kml
Enablekml file generation.
Type
bool
save_scheme
Enabletilescheme filesgeneration.
Type
bool
save_world
Enableworldfile generation.
Type
bool
source_data
Selects between DEM and orthomosaic.
Type
Metashape.DataSource
split_in_blocks
Splitrasterin blocks.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
tile_height
Tile height inpixels.
Type
int
203
Metashape Python Reference, Release 2.1.1
tile_width
Tile width inpixels.
Type
int
title
Exporttitle.
Type
str
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
white_background
Enablewhite background.
Type
bool
width
Raster width.
Type
int
workitem_count
Work item count.
Type
int
world_transform
2x3raster-to-world transformation matrix.
Type
Metashape.Matrix
class ExportReference
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
columns
Column order in csv format (n - label, o - enabled flag, x/y/z - coordinates, X/Y/Z - coordinate accu-
racy, a/b/c - rotation angles, A/B/C - rotation angle accuracy, u/v/w - estimated coordinates, U/V/W
- coordinate errors, d/e/f - estimated orientation angles, D/E/F - orientation errors, p/q/r - estimated
coordinates variance, i/j/k - estimated orientation angles variance, [] - group of multiple values, | -
column separator withingroup).
Type
str
204 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
delimiter
Column delimiter incsv format.
Type
str
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
format
Exportformat.
Type
Metashape.ReferenceFormat
gpu_support
GPU supportflag.
Type
bool
items
Items toexport inCSVformat.
Type
Metashape.ReferenceItems
name
Task name.
Type
str
path
Path totheoutputfile.
Type
str
precision
Type
int
Number of digitsafter thedecimalpoint (for CSVformat).
target
Task target.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Converttaskto Metashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])– Objectstobeprocessed.
205
Metashape Python Reference, Release 2.1.1
workitem_count
Work item count.
Type
int
class ExportReport
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
description
Report description.
Type
str
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
font_size
Fontsize(pt).
Type
int
gpu_support
GPU supportflag.
Type
bool
include_system_info
Includesysteminformation.
Type
bool
name
Taskname.
Type
str
page_numbers
Enablepage numbers.
Type
bool
206 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
path
Pathtooutputreport.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
title
Report title.
Type
str
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
user_settings
Type
Alistof userdefined settings to include on theProcessingParameterspage.
list[tuple[str,str]]
workitem_count
Work item count.
Type
int
class ExportShapes
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
crs
Output coordinate system.
Type
Metashape.CoordinateSystem
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
207
Metashape Python Reference, Release 2.1.1
encodeJSON()
CreateaJSONstring withtaskparameters.
format
Exportformat.
Type
Metashape.ShapesFormat
gpu_support
GPU supportflag.
Type
bool
groups
Alistofshape groupstoexport.
Type
list[int]
name
Taskname.
Type
str
path
Pathtoshape file.
Type
str
polygons_as_polylines
Savepolygons aspolylines.
Type
bool
save_attributes
Exportattributes.
Type
bool
save_labels
Exportlabels.
Type
bool
save_points
Exportpoints.
Type
bool
save_polygons
Exportpolygons.
Type
bool
save_polylines
Exportpolylines.
Type
bool
208 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
shift
Optionalshiftto be applied to vertex coordinates.
Type
Metashape.Vector
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ExportTexture
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
path
Pathtooutputfile.
209
Metashape Python Reference, Release 2.1.1
Type
str
raster_transform
Raster bandtransformation.
Type
Metashape.RasterTransformType
save_alpha
Enablealpha channel export.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
texture_type
Texturetype.
Type
Metashape.Model.TextureType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ExportTiledModel
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
clip_to_boundary
Cliptiledmodel toboundaryshapes.
Type
bool
crs
Output coordinate system.
Type
Metashape.CoordinateSystem
decode(dict)
Initializetaskparameters witha dictionary.
210 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
face_count
Type
int
Number of facesper megapixelof texture resolution (blockmodel export only).
folder_depth
Type
int
Tilesetsubdivision depth(Cesium format only).
format
Exportformat.
Type
Metashape.TiledModelFormat
gpu_support
GPU supportflag.
Type
bool
image_compression
Imagecompressionparameters.
Type
Metashape.ImageCompression
model_compression
Type
bool
Enablemeshcompression(Cesium format only).
model_format
Model formatforzipexport.
Type
Metashape.ModelFormat
model_group
Block modelkey toexport.
Type
int
name
path
Task name.
Type
str
Path tooutputmodel.
211
Metashape Python Reference, Release 2.1.1
Type
str
pixel_size
Type
float
Target model resolutioninmeters(blockmodel exportonly).
raster_transform
Raster bandtransformation.
Type
Metashape.RasterTransformType
screen_space_error
Target screenspace error(Cesium format only).
Type
float
target
Tasktarget.
Type
Metashape.Tasks.TargetType
texture_format
Textureformat.
Type
tile_size
Type
int
Metashape.ImageFormat
Size oftilesinpixels (blockmodel export only).
tiled_model
Tiled modelkeytoexport.
Type
int
tileset_version
Type
str
Cesium 3D Tiles formatversiontoexport (1.0 or 1.1).
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
use_tileset_transform
Use tileset transform insteadof individual tile transforms (Cesiumformat only).
Type
bool
workitem_count
Work item count.
212 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
int
class FilterPointCloud
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
frames
Listofframes toprocess.
Type
list[int]
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
point_cloud
Pointcloud key tofilter.
Type
int
point_spacing
Desiredpointspacing (m).
Type
float
replace_asset
Replacedefaultassetwith filtered point cloud.
Type
bool
213
Metashape Python Reference, Release 2.1.1
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class GenerateMasks
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
blur_threshold
Type
float
Allowedblurradiusona photo inpix (onlyif mask_defocus=True).
cameras
Optionallistof camerastobeprocessed.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
depth_threshold
Type
float
Maximumdepth of masked areasin meters (onlyif mask_defocus=False).
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
fix_coverage
Extend masks tocoverwhole mesh(only ifmask_defocus=True).
214 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
bool
gpu_support
GPU supportflag.
Type
bool
mask_defocus
Mask defocusareas.
Type
bool
mask_operation
Mask operation.
Type
Metashape.MaskOperation
masking_mode
Mask generation mode.
Type
Metashape.MaskingMode
name
path
Taskname.
Type
str
Mask file nametemplate.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
tolerance
Backgroundmaskingtolerance.
Type
int
workitem_count
Work item count.
Type
int
class GeneratePrescriptionMap
Task class containing processingparameters.
215
Metashape Python Reference, Release 2.1.1
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
boundary_shape_group
Boundary shape group.
Type
int
breakpoints
Classificationbreakpoints.
Type
list[float]
cell_size
Step ofprescriptiongrid, meters.
Type
float
class_count
Number of classes.
Type
int
classification_method
Index valuesclassification method.
Type
Metashape.ClassificationMethod
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
rates
Taskname.
Type
str
Fertilizerrateforeach class.
216 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
list[float]
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ImportCameras
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
crs
Groundcoordinate system.
Type
Metashape.CoordinateSystem
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
format
Fileformat.
Type
Metashape.CamerasFormat
gpu_support
GPU supportflag.
Type
bool
217
Metashape Python Reference, Release 2.1.1
image_list
Pathtoimage listfile(Bundler format only).
Type
str
image_orientation
Type
int
Imagecoordinate system(0-Xright,1- Xup,2-Xleft,3-Xdown).
load_image_list
EnableBundlerimage listimport.
Type
bool
name
Taskname.
Type
str
path
Pathtothefile.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ImportDepthImages
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
color_filenames
Listofcorrespondingcolorfiles,if present.
Type
list[str]
218 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
filenames
Listoffilesto import.
Type
list[str]
format
Pointcloud format.
Type
Metashape.PointCloudFormat
gpu_support
GPU supportflag.
Type
bool
image_path
Path template tooutput files.
Type
str
multiplane
Importas a multi-camera system
Type
bool
name
Task name.
Type
str
target
Task target.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Converttaskto Metashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])– Objectstobeprocessed.
workitem_count
Work item count.
Type
int
219
Metashape Python Reference, Release 2.1.1
class ImportMarkers
Taskclass containingprocessing parameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
path
Pathtothefile.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ImportModel
Task class containing processingparameters.
220 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
crs
Model coordinatesystem.
Type
Metashape.CoordinateSystem
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
decode_udim
Load UDIMtexture layout.
Type
bool
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
format
Model format.
Type
Metashape.ModelFormat
frame_paths
Type
list[str]
Listofmodel pathsto import ineach frameof a multiframe chunk.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
path
Pathtomodel.
Type
str
replace_asset
Replacedefaultassetwith importedmodel.
221
Metashape Python Reference, Release 2.1.1
Type
bool
shift
Optionalshiftto be applied to vertex coordinates.
Type
Metashape.Vector
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ImportPointCloud
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
calculate_normals
Calculatepointnormals.
Type
bool
crs
Pointcloud coordinatesystem.
Type
Metashape.CoordinateSystem
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
222 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
format
Pointcloud format.
Type
Metashape.PointCloudFormat
frame_paths
Type
list[str]
Listofpointcloudpaths to import in eachframeof a multiframechunk.
gpu_support
GPU supportflag.
Type
bool
ignore_normals
Ignorenormals inimported file.
Type
bool
ignore_scanner_origin
Donotuselaserscan origin as scanner position for structured pointclouds.
Type
bool
ignore_trajectory
Type
bool
Donotattach trajectory toimported point cloud.
import_images
Importimagesembeddedinlaser scan.
Type
bool
is_laser_scan
Importpoint clouds aslaser scans.
Type
bool
name
Taskname.
Type
str
path
Pathtopointcloud.
Type
str
point_neighbors
Type
int
Numberof pointneighbors touse for normal estimation.
223
Metashape Python Reference, Release 2.1.1
precision
Type
float
Coordinate precision (m). For default precisionuse0.
replace_asset
Type
bool
Replacedefaultassetwith importedpointcloud.
scanner_at_origin
Type
bool
Use laser scanoriginasscannerposition for unstructured pointclouds.
shift
Optionalshiftto be applied to point coordinates.
Type
Metashape.Vector
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
trajectory
Trajectorykeytoattach.
Type
int
workitem_count
Work item count.
Type
int
class ImportRaster
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
crs
Defaultcoordinate systemif not specifiedin GeoTIFF file.
Type
Metashape.CoordinateSystem
224 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
frames
Listofframes to process.
Type
list[int]
gpu_support
GPU supportflag.
Type
bool
has_nodata_value
No-datavalue valid flag.
Type
bool
name
Task name.
Type
str
nodata_value
No-datavalue.
Type
float
path
Path toelevationmodel inGeoTIFFformat.
Type
str
raster_type
Typeofraster layerto import.
Type
Metashape.DataSource
replace_asset
Replacedefault raster withimportedone.
Type
bool
target
Task target.
Type
Metashape.Tasks.TargetType
225
Metashape Python Reference, Release 2.1.1
toNetworkTask([objects])
ConverttasktoMetashape.NetworkTask to be applied to specified objects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ImportReference
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
columns
Columnorderincsvformat(n-label,o-enabledflag,x/y/z-coordinates,X/Y/Z-coordinateaccuracy,
a/b/c - rotation angles, A/B/C - rotation angle accuracy, [] - group of multiple values, | - column
separatorwithingroup).
Type
str
create_markers
Type
bool
Createmarkersformissing entries(csv format only).
crs
Reference datacoordinate system (csv format only).
Type
Metashape.CoordinateSystem
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
delimiter
Columndelimiterin csvformat.
Type
str
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
226 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
format
Fileformat.
Type
Metashape.ReferenceFormat
gpu_support
GPU supportflag.
Type
bool
group_delimiters
Combineconsecutivedelimiters incsv format.
Type
bool
ignore_labels
Type
bool
Matchesreference data based on coordinates alone (csvformat only).
items
name
Listofitemsto loadreferencefor(csv format only).
Type
Metashape.ReferenceItems
Taskname.
Type
str
path
Pathtothefile withreference data.
Type
str
shutter_lag
Shutter lag inseconds (APM formatonly).
Type
float
skip_rows
Numberof rowsto skipin (csv formatonly).
Type
int
target
Tasktarget.
Type
Metashape.Tasks.TargetType
threshold
Error thresholdinmeters used whenignore_labelsisset(csv format only).
Type
float
227
Metashape Python Reference, Release 2.1.1
toNetworkTask([objects])
ConverttasktoMetashape.NetworkTask to be applied to specified objects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ImportShapes
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
boundary_type
Type
Boundary typeto be applied to imported shapes.
Metashape.Shape.BoundaryType
columns
Columnorderincsvformat(n-label,x/y/z-coordinates,d-description,[]-groupofmultiplevalues,
|-column separator withingroup).
Type
str
crs
Reference datacoordinate system (csv format only).
Type
Metashape.CoordinateSystem
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
delimiter
Columndelimiterin csvformat.
Type
str
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
228 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
format
Shapes format.
Type
Metashape.ShapesFormat
gpu_support
GPU supportflag.
Type
bool
group_delimiters
Type
bool
Combineconsequitive delimiters in csv format.
name
Taskname.
Type
str
path
Pathtoshape file.
Type
str
replace
Replacecurrent shapeswith newdata.
Type
bool
skip_rows
Numberof rowsto skipin (csv formatonly).
Type
int
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ImportTiledModel
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
229
Metashape Python Reference, Release 2.1.1
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
path
Pathtotiledmodel.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ImportTrajectory
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
tobeprocessed.
• workitem (int)–Workitemindex.
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
230 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
• progress (Callable[[float], None]) – Progress callback.
columns
Type
str
Column order(t- time,x/y/z- coordinates, a/b/c- rotationangles, space -skipcolumn).
crs
Pointcloud coordinatesystem.
Type
Metashape.CoordinateSystem
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
delimiter
CSVdelimiter.
Type
str
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
format
Trajectory format.
Type
Metashape.TrajectoryFormat
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
path
Trajectory filepath.
Type
str
replace_asset
Replacedefaultassetwith importedtrajectory.
Type
bool
shift
Optionalshiftto be applied to point coordinates.
Type
Metashape.Vector
231
Metashape Python Reference, Release 2.1.1
skip_rows
Numberof rowsto skip.
Type
int
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class InvertMasks
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to process.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
232 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class LoadProject
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
archive
Overrideproject formatwhen usingnon-standard fileextension.
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
233
Metashape Python Reference, Release 2.1.1
path
Pathtoproject file.
Type
str
read_only
Open project in readonlymode.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class MatchPhotos
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to match.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
downscale
Type
int
Imagealignmentaccuracy (0 - Highest,1-High, 2 -Medium,4- Low, 8 - Lowest).
downscale_3d
Type
int
Laserscanalignmentaccuracy (1 - Highest,2- High,4 -Medium, 8 -Low, 16 - Lowest).
234 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
filter_mask
Filterpoints bymask.
Type
bool
filter_stationary_points
Excludetie pointswhichare stationaryacross images.
Type
bool
generic_preselection
Enablegenericpreselection.
Type
bool
gpu_support
GPU supportflag.
Type
bool
guided_matching
Enableguided image matching.
Type
bool
keep_keypoints
Store keypoints inthe project.
Type
bool
keypoint_limit
Key point limit.
Type
int
keypoint_limit_3d
Key point limitforlaser scans.
Type
int
keypoint_limit_per_mpx
Key point limitper megapixel.
Type
int
laser_scans_vertical_axis
Commonlaser scans axis.
Type
int
235
Metashape Python Reference, Release 2.1.1
mask_tiepoints
Apply mask filterto tie points.
Type
bool
match_laser_scans
Match laserscans using geometricfeatures.
Type
bool
max_workgroup_size
Maximumworkgroupsize.
Type
int
name
Taskname.
Type
str
pairs
User defined listofcamerapairs to match.
Type
list[tuple[int,int]]
reference_preselection
Enablereference preselection.
Type
bool
reference_preselection_mode
Reference preselection mode.
Type
Metashape.ReferencePreselectionMode
reset_matches
Reset currentmatches.
Type
bool
subdivide_task
Enablefine-leveltasksubdivision.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
tiepoint_limit
Tiepoint limit.
Type
int
236 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
toNetworkTask([objects])
ConverttasktoMetashape.NetworkTask to be applied to specified objects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
workitem_size_cameras
Number of camerasin a workitem.
Type
int
workitem_size_pairs
Number of image pairs inaworkitem.
Type
int
class MergeAssets
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
assets
Listofassetsto process.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
237
Metashape Python Reference, Release 2.1.1
Type
str
source_data
Asset type.
Type
Metashape.DataSource
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class MergeChunks
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
chunks
Listofchunks toprocess.
Type
list[int]
copy_depth_maps
Copydepth maps.
Type
bool
copy_elevations
CopyDEMs.
Type
bool
copy_laser_scans
Copylaser scans.
Type
bool
copy_models
Copymodels.
238 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
bool
copy_orthomosaics
Copy orthomosaics.
Type
bool
copy_point_clouds
Copy point clouds.
Type
bool
copy_tiled_models
Copy tiledmodels.
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
merge_assets
Mergedefault assets.
Type
bool
merge_markers
Mergemarkers.
Type
bool
merge_tiepoints
Mergetie points.
Type
bool
name
Taskname.
Type
str
target
Tasktarget.
239
Metashape Python Reference, Release 2.1.1
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class OptimizeCameras
Taskclasscontainingprocessingparameters.
adaptive_fitting
Type
bool
Enableadaptive fitting ofdistortion coefficients.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
fit_b1
Enableoptimization ofaspectratio.
Type
bool
fit_b2
Enableoptimization ofskewcoefficient.
Type
bool
fit_corrections
Enableoptimization ofadditional corrections.
Type
bool
240 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
fit_cx
Type
bool
Enableoptimization ofX principalpoint coordinates.
fit_cy
Type
bool
Enableoptimization ofY principalpoint coordinates.
fit_f
Enableoptimization offocal length coefficient.
Type
bool
fit_k1
Type
bool
Enableoptimization ofk1 radial distortion coefficient.
fit_k2
Type
bool
Enableoptimization ofk2 radial distortion coefficient.
fit_k3
Type
bool
Enableoptimization ofk3 radial distortion coefficient.
fit_k4
Type
bool
Enableoptimization ofk3 radial distortion coefficient.
fit_p1
Type
bool
Enableoptimization ofp1 tangentialdistortion coefficient.
fit_p2
Type
bool
Enableoptimization ofp2 tangentialdistortion coefficient.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
241
Metashape Python Reference, Release 2.1.1
target
Tasktarget.
Type
Metashape.Tasks.TargetType
tiepoint_covariance
Estimatetie point covariance matrices.
Type
bool
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class PlanMission
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
attach_viewpoints
Type
bool
Generate additional viewpoints toincrease coverage.
capture_distance
Imagecapturedistance (m).
Type
float
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
242 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
bool
group_attached_viewpoints
Ignoreminimumwaypoint spacing for additionalviewpoints.
Type
bool
home_point
Homepointshape key.
Type
int
horizontal_zigzags
Type
bool
Coversurface withhorizontalzigzagsinsteadof vertical.
interesting_zone
Interestingzoneshapelayer key.
Type
int
max_pitch
Maximumcamera pitch angle.
Type
int
min_altitude
Minimumaltitude(m).
Type
float
min_pitch
Minimumcamerapitchangle.
Type
int
min_waypoint_spacing
Minimumwaypointspacing(m).
Type
float
name
Taskname.
Type
str
overlap
Overlappercent.
Type
int
powerlines
Powerlinesshape layer key.
Type
int
243
Metashape Python Reference, Release 2.1.1
restricted_zone
Restrictedzone shape layerkey.
Type
int
safety_distance
Safety distance (m).
Type
float
safety_zone
Safety zoneshape layerkey.
Type
int
sensor
Sensor key.
Type
int
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
use_selection
Focus on model selection.
Type
bool
workitem_count
Work item count.
Type
int
class PublishData
Task class containing processingparameters.
account
Accountname (Melownservice).
Type
str
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
244 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
description
Datasetdescription.
Type
str
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
hostname
Servicehostname (4DMapper service).
Type
str
image_compression
Imagecompressionparameters.
Type
Metashape.ImageCompression
is_draft
Mark datasetasdraft (Sketchfabservice).
Type
bool
is_private
Type
bool
Setdatasetaccess toprivate (Pointbox and Sketchfabservices).
is_protected
Type
bool
Setdatasetaccess toprotected (Pointbox service).
max_zoom_level
Maximumzoomlevel.
Type
int
min_zoom_level
Minimumzoom level.
Type
int
245
Metashape Python Reference, Release 2.1.1
name
Taskname.
Type
str
owner
Accountowner (Cesium andMapbox services).
Type
str
password
Type
str
Accountpassword(4DMapper,Melown, Pointsceneand Sketchfabservices).
point_classes
Listofpointclassesto beexported.
Type
list[int]
projection
Output projection.
Type
Metashape.CoordinateSystem
raster_transform
Raster bandtransformation.
Type
Metashape.RasterTransformType
resolution
Output resolutioninmeters.
Type
float
save_camera_track
Enables/disables export of camera track.
Type
bool
save_point_color
Enables/disables export of pointcolors.
Type
bool
service
Serviceto upload on.
Type
Metashape.ServiceType
source_data
Asset typeto upload.
Type
Metashape.DataSource
246 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
tags
Datasettags.
Type
str
target
Tasktarget.
Type
tile_size
Tile size in pixels.
Type
int
Metashape.Tasks.TargetType
title
Datasettitle.
Type
str
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
token
Accounttoken(Cesium,Mapbox, Picterra,Pointboxand Sketchfabservices).
Type
str
username
Accountusername(4DMapper, Melownand Pointscene services).
Type
str
workitem_count
Work item count.
Type
int
class ReduceOverlap
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
247
Metashape Python Reference, Release 2.1.1
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Task name.
Type
str
overlap
Type
int
Target numberofcamerasobserving each point ofthe surface.
target
Task target.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Converttaskto Metashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])– Objectstobeprocessed.
use_selection
Focus on model selection.
Type
bool
workitem_count
Work item count.
Type
int
class RefineModel
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
248 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
cameras
Listofcameras toprocess.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
downscale
Refinementquality(1-Ultrahigh, 2 - High,4- Medium, 8 - Low, 16- Lowest).
Type
int
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
iterations
Numberof refinement iterations.
Type
int
name
Taskname.
Type
str
smoothness
Smoothing strength. Shouldbe in range [0,1].
Type
float
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
249
Metashape Python Reference, Release 2.1.1
class RemoveLighting
Taskclass containingprocessing parameters.
ambient_occlusion_multiplier
Ambientocclusionmultiplier. Should be in range[0.25, 4].
Type
float
ambient_occlusion_path
Pathtoambientocclusion texture atlas. Can beempty.
Type
str
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
color_mode
Enablemulti-colorprocessing mode.
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
internal_blur
Internalblur. Should bein range [0, 4].
Type
float
mesh_noise_suppression
Mesh normalsnoise suppression strength. Shouldbe in range[0, 4].
Type
float
name
Taskname.
Type
str
250 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class RenderDepthMaps
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to process.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
path_depth
Pathtodepthmap.
251
Metashape Python Reference, Release 2.1.1
Type
str
path_diffuse
Pathtodiffuse map.
Type
str
path_normals
Pathtonormalmap.
Type
str
save_depth
Enableexportof depth map.
Type
bool
save_diffuse
Enableexportof diffusemap.
Type
bool
save_normals
Enableexportof normal map.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class ResetMasks
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
cameras
Listofcameras to process.
252 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Task name.
Type
str
target
Task target.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Converttaskto Metashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])– Objectstobeprocessed.
workitem_count
Work item count.
Type
int
class RunScript
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
args
Script arguments.
Type
str
253
Metashape Python Reference, Release 2.1.1
code
Script code.
Type
str
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
path
Script path.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class SaveProject
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
tobeprocessed.
• workitem (int)–Workitemindex.
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
254 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
• progress (Callable[[float], None]) – Progress callback.
archive
Overrideproject formatwhen usingnon-standard fileextension.
Type
bool
chunks
Listofchunks tobe saved.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
name
Taskname.
Type
str
path
Pathtoproject.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
version
Projectversiontosave.
Type
str
workitem_count
Work item count.
255
Metashape Python Reference, Release 2.1.1
Type
int
class SmoothModel
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
apply_to_selection
Apply toselected faces.
Type
bool
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
fix_borders
Fixborders.
Type
bool
gpu_support
GPU supportflag.
Type
bool
model
Key ofmodelto smooth.
Type
int
name
Taskname.
Type
str
preserve_edges
Preserveedges.
Type
bool
256 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
strength
Smoothing strength.
Type
float
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class SmoothPointCloud
Taskclasscontainingprocessingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
apply_to_selection
Smooth pointswithinselection.
Type
bool
classes
Listofpoint classes tobe smoothed.
Type
list[int]
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
257
Metashape Python Reference, Release 2.1.1
Type
bool
name
Taskname.
Type
str
point_cloud
Key ofpointcloud tofilter.
Type
int
smoothing_radius
Desiredsmoothingradius (m).
Type
float
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class TargetType
Task target type in[DocumentTarget, ChunkTarget, FrameTarget]
class TrackMarkers
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
258 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
encodeJSON()
CreateaJSONstring withtaskparameters.
first_frame
Startingframeindex.
Type
int
gpu_support
GPU supportflag.
Type
bool
last_frame
Ending frameindex.
Type
int
name
Taskname.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
class TransformRaster
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
asset
Asset keyto transform.
Type
int
259
Metashape Python Reference, Release 2.1.1
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
frames
Listofframes to process.
Type
list[int]
gpu_support
GPU supportflag.
Type
bool
height
Raster height.
Type
int
name
Task name.
Type
str
nodata_value
No-datavalue (DEMexport only).
Type
float
north_up
Use north-uporientationfor export.
Type
bool
operand_asset
Operandassetkey.
Type
int
operand_chunk
Operandchunkkey.
Type
int
operand_frame
Operandframekey.
Type
int
260 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
projection
Output projection.
Type
Metashape.OrthoProjection
region
Region to be processed.
Type
Metashape.BBox
replace_asset
Replacedefaultrasterwith transformed one.
Type
bool
resolution
Output resolutioninmeters.
Type
float
resolution_x
Type
float
Pixel sizein theX dimensioninprojected units.
resolution_y
Type
float
Pixel sizein theY dimensioninprojected units.
source_data
Selects between DEM and orthomosaic.
Type
Metashape.DataSource
subtract
Subtractionflag.
Type
bool
target
Tasktarget.
Type
Metashape.Tasks.TargetType
toNetworkTask([objects])
Convert task toMetashape.NetworkTask to be appliedto specifiedobjects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
width
Raster width.
Type
int
261
Metashape Python Reference, Release 2.1.1
workitem_count
Work item count.
Type
int
world_transform
2x3 raster-to-worldtransformation matrix.
Type
Metashape.Matrix
class TriangulateTiePoints
Task class containing processingparameters.
apply(object[,workitem][,progress])
Apply task tospecified object.
Parameters
• object (Metashape.Chunk | Metashape.Document) – Chunk or Document object
tobeprocessed.
• workitem (int)–Workitemindex.
• progress (Callable[[float], None]) – Progress callback.
decode(dict)
Initializetaskparameters witha dictionary.
decodeJSON(json)
Initializetaskparameters from a JSONstring.
encode()
Createadictionary withtaskparameters.
encodeJSON()
CreateaJSONstring withtaskparameters.
gpu_support
GPU supportflag.
Type
bool
max_error
Reprojection errorthreshold.
Type
float
min_image
Minimumnumber ofpointprojections.
Type
int
name
Taskname.
Type
str
target
Tasktarget.
Type
Metashape.Tasks.TargetType
262 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
toNetworkTask([objects])
ConverttasktoMetashape.NetworkTask to be applied to specified objects.
Parameters
objects (Metashape.Document | Metashape.Chunk | list[Metashape.
Chunk])–Objects tobe processed.
workitem_count
Work item count.
Type
int
createTask(name)
Createtaskobjectby its name.
Parameters
name (str)– Taskname.
Returns
Task object.
Return type
object
class Metashape.Thumbnail
Thumbnail instance
copy()
Returns acopy ofthumbnail.
Returns
Copyofthumbnail.
Return type
Metashape.Thumbnail
image()
Returns imagedata.
Returns
Imagedata.
Return type
Metashape.Image
load(path[, layer])
Loadsthumbnail from file.
Parameters
• path (str)– Pathto theimage fileto beloaded.
• layer (int)–Optional layer index in case of multipage files.
setImage(image)
Parameters
image (Metashape.Image) – Image objectwith thumbnail data.
class Metashape.Thumbnails
A setofthumbnailsgeneratedfora chunk frame.
263
Metashape Python Reference, Release 2.1.1
items()
keys()
List of items.
List of itemkeys.
meta
Thumbnails meta data.
Type
Metashape.MetaData
modified
Modifiedflag.
Type
bool
values()
Listofitem values.
class Metashape.TiePoints
Tie point cloudinstance
class Cameras
Collectionof Metashape.TiePoints.Projections objects indexed bycorresponding cameras
class Filter
Tiepoint cloudfilter
The following example selects all tie points from the active chunk that have reprojection error higher than
definedthreshold:
>>> chunk = Metashape.app.document.chunk # active chunk
>>> threshold = 0.5
>>> f = Metashape.TiePoints.Filter()
>>> f.init(chunk, criterion = Metashape.TiePoints.Filter.ReprojectionError)
>>> f.selectPoints(threshold)
class Criterion
curacy]
Pointfilteringcriterionin[ReprojectionError,ReconstructionUncertainty,ImageCount,ProjectionAc-
init(points,criterion,progress)
Initializetiepoints filterbasedonspecifiedcriterion.
Parameters
• points (Metashape.TiePoints | Metashape.Chunk) – Tiepoints tofilter.
• criterion (Metashape.TiePoints.Filter.Criterion) – Point filtercriterion.
• progress (Callable[[float], None]) – Progress callback.
max_value
Maximumvalue.
Type
int|float
min_value
Minimumvalue.
264 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Type
int|float
removePoints(threshold)
Removepointsbased on specifiedthreshold.
Parameters
threshold (float)–Criterion threshold.
resetSelection()
Reset previously madeselection.
selectPoints(threshold)
Selectpoints basedon specified threshold.
Parameters
threshold (float)–Criterion threshold.
values
Listofvalues.
Type
list[int] | list[float]
class Point
3Dpointinthetie point cloud
coord
Pointcoordinates.
Type
Metashape.Vector
cov
Pointcoordinates covariance matrix.
Type
Metashape.Matrix
selected
Pointselection flag.
Type
bool
track_id
Track index.
Type
int
valid
Pointvalidflag.
Type
bool
class Points
Collectionof3Dpoints in thetie pointcloud
copy()
Returnsa copyof pointsbuffer.
Returns
Copyofpointsbuffer.
265
Metashape Python Reference, Release 2.1.1
Return type
Metashape.TiePoints.Points
resize(count)
Resize points list.
Parameters
count (int)– newpoint count
class Projection
Projectionof the3D point onthe photo
coord
2Dprojectioncoordinates.
Type
Metashape.Vector
size
Pointsize.
Type
float
track_id
Trackindex.
Type
int
class Projections
CollectionofMetashape.TiePoints.Projection for the camera
copy()
Returns acopyofprojectionsbuffer.
Returns
Copy of projections buffer.
Return type
Metashape.TiePoints.Projections
resize(count)
Resize projections list.
Parameters
count (int)– newprojectionscount
class Track
Trackin the tie point cloud
color
Trackcolor.
Type
tuple[int |float,...]
class Tracks
Collectionoftracks inthetie point cloud
copy()
Returns acopyoftracksbuffer.
Returns
Copy of tracks buffer.
266 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Return type
Metashape.TiePoints.Tracks
resize(count)
Resize tracklist.
Parameters
count (int)– newtrack count
bands
Listofcolorbands.
Type
list[str]
cleanup([progress])
Removepointswith insufficient number of projections.
Parameters
progress (Callable[[float], None]) – Progress callback.
copy(keypoints=True)
Returns acopyofthe tie point cloud.
Parameters
keypoints (bool)– copy keypoints data.
Returns
Copyofthe tie point cloud.
Return type
Metashape.TiePoints
cropSelectedPoints()
Cropselectedpoints.
cropSelectedTracks()
Cropselectedtie points.
data_type
Datatype used tostorecolorvalues.
Type
Metashape.DataType
export(path, format='obj'[,projection])
Exporttiepoints.
Parameters
• path (str)–Path tooutput file.
• format (str)–Export format in [‘obj’, ‘ply’].
• projection (Metashape.Matrix | Metashape.CoordinateSystem) – Sets output
projection.
meta
Tiepoints metadata.
Type
Metashape.MetaData
267
Metashape Python Reference, Release 2.1.1
modified
Modified flag.
Type
bool
pickPoint(origin,target,endpoints=1)
Returnsrayintersectionwith thetiepointcloud(pointon the raynearestto somepoint).
Parameters
• origin (Metashape.Vector) – Ray origin.
• target (Metashape.Vector) – Point onthe ray.
• endpoints (int)–Numberof endpoints tocheckfor(0 - line,1- ray, 2 -segment).
Returns
Coordinates oftheintersection point.
Return type
Metashape.Vector
points
Listofpoints.
Type
Metashape.TiePoints.Points
projections
Pointprojections for eachphoto.
Type
Metashape.TiePoints.Projections
removeKeypoints()
Removekeypointsfrom tie point cloud.
removeSelectedPoints()
Removeselected points.
removeSelectedTracks()
Removeselected tiepoints.
renderDepth(transform,calibration, point_size=1,cull_points=False,add_alpha=True)
Render tie points depthimageforspecifiedviewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• point_size (int)– Point size.
• cull_points (bool)–Enablenormal based culling.
• add_alpha (bool)–Generate imagewith alpha channel.
Returns
Renderedimage.
Return type
Metashape.Image
268 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
renderImage(transform,calibration, point_size=1, cull_points=False,add_alpha=True,
raster_transform=RasterTransformNone)
Render tie points image for specified viewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• point_size (int)– Point size.
• cull_points (bool)–Enablenormal based culling.
• add_alpha (bool)–Generate imagewith alpha channel.
• raster_transform (Metashape.RasterTransformType) – Raster band transforma-
tion.
Returns
Renderedimage.
Return type
Metashape.Image
renderMask(transform,calibration,point_size=1,cull_points=False)
Render tie points maskimageforspecified viewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• point_size (int)–Point size.
• cull_points (bool)–Enable normal based culling.
Returns
Renderedimage.
Return type
Metashape.Image
renderNormalMap(transform,calibration,point_size=1,cull_points=False,add_alpha=True)
Render imagewith tie pointsnormals for specified viewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• point_size (int)–Pointsize.
• cull_points (bool)–Enablenormal based culling.
• add_alpha (bool)–Generate image with alpha channel.
Returns
Renderedimage.
Return type
Metashape.Image
269
Metashape Python Reference, Release 2.1.1
renderPreview(width= 2048, height= 2048[, transform],point_size=1[,progress])
Generatetiepointspreview image.
Parameters
• width (int)– Preview image width.
• height (int)– Preview image height.
• transform (Metashape.Matrix) – 4x4 viewpoint transformationmatrix.
• point_size (int)– Point size.
• progress (Callable[[float], None]) – Progress callback.
Returns
Preview image.
Return type
Metashape.Image
tracks
Listoftracks.
Type
Metashape.TiePoints.Tracks
class Metashape.TiledModel
Tiled modeldata.
class FaceCount
Tiled modelfacecount in[LowFaceCount, MediumFaceCount, HighFaceCount]
bands
Listofcolorbands.
Type
list[str]
clear()
Clearstiled modeldata.
copy()
Create a copy of thetiledmodel.
Returns
Copyofthe tiled model.
Return type
Metashape.TiledModel
crs
Reference coordinatesystem.
Type
Metashape.CoordinateSystem |None
data_type
Data typeusedto storecolorvalues.
Type
Metashape.DataType
270 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
key
Tiledmodel identifier.
Type
int
label
meta
Tiled modellabel.
Type
str
Tiled modelmetadata.
Type
Metashape.MetaData
modified
Modifiedflag.
Type
bool
pickPoint(origin,target,endpoints=1)
Returnsrayintersectionwith thetiled model.
Parameters
• origin (Metashape.Vector) – Ray origin.
• target (Metashape.Vector) – Point onthe ray.
• endpoints (int)–Numberof endpoints tocheckfor(0 - line,1- ray, 2 -segment).
Returns
Coordinates oftheintersection point.
Return type
Metashape.Vector
renderDepth(transform,calibration, resolution=1, cull_faces=True,add_alpha=True)
Render tiled model depthimage forspecifiedviewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• resolution (float)–Level of detail resolution in screen pixels.
• cull_faces (bool)– Enable back-face culling.
• add_alpha (bool)– Generate image withalpha channel.
Returns
Renderedimage.
Return type
Metashape.Image
271
Metashape Python Reference, Release 2.1.1
renderImage(transform,calibration, resolution=1, cull_faces=True,add_alpha=True,
raster_transform=RasterTransformNone)
Render tiled model imageforspecified viewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• resolution (float)– Level of detail resolutioninscreen pixels.
• cull_faces (bool)– Enable back-face culling.
• add_alpha (bool)– Generate image withalphachannel.
• raster_transform (Metashape.RasterTransformType) – Raster band transforma-
tion.
Returns
Renderedimage.
Return type
Metashape.Image
renderMask(transform,calibration,resolution=1,cull_faces=True)
Render tiled model maskimagefor specified viewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• resolution (float)–Level of detail resolution in screen pixels.
• cull_faces (bool)– Enable back-face culling.
Returns
Renderedimage.
Return type
Metashape.Image
renderNormalMap(transform,calibration,resolution=1,cull_faces=True,add_alpha=True)
Render imagewith tiled model normalsfor specified viewpoint.
Parameters
• transform (Metashape.Matrix) – Camera location.
• calibration (Metashape.Calibration) – Camera calibration.
• resolution (float)–Level ofdetailresolution in screenpixels.
• cull_faces (bool)– Enable back-face culling.
• add_alpha (bool)–Generate image with alpha channel.
Returns
Renderedimage.
Return type
Metashape.Image
272 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
renderPreview(width= 2048, height= 2048[, transform][,progress])
Generatetiledmodelpreviewimage.
Parameters
• width (int)– Preview image width.
• height (int)– Preview image height.
• transform (Metashape.Matrix) – 4x4 viewpoint transformation matrix.
• progress (Callable[[float], None]) – Progress callback.
Returns
Preview image.
Return type
Metashape.Image
transform
4x4tiled model transformationmatrix.
Type
Metashape.Matrix
class Metashape.TiledModelFormat
Tiled model format in [TiledModelFormatNone, TiledModelFormatTLS, TiledModelFormatLOD, TiledMod-
elFormatZIP, TiledModelFormatCesium, TiledModelFormatSLPK, TiledModelFormatOSGB, TiledModelFor-
matOSGT, TiledModelFormat3MX]
class Metashape.TrajectoryFormat
Trajectoryformatin[TrajectoryFormatNone,TrajectoryFormatCSV,TrajectoryFormatSBET,TrajectoryFormat-
SOL, TrajectoryFormatTRJ]
class Metashape.Utils
Utility functions.
createChessboardImage(calib,cell_size=150,max_tilt=30)
Synthesizesphotoofachessboard.
Parameters
• calib (Metashape.Calibration) – Camera calibration.
• cell_size (float)– Chessboard cellsize.
• max_tilt (float)– Maximumcamera tiltindegrees.
Returns
Resulting image.
Return type
Metashape.Image
createDifferenceMask(image,background,tolerance=10, fit_colors=True)
Createsmaskfromapair of imagesor an imageand specified color.
Parameters
• image (Metashape.Image) – Image to be masked.
• background (Metashape.Image | tuple[int, ...]) – Background image or color
value.
273
Metashape Python Reference, Release 2.1.1
• tolerance (int)– Tolerance value.
• fit_colors (bool)– Enableswhite balance correction.
Returns
Resultingmask.
Return type
Metashape.Image
createMarkers(chunk,projections)
Creates markers from a list of non coded projections.
Parameters
• chunk (Metashape.Chunk) – Chunk to createmarkers in.
• projections (list[tuple[Metashape.Camera, Metashape.Target]]) – List of
markerprojections.
detectTargets(image, type=TargetCircular12bit,tolerance=50,inverted=False,noparity=False[,
minimum_size][,minimum_dist])
Detecttargetson theimage.
Parameters
• image (Metashape.Image) – Image to process.
• type (Metashape.TargetType) – Type of targets.
• tolerance (int)–Detectortolerance (0 -100).
• inverted (bool)–Detect markerson black background.
• noparity (bool)–Disable paritychecking.
• minimum_size (int) – Minimum target radius in pixels to be detected (CrossTarget type
only).
• minimum_dist (int) – Minimum distance between targets in pixels (CrossTarget type
only).
Returns
Listofdetected targets.
Return type
list[Metashape.Target]
dmat2euler(R,dR,euler_angles=EulerAnglesYPR)
Calculatetangenteuler rotationvector from tangentrotation matrix.
Parameters
• R (Metashape.Matrix) – Rotation matrix.
• dR (Metashape.Matrix) – Tangent rotation matrix.
• euler_angles (Metashape.EulerAngles) – Euler angles touse.
Returns
Tangent rotation anglesin degrees.
Return type
Metashape.Vector
274 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
estimateImageQuality(image[,mask])
Estimateimagesharpness.
Parameters
• image (Metashape.Image) – Image to be analyzed.
• mask (Metashape.Image) – Mask of the analyzedimageregion.
Returns
Quality metric.
Return type
float
euler2mat(rotation, euler_angles=EulerAnglesYPR)
Calculatecameratoworldrotation matrix from euler rotationangles.
Parameters
• rotation (Metashape.Vector) – Rotation vector.
• euler_angles (Metashape.EulerAngles) – Euler angles to use.
Returns
Rotation matrix.
Return type
Metashape.Matrix
mat2euler(R,euler_angles=EulerAnglesYPR)
Calculateeuler rotationangles fromcamerato world rotationmatrix.
Parameters
• R (Metashape.Matrix) – Rotation matrix.
• euler_angles (Metashape.EulerAngles) – Euler angles to use.
Returns
Rotation angles in degrees.
Return type
Metashape.Vector
mat2opk(R)
Calculateomega, phi, kappa from camerato world rotationmatrix.
Parameters
R (Metashape.Matrix)–Rotation matrix.
Returns
Omega, phi,kappa angles in degrees.
Return type
Metashape.Vector
mat2ypr(R)
Calculateyaw,pitch, roll from camera to world rotationmatrix.
Parameters
R (Metashape.Matrix)– Rotation matrix.
Returns
Yaw,pitchrollanglesindegrees.
275
Metashape Python Reference, Release 2.1.1
Return type
Metashape.Vector
opk2mat(angles)
Calculatecameratoworldrotation matrix from omega,phi, kappaangles.
Parameters
angles (Metashape.Vector) – Omega, phi, kappa angles in degrees.
Returns
Rotationmatrix.
Return type
Metashape.Matrix
ypr2mat(angles)
Calculatecamera to world rotationmatrix from yaw,pitch, rollangles.
Parameters
angles (Metashape.Vector) – Yaw,pitch,rollangles in degrees.
Returns
Rotationmatrix.
Return type
Metashape.Matrix
class Metashape.Vector
n-componentvector
>>> import Metashape
>>> vect = Metashape.Vector( (1, 2, 3) )
>>> vect2 = vect.copy()
>>> vect2.size = 4
>>> vect2.w = 5
>>> vect2 *= -1.5
>>> vect.size = 4
>>> vect.normalize()
>>> Metashape.app.messageBox("Scalar product is " + str(vect2 * vect))
copy()
Returnacopyof thevector.
Returns
Acopyofthe vector.
Return type
Metashape.Vector
cross(a,b)
Cross productof2vectors.
Parameters
• a (Metashape.Vector) – First vector.
• b (Metashape.Vector) – Second vector.
Returns
Cross product.
276 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
Return type
Metashape.Vector
norm()
Return normofthevector.
norm2()
Return squarednorm of thevector.
normalize()
Normalize vectorto the unitlength.
normalized()
Returnanew,normalizedvector.
Returns
anormalizedcopyofthe vector
Return type
Metashape.Vector
size
w
x
y
Vector dimensions.
Type
int
Vector W component.
Type
float
Vector X component.
Type
float
Vector Y component.
Type
float
z
Vector Z component.
Type
float
zero()
Set all elements tozero.
class Metashape.Version
Versionobjectcontains applicationversion numbers.
build
Build number.
277
Metashape Python Reference, Release 2.1.1
copy()
Type
int
Returnacopyof theobject.
Returns
Acopyofthe object.
Return type
Metashape.Version
major
Major version number.
Type
int
micro
Micro version number.
Type
int
minor
Minor version number.
Type
int
class Metashape.Viewpoint(app)
Representsviewpoint inthemodelview
center
Camera center.
Type
Metashape.Vector
coo
Center of orbit.
Type
Metashape.Vector
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.Viewpoint
fov
Cameraverticalfieldofviewin degrees.
Type
float
278 Chapter 2. Application Modules
Metashape Python Reference, Release 2.1.1
height
OpenGLwindow height.
Type
int
mag
Cameramagnification defined by distancetothe centerof rotation.
Type
float
rot
Camerarotation matrix.
Type
Metashape.Matrix
width
OpenGL window width.
Type
int
class Metashape.Vignetting
Vignettingpolynomial
copy()
Returnacopyofthe object.
Returns
Acopyofthe object.
Return type
Metashape.Vignetting
279
Metashape Python Reference, Release 2.1.1
280 